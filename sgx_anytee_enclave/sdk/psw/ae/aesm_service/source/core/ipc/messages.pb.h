// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[35]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace aesm {
namespace message {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Request_CheckUpdateStatusRequest;
class Request_CheckUpdateStatusRequestDefaultTypeInternal;
extern Request_CheckUpdateStatusRequestDefaultTypeInternal _Request_CheckUpdateStatusRequest_default_instance_;
class Request_GetLaunchTokenRequest;
class Request_GetLaunchTokenRequestDefaultTypeInternal;
extern Request_GetLaunchTokenRequestDefaultTypeInternal _Request_GetLaunchTokenRequest_default_instance_;
class Request_GetQuoteExRequest;
class Request_GetQuoteExRequestDefaultTypeInternal;
extern Request_GetQuoteExRequestDefaultTypeInternal _Request_GetQuoteExRequest_default_instance_;
class Request_GetQuoteRequest;
class Request_GetQuoteRequestDefaultTypeInternal;
extern Request_GetQuoteRequestDefaultTypeInternal _Request_GetQuoteRequest_default_instance_;
class Request_GetQuoteSizeExRequest;
class Request_GetQuoteSizeExRequestDefaultTypeInternal;
extern Request_GetQuoteSizeExRequestDefaultTypeInternal _Request_GetQuoteSizeExRequest_default_instance_;
class Request_GetSupportedAttKeyIDNumRequest;
class Request_GetSupportedAttKeyIDNumRequestDefaultTypeInternal;
extern Request_GetSupportedAttKeyIDNumRequestDefaultTypeInternal _Request_GetSupportedAttKeyIDNumRequest_default_instance_;
class Request_GetSupportedAttKeyIDsRequest;
class Request_GetSupportedAttKeyIDsRequestDefaultTypeInternal;
extern Request_GetSupportedAttKeyIDsRequestDefaultTypeInternal _Request_GetSupportedAttKeyIDsRequest_default_instance_;
class Request_GetWhiteListRequest;
class Request_GetWhiteListRequestDefaultTypeInternal;
extern Request_GetWhiteListRequestDefaultTypeInternal _Request_GetWhiteListRequest_default_instance_;
class Request_GetWhiteListSizeRequest;
class Request_GetWhiteListSizeRequestDefaultTypeInternal;
extern Request_GetWhiteListSizeRequestDefaultTypeInternal _Request_GetWhiteListSizeRequest_default_instance_;
class Request_InitQuoteExRequest;
class Request_InitQuoteExRequestDefaultTypeInternal;
extern Request_InitQuoteExRequestDefaultTypeInternal _Request_InitQuoteExRequest_default_instance_;
class Request_InitQuoteRequest;
class Request_InitQuoteRequestDefaultTypeInternal;
extern Request_InitQuoteRequestDefaultTypeInternal _Request_InitQuoteRequest_default_instance_;
class Request_ReportAttestationErrorRequest;
class Request_ReportAttestationErrorRequestDefaultTypeInternal;
extern Request_ReportAttestationErrorRequestDefaultTypeInternal _Request_ReportAttestationErrorRequest_default_instance_;
class Request_SGXGetExtendedEpidGroupIdRequest;
class Request_SGXGetExtendedEpidGroupIdRequestDefaultTypeInternal;
extern Request_SGXGetExtendedEpidGroupIdRequestDefaultTypeInternal _Request_SGXGetExtendedEpidGroupIdRequest_default_instance_;
class Request_SGXRegisterRequest;
class Request_SGXRegisterRequestDefaultTypeInternal;
extern Request_SGXRegisterRequestDefaultTypeInternal _Request_SGXRegisterRequest_default_instance_;
class Request_SGXSwitchExtendedEpidGroupRequest;
class Request_SGXSwitchExtendedEpidGroupRequestDefaultTypeInternal;
extern Request_SGXSwitchExtendedEpidGroupRequestDefaultTypeInternal _Request_SGXSwitchExtendedEpidGroupRequest_default_instance_;
class Request_SelectAttKeyIDRequest;
class Request_SelectAttKeyIDRequestDefaultTypeInternal;
extern Request_SelectAttKeyIDRequestDefaultTypeInternal _Request_SelectAttKeyIDRequest_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_CheckUpdateStatusResponse;
class Response_CheckUpdateStatusResponseDefaultTypeInternal;
extern Response_CheckUpdateStatusResponseDefaultTypeInternal _Response_CheckUpdateStatusResponse_default_instance_;
class Response_GetLaunchTokenResponse;
class Response_GetLaunchTokenResponseDefaultTypeInternal;
extern Response_GetLaunchTokenResponseDefaultTypeInternal _Response_GetLaunchTokenResponse_default_instance_;
class Response_GetQuoteExResponse;
class Response_GetQuoteExResponseDefaultTypeInternal;
extern Response_GetQuoteExResponseDefaultTypeInternal _Response_GetQuoteExResponse_default_instance_;
class Response_GetQuoteResponse;
class Response_GetQuoteResponseDefaultTypeInternal;
extern Response_GetQuoteResponseDefaultTypeInternal _Response_GetQuoteResponse_default_instance_;
class Response_GetQuoteSizeExResponse;
class Response_GetQuoteSizeExResponseDefaultTypeInternal;
extern Response_GetQuoteSizeExResponseDefaultTypeInternal _Response_GetQuoteSizeExResponse_default_instance_;
class Response_GetSupportedAttKeyIDNumResponse;
class Response_GetSupportedAttKeyIDNumResponseDefaultTypeInternal;
extern Response_GetSupportedAttKeyIDNumResponseDefaultTypeInternal _Response_GetSupportedAttKeyIDNumResponse_default_instance_;
class Response_GetSupportedAttKeyIDsResponse;
class Response_GetSupportedAttKeyIDsResponseDefaultTypeInternal;
extern Response_GetSupportedAttKeyIDsResponseDefaultTypeInternal _Response_GetSupportedAttKeyIDsResponse_default_instance_;
class Response_GetWhiteListResponse;
class Response_GetWhiteListResponseDefaultTypeInternal;
extern Response_GetWhiteListResponseDefaultTypeInternal _Response_GetWhiteListResponse_default_instance_;
class Response_GetWhiteListSizeResponse;
class Response_GetWhiteListSizeResponseDefaultTypeInternal;
extern Response_GetWhiteListSizeResponseDefaultTypeInternal _Response_GetWhiteListSizeResponse_default_instance_;
class Response_InitQuoteExResponse;
class Response_InitQuoteExResponseDefaultTypeInternal;
extern Response_InitQuoteExResponseDefaultTypeInternal _Response_InitQuoteExResponse_default_instance_;
class Response_InitQuoteResponse;
class Response_InitQuoteResponseDefaultTypeInternal;
extern Response_InitQuoteResponseDefaultTypeInternal _Response_InitQuoteResponse_default_instance_;
class Response_ReportAttestationErrorResponse;
class Response_ReportAttestationErrorResponseDefaultTypeInternal;
extern Response_ReportAttestationErrorResponseDefaultTypeInternal _Response_ReportAttestationErrorResponse_default_instance_;
class Response_SGXGetExtendedEpidGroupIdResponse;
class Response_SGXGetExtendedEpidGroupIdResponseDefaultTypeInternal;
extern Response_SGXGetExtendedEpidGroupIdResponseDefaultTypeInternal _Response_SGXGetExtendedEpidGroupIdResponse_default_instance_;
class Response_SGXRegisterResponse;
class Response_SGXRegisterResponseDefaultTypeInternal;
extern Response_SGXRegisterResponseDefaultTypeInternal _Response_SGXRegisterResponse_default_instance_;
class Response_SGXSwitchExtendedEpidGroupResponse;
class Response_SGXSwitchExtendedEpidGroupResponseDefaultTypeInternal;
extern Response_SGXSwitchExtendedEpidGroupResponseDefaultTypeInternal _Response_SGXSwitchExtendedEpidGroupResponse_default_instance_;
class Response_SelectAttKeyIDResponse;
class Response_SelectAttKeyIDResponseDefaultTypeInternal;
extern Response_SelectAttKeyIDResponseDefaultTypeInternal _Response_SelectAttKeyIDResponse_default_instance_;
class Response_UnsupportedRequestResponse;
class Response_UnsupportedRequestResponseDefaultTypeInternal;
extern Response_UnsupportedRequestResponseDefaultTypeInternal _Response_UnsupportedRequestResponse_default_instance_;
}  // namespace message
}  // namespace aesm
PROTOBUF_NAMESPACE_OPEN
template<> ::aesm::message::Request* Arena::CreateMaybeMessage<::aesm::message::Request>(Arena*);
template<> ::aesm::message::Request_CheckUpdateStatusRequest* Arena::CreateMaybeMessage<::aesm::message::Request_CheckUpdateStatusRequest>(Arena*);
template<> ::aesm::message::Request_GetLaunchTokenRequest* Arena::CreateMaybeMessage<::aesm::message::Request_GetLaunchTokenRequest>(Arena*);
template<> ::aesm::message::Request_GetQuoteExRequest* Arena::CreateMaybeMessage<::aesm::message::Request_GetQuoteExRequest>(Arena*);
template<> ::aesm::message::Request_GetQuoteRequest* Arena::CreateMaybeMessage<::aesm::message::Request_GetQuoteRequest>(Arena*);
template<> ::aesm::message::Request_GetQuoteSizeExRequest* Arena::CreateMaybeMessage<::aesm::message::Request_GetQuoteSizeExRequest>(Arena*);
template<> ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* Arena::CreateMaybeMessage<::aesm::message::Request_GetSupportedAttKeyIDNumRequest>(Arena*);
template<> ::aesm::message::Request_GetSupportedAttKeyIDsRequest* Arena::CreateMaybeMessage<::aesm::message::Request_GetSupportedAttKeyIDsRequest>(Arena*);
template<> ::aesm::message::Request_GetWhiteListRequest* Arena::CreateMaybeMessage<::aesm::message::Request_GetWhiteListRequest>(Arena*);
template<> ::aesm::message::Request_GetWhiteListSizeRequest* Arena::CreateMaybeMessage<::aesm::message::Request_GetWhiteListSizeRequest>(Arena*);
template<> ::aesm::message::Request_InitQuoteExRequest* Arena::CreateMaybeMessage<::aesm::message::Request_InitQuoteExRequest>(Arena*);
template<> ::aesm::message::Request_InitQuoteRequest* Arena::CreateMaybeMessage<::aesm::message::Request_InitQuoteRequest>(Arena*);
template<> ::aesm::message::Request_ReportAttestationErrorRequest* Arena::CreateMaybeMessage<::aesm::message::Request_ReportAttestationErrorRequest>(Arena*);
template<> ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* Arena::CreateMaybeMessage<::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest>(Arena*);
template<> ::aesm::message::Request_SGXRegisterRequest* Arena::CreateMaybeMessage<::aesm::message::Request_SGXRegisterRequest>(Arena*);
template<> ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* Arena::CreateMaybeMessage<::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest>(Arena*);
template<> ::aesm::message::Request_SelectAttKeyIDRequest* Arena::CreateMaybeMessage<::aesm::message::Request_SelectAttKeyIDRequest>(Arena*);
template<> ::aesm::message::Response* Arena::CreateMaybeMessage<::aesm::message::Response>(Arena*);
template<> ::aesm::message::Response_CheckUpdateStatusResponse* Arena::CreateMaybeMessage<::aesm::message::Response_CheckUpdateStatusResponse>(Arena*);
template<> ::aesm::message::Response_GetLaunchTokenResponse* Arena::CreateMaybeMessage<::aesm::message::Response_GetLaunchTokenResponse>(Arena*);
template<> ::aesm::message::Response_GetQuoteExResponse* Arena::CreateMaybeMessage<::aesm::message::Response_GetQuoteExResponse>(Arena*);
template<> ::aesm::message::Response_GetQuoteResponse* Arena::CreateMaybeMessage<::aesm::message::Response_GetQuoteResponse>(Arena*);
template<> ::aesm::message::Response_GetQuoteSizeExResponse* Arena::CreateMaybeMessage<::aesm::message::Response_GetQuoteSizeExResponse>(Arena*);
template<> ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* Arena::CreateMaybeMessage<::aesm::message::Response_GetSupportedAttKeyIDNumResponse>(Arena*);
template<> ::aesm::message::Response_GetSupportedAttKeyIDsResponse* Arena::CreateMaybeMessage<::aesm::message::Response_GetSupportedAttKeyIDsResponse>(Arena*);
template<> ::aesm::message::Response_GetWhiteListResponse* Arena::CreateMaybeMessage<::aesm::message::Response_GetWhiteListResponse>(Arena*);
template<> ::aesm::message::Response_GetWhiteListSizeResponse* Arena::CreateMaybeMessage<::aesm::message::Response_GetWhiteListSizeResponse>(Arena*);
template<> ::aesm::message::Response_InitQuoteExResponse* Arena::CreateMaybeMessage<::aesm::message::Response_InitQuoteExResponse>(Arena*);
template<> ::aesm::message::Response_InitQuoteResponse* Arena::CreateMaybeMessage<::aesm::message::Response_InitQuoteResponse>(Arena*);
template<> ::aesm::message::Response_ReportAttestationErrorResponse* Arena::CreateMaybeMessage<::aesm::message::Response_ReportAttestationErrorResponse>(Arena*);
template<> ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* Arena::CreateMaybeMessage<::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse>(Arena*);
template<> ::aesm::message::Response_SGXRegisterResponse* Arena::CreateMaybeMessage<::aesm::message::Response_SGXRegisterResponse>(Arena*);
template<> ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* Arena::CreateMaybeMessage<::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse>(Arena*);
template<> ::aesm::message::Response_SelectAttKeyIDResponse* Arena::CreateMaybeMessage<::aesm::message::Response_SelectAttKeyIDResponse>(Arena*);
template<> ::aesm::message::Response_UnsupportedRequestResponse* Arena::CreateMaybeMessage<::aesm::message::Response_UnsupportedRequestResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aesm {
namespace message {

// ===================================================================

class Request_InitQuoteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.InitQuoteRequest) */ {
 public:
  inline Request_InitQuoteRequest() : Request_InitQuoteRequest(nullptr) {};
  virtual ~Request_InitQuoteRequest();

  Request_InitQuoteRequest(const Request_InitQuoteRequest& from);
  Request_InitQuoteRequest(Request_InitQuoteRequest&& from) noexcept
    : Request_InitQuoteRequest() {
    *this = ::std::move(from);
  }

  inline Request_InitQuoteRequest& operator=(const Request_InitQuoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_InitQuoteRequest& operator=(Request_InitQuoteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_InitQuoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_InitQuoteRequest* internal_default_instance() {
    return reinterpret_cast<const Request_InitQuoteRequest*>(
               &_Request_InitQuoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request_InitQuoteRequest& a, Request_InitQuoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_InitQuoteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_InitQuoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_InitQuoteRequest* New() const final {
    return CreateMaybeMessage<Request_InitQuoteRequest>(nullptr);
  }

  Request_InitQuoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_InitQuoteRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_InitQuoteRequest& from);
  void MergeFrom(const Request_InitQuoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_InitQuoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.InitQuoteRequest";
  }
  protected:
  explicit Request_InitQuoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutFieldNumber = 9,
  };
  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.InitQuoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_GetQuoteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.GetQuoteRequest) */ {
 public:
  inline Request_GetQuoteRequest() : Request_GetQuoteRequest(nullptr) {};
  virtual ~Request_GetQuoteRequest();

  Request_GetQuoteRequest(const Request_GetQuoteRequest& from);
  Request_GetQuoteRequest(Request_GetQuoteRequest&& from) noexcept
    : Request_GetQuoteRequest() {
    *this = ::std::move(from);
  }

  inline Request_GetQuoteRequest& operator=(const Request_GetQuoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetQuoteRequest& operator=(Request_GetQuoteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_GetQuoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_GetQuoteRequest* internal_default_instance() {
    return reinterpret_cast<const Request_GetQuoteRequest*>(
               &_Request_GetQuoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request_GetQuoteRequest& a, Request_GetQuoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetQuoteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetQuoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetQuoteRequest* New() const final {
    return CreateMaybeMessage<Request_GetQuoteRequest>(nullptr);
  }

  Request_GetQuoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetQuoteRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_GetQuoteRequest& from);
  void MergeFrom(const Request_GetQuoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_GetQuoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.GetQuoteRequest";
  }
  protected:
  explicit Request_GetQuoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportFieldNumber = 1,
    kSpidFieldNumber = 3,
    kNonceFieldNumber = 4,
    kSigRlFieldNumber = 5,
    kQuoteTypeFieldNumber = 2,
    kBufSizeFieldNumber = 6,
    kQeReportFieldNumber = 7,
    kTimeoutFieldNumber = 9,
  };
  // required bytes report = 1;
  bool has_report() const;
  private:
  bool _internal_has_report() const;
  public:
  void clear_report();
  const std::string& report() const;
  void set_report(const std::string& value);
  void set_report(std::string&& value);
  void set_report(const char* value);
  void set_report(const void* value, size_t size);
  std::string* mutable_report();
  std::string* release_report();
  void set_allocated_report(std::string* report);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_report();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_report(
      std::string* report);
  private:
  const std::string& _internal_report() const;
  void _internal_set_report(const std::string& value);
  std::string* _internal_mutable_report();
  public:

  // required bytes spid = 3;
  bool has_spid() const;
  private:
  bool _internal_has_spid() const;
  public:
  void clear_spid();
  const std::string& spid() const;
  void set_spid(const std::string& value);
  void set_spid(std::string&& value);
  void set_spid(const char* value);
  void set_spid(const void* value, size_t size);
  std::string* mutable_spid();
  std::string* release_spid();
  void set_allocated_spid(std::string* spid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_spid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_spid(
      std::string* spid);
  private:
  const std::string& _internal_spid() const;
  void _internal_set_spid(const std::string& value);
  std::string* _internal_mutable_spid();
  public:

  // optional bytes nonce = 4;
  bool has_nonce() const;
  private:
  bool _internal_has_nonce() const;
  public:
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nonce();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nonce(
      std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // optional bytes sig_rl = 5;
  bool has_sig_rl() const;
  private:
  bool _internal_has_sig_rl() const;
  public:
  void clear_sig_rl();
  const std::string& sig_rl() const;
  void set_sig_rl(const std::string& value);
  void set_sig_rl(std::string&& value);
  void set_sig_rl(const char* value);
  void set_sig_rl(const void* value, size_t size);
  std::string* mutable_sig_rl();
  std::string* release_sig_rl();
  void set_allocated_sig_rl(std::string* sig_rl);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sig_rl();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sig_rl(
      std::string* sig_rl);
  private:
  const std::string& _internal_sig_rl() const;
  void _internal_set_sig_rl(const std::string& value);
  std::string* _internal_mutable_sig_rl();
  public:

  // required uint32 quote_type = 2;
  bool has_quote_type() const;
  private:
  bool _internal_has_quote_type() const;
  public:
  void clear_quote_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 quote_type() const;
  void set_quote_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quote_type() const;
  void _internal_set_quote_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 buf_size = 6;
  bool has_buf_size() const;
  private:
  bool _internal_has_buf_size() const;
  public:
  void clear_buf_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 buf_size() const;
  void set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buf_size() const;
  void _internal_set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool qe_report = 7;
  bool has_qe_report() const;
  private:
  bool _internal_has_qe_report() const;
  public:
  void clear_qe_report();
  bool qe_report() const;
  void set_qe_report(bool value);
  private:
  bool _internal_qe_report() const;
  void _internal_set_qe_report(bool value);
  public:

  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.GetQuoteRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_rl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quote_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buf_size_;
  bool qe_report_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_GetLaunchTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.GetLaunchTokenRequest) */ {
 public:
  inline Request_GetLaunchTokenRequest() : Request_GetLaunchTokenRequest(nullptr) {};
  virtual ~Request_GetLaunchTokenRequest();

  Request_GetLaunchTokenRequest(const Request_GetLaunchTokenRequest& from);
  Request_GetLaunchTokenRequest(Request_GetLaunchTokenRequest&& from) noexcept
    : Request_GetLaunchTokenRequest() {
    *this = ::std::move(from);
  }

  inline Request_GetLaunchTokenRequest& operator=(const Request_GetLaunchTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetLaunchTokenRequest& operator=(Request_GetLaunchTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_GetLaunchTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_GetLaunchTokenRequest* internal_default_instance() {
    return reinterpret_cast<const Request_GetLaunchTokenRequest*>(
               &_Request_GetLaunchTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request_GetLaunchTokenRequest& a, Request_GetLaunchTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetLaunchTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetLaunchTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetLaunchTokenRequest* New() const final {
    return CreateMaybeMessage<Request_GetLaunchTokenRequest>(nullptr);
  }

  Request_GetLaunchTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetLaunchTokenRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_GetLaunchTokenRequest& from);
  void MergeFrom(const Request_GetLaunchTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_GetLaunchTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.GetLaunchTokenRequest";
  }
  protected:
  explicit Request_GetLaunchTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMrEnclaveFieldNumber = 1,
    kMrSignerFieldNumber = 2,
    kSeAttributesFieldNumber = 3,
    kTimeoutFieldNumber = 9,
  };
  // required bytes mr_enclave = 1;
  bool has_mr_enclave() const;
  private:
  bool _internal_has_mr_enclave() const;
  public:
  void clear_mr_enclave();
  const std::string& mr_enclave() const;
  void set_mr_enclave(const std::string& value);
  void set_mr_enclave(std::string&& value);
  void set_mr_enclave(const char* value);
  void set_mr_enclave(const void* value, size_t size);
  std::string* mutable_mr_enclave();
  std::string* release_mr_enclave();
  void set_allocated_mr_enclave(std::string* mr_enclave);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mr_enclave();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mr_enclave(
      std::string* mr_enclave);
  private:
  const std::string& _internal_mr_enclave() const;
  void _internal_set_mr_enclave(const std::string& value);
  std::string* _internal_mutable_mr_enclave();
  public:

  // required bytes mr_signer = 2;
  bool has_mr_signer() const;
  private:
  bool _internal_has_mr_signer() const;
  public:
  void clear_mr_signer();
  const std::string& mr_signer() const;
  void set_mr_signer(const std::string& value);
  void set_mr_signer(std::string&& value);
  void set_mr_signer(const char* value);
  void set_mr_signer(const void* value, size_t size);
  std::string* mutable_mr_signer();
  std::string* release_mr_signer();
  void set_allocated_mr_signer(std::string* mr_signer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mr_signer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mr_signer(
      std::string* mr_signer);
  private:
  const std::string& _internal_mr_signer() const;
  void _internal_set_mr_signer(const std::string& value);
  std::string* _internal_mutable_mr_signer();
  public:

  // required bytes se_attributes = 3;
  bool has_se_attributes() const;
  private:
  bool _internal_has_se_attributes() const;
  public:
  void clear_se_attributes();
  const std::string& se_attributes() const;
  void set_se_attributes(const std::string& value);
  void set_se_attributes(std::string&& value);
  void set_se_attributes(const char* value);
  void set_se_attributes(const void* value, size_t size);
  std::string* mutable_se_attributes();
  std::string* release_se_attributes();
  void set_allocated_se_attributes(std::string* se_attributes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_se_attributes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_se_attributes(
      std::string* se_attributes);
  private:
  const std::string& _internal_se_attributes() const;
  void _internal_set_se_attributes(const std::string& value);
  std::string* _internal_mutable_se_attributes();
  public:

  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.GetLaunchTokenRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mr_enclave_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mr_signer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr se_attributes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_ReportAttestationErrorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.ReportAttestationErrorRequest) */ {
 public:
  inline Request_ReportAttestationErrorRequest() : Request_ReportAttestationErrorRequest(nullptr) {};
  virtual ~Request_ReportAttestationErrorRequest();

  Request_ReportAttestationErrorRequest(const Request_ReportAttestationErrorRequest& from);
  Request_ReportAttestationErrorRequest(Request_ReportAttestationErrorRequest&& from) noexcept
    : Request_ReportAttestationErrorRequest() {
    *this = ::std::move(from);
  }

  inline Request_ReportAttestationErrorRequest& operator=(const Request_ReportAttestationErrorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_ReportAttestationErrorRequest& operator=(Request_ReportAttestationErrorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_ReportAttestationErrorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_ReportAttestationErrorRequest* internal_default_instance() {
    return reinterpret_cast<const Request_ReportAttestationErrorRequest*>(
               &_Request_ReportAttestationErrorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Request_ReportAttestationErrorRequest& a, Request_ReportAttestationErrorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_ReportAttestationErrorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_ReportAttestationErrorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_ReportAttestationErrorRequest* New() const final {
    return CreateMaybeMessage<Request_ReportAttestationErrorRequest>(nullptr);
  }

  Request_ReportAttestationErrorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_ReportAttestationErrorRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_ReportAttestationErrorRequest& from);
  void MergeFrom(const Request_ReportAttestationErrorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_ReportAttestationErrorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.ReportAttestationErrorRequest";
  }
  protected:
  explicit Request_ReportAttestationErrorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformInfoFieldNumber = 1,
    kAttestationErrorCodeFieldNumber = 2,
    kUpdateInfoSizeFieldNumber = 3,
    kTimeoutFieldNumber = 9,
  };
  // required bytes platform_info = 1;
  bool has_platform_info() const;
  private:
  bool _internal_has_platform_info() const;
  public:
  void clear_platform_info();
  const std::string& platform_info() const;
  void set_platform_info(const std::string& value);
  void set_platform_info(std::string&& value);
  void set_platform_info(const char* value);
  void set_platform_info(const void* value, size_t size);
  std::string* mutable_platform_info();
  std::string* release_platform_info();
  void set_allocated_platform_info(std::string* platform_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_platform_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_platform_info(
      std::string* platform_info);
  private:
  const std::string& _internal_platform_info() const;
  void _internal_set_platform_info(const std::string& value);
  std::string* _internal_mutable_platform_info();
  public:

  // required uint32 attestation_error_code = 2;
  bool has_attestation_error_code() const;
  private:
  bool _internal_has_attestation_error_code() const;
  public:
  void clear_attestation_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 attestation_error_code() const;
  void set_attestation_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attestation_error_code() const;
  void _internal_set_attestation_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 update_info_size = 3;
  bool has_update_info_size() const;
  private:
  bool _internal_has_update_info_size() const;
  public:
  void clear_update_info_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_info_size() const;
  void set_update_info_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_update_info_size() const;
  void _internal_set_update_info_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.ReportAttestationErrorRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attestation_error_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_info_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_CheckUpdateStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.CheckUpdateStatusRequest) */ {
 public:
  inline Request_CheckUpdateStatusRequest() : Request_CheckUpdateStatusRequest(nullptr) {};
  virtual ~Request_CheckUpdateStatusRequest();

  Request_CheckUpdateStatusRequest(const Request_CheckUpdateStatusRequest& from);
  Request_CheckUpdateStatusRequest(Request_CheckUpdateStatusRequest&& from) noexcept
    : Request_CheckUpdateStatusRequest() {
    *this = ::std::move(from);
  }

  inline Request_CheckUpdateStatusRequest& operator=(const Request_CheckUpdateStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_CheckUpdateStatusRequest& operator=(Request_CheckUpdateStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_CheckUpdateStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_CheckUpdateStatusRequest* internal_default_instance() {
    return reinterpret_cast<const Request_CheckUpdateStatusRequest*>(
               &_Request_CheckUpdateStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Request_CheckUpdateStatusRequest& a, Request_CheckUpdateStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_CheckUpdateStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_CheckUpdateStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_CheckUpdateStatusRequest* New() const final {
    return CreateMaybeMessage<Request_CheckUpdateStatusRequest>(nullptr);
  }

  Request_CheckUpdateStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_CheckUpdateStatusRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_CheckUpdateStatusRequest& from);
  void MergeFrom(const Request_CheckUpdateStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_CheckUpdateStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.CheckUpdateStatusRequest";
  }
  protected:
  explicit Request_CheckUpdateStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformInfoFieldNumber = 1,
    kUpdateInfoSizeFieldNumber = 2,
    kConfigFieldNumber = 3,
    kTimeoutFieldNumber = 9,
  };
  // optional bytes platform_info = 1;
  bool has_platform_info() const;
  private:
  bool _internal_has_platform_info() const;
  public:
  void clear_platform_info();
  const std::string& platform_info() const;
  void set_platform_info(const std::string& value);
  void set_platform_info(std::string&& value);
  void set_platform_info(const char* value);
  void set_platform_info(const void* value, size_t size);
  std::string* mutable_platform_info();
  std::string* release_platform_info();
  void set_allocated_platform_info(std::string* platform_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_platform_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_platform_info(
      std::string* platform_info);
  private:
  const std::string& _internal_platform_info() const;
  void _internal_set_platform_info(const std::string& value);
  std::string* _internal_mutable_platform_info();
  public:

  // required uint32 update_info_size = 2;
  bool has_update_info_size() const;
  private:
  bool _internal_has_update_info_size() const;
  public:
  void clear_update_info_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_info_size() const;
  void set_update_info_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_update_info_size() const;
  void _internal_set_update_info_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 config = 3;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  ::PROTOBUF_NAMESPACE_ID::uint32 config() const;
  void set_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_config() const;
  void _internal_set_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.CheckUpdateStatusRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_info_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_GetWhiteListSizeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.GetWhiteListSizeRequest) */ {
 public:
  inline Request_GetWhiteListSizeRequest() : Request_GetWhiteListSizeRequest(nullptr) {};
  virtual ~Request_GetWhiteListSizeRequest();

  Request_GetWhiteListSizeRequest(const Request_GetWhiteListSizeRequest& from);
  Request_GetWhiteListSizeRequest(Request_GetWhiteListSizeRequest&& from) noexcept
    : Request_GetWhiteListSizeRequest() {
    *this = ::std::move(from);
  }

  inline Request_GetWhiteListSizeRequest& operator=(const Request_GetWhiteListSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetWhiteListSizeRequest& operator=(Request_GetWhiteListSizeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_GetWhiteListSizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_GetWhiteListSizeRequest* internal_default_instance() {
    return reinterpret_cast<const Request_GetWhiteListSizeRequest*>(
               &_Request_GetWhiteListSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Request_GetWhiteListSizeRequest& a, Request_GetWhiteListSizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetWhiteListSizeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetWhiteListSizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetWhiteListSizeRequest* New() const final {
    return CreateMaybeMessage<Request_GetWhiteListSizeRequest>(nullptr);
  }

  Request_GetWhiteListSizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetWhiteListSizeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_GetWhiteListSizeRequest& from);
  void MergeFrom(const Request_GetWhiteListSizeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_GetWhiteListSizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.GetWhiteListSizeRequest";
  }
  protected:
  explicit Request_GetWhiteListSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutFieldNumber = 9,
  };
  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.GetWhiteListSizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_GetWhiteListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.GetWhiteListRequest) */ {
 public:
  inline Request_GetWhiteListRequest() : Request_GetWhiteListRequest(nullptr) {};
  virtual ~Request_GetWhiteListRequest();

  Request_GetWhiteListRequest(const Request_GetWhiteListRequest& from);
  Request_GetWhiteListRequest(Request_GetWhiteListRequest&& from) noexcept
    : Request_GetWhiteListRequest() {
    *this = ::std::move(from);
  }

  inline Request_GetWhiteListRequest& operator=(const Request_GetWhiteListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetWhiteListRequest& operator=(Request_GetWhiteListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_GetWhiteListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_GetWhiteListRequest* internal_default_instance() {
    return reinterpret_cast<const Request_GetWhiteListRequest*>(
               &_Request_GetWhiteListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Request_GetWhiteListRequest& a, Request_GetWhiteListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetWhiteListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetWhiteListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetWhiteListRequest* New() const final {
    return CreateMaybeMessage<Request_GetWhiteListRequest>(nullptr);
  }

  Request_GetWhiteListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetWhiteListRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_GetWhiteListRequest& from);
  void MergeFrom(const Request_GetWhiteListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_GetWhiteListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.GetWhiteListRequest";
  }
  protected:
  explicit Request_GetWhiteListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhiteListSizeFieldNumber = 1,
    kTimeoutFieldNumber = 9,
  };
  // optional uint32 white_list_size = 1;
  bool has_white_list_size() const;
  private:
  bool _internal_has_white_list_size() const;
  public:
  void clear_white_list_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 white_list_size() const;
  void set_white_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_white_list_size() const;
  void _internal_set_white_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.GetWhiteListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 white_list_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_SGXGetExtendedEpidGroupIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest) */ {
 public:
  inline Request_SGXGetExtendedEpidGroupIdRequest() : Request_SGXGetExtendedEpidGroupIdRequest(nullptr) {};
  virtual ~Request_SGXGetExtendedEpidGroupIdRequest();

  Request_SGXGetExtendedEpidGroupIdRequest(const Request_SGXGetExtendedEpidGroupIdRequest& from);
  Request_SGXGetExtendedEpidGroupIdRequest(Request_SGXGetExtendedEpidGroupIdRequest&& from) noexcept
    : Request_SGXGetExtendedEpidGroupIdRequest() {
    *this = ::std::move(from);
  }

  inline Request_SGXGetExtendedEpidGroupIdRequest& operator=(const Request_SGXGetExtendedEpidGroupIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_SGXGetExtendedEpidGroupIdRequest& operator=(Request_SGXGetExtendedEpidGroupIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_SGXGetExtendedEpidGroupIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_SGXGetExtendedEpidGroupIdRequest* internal_default_instance() {
    return reinterpret_cast<const Request_SGXGetExtendedEpidGroupIdRequest*>(
               &_Request_SGXGetExtendedEpidGroupIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Request_SGXGetExtendedEpidGroupIdRequest& a, Request_SGXGetExtendedEpidGroupIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_SGXGetExtendedEpidGroupIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_SGXGetExtendedEpidGroupIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_SGXGetExtendedEpidGroupIdRequest* New() const final {
    return CreateMaybeMessage<Request_SGXGetExtendedEpidGroupIdRequest>(nullptr);
  }

  Request_SGXGetExtendedEpidGroupIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_SGXGetExtendedEpidGroupIdRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_SGXGetExtendedEpidGroupIdRequest& from);
  void MergeFrom(const Request_SGXGetExtendedEpidGroupIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_SGXGetExtendedEpidGroupIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.SGXGetExtendedEpidGroupIdRequest";
  }
  protected:
  explicit Request_SGXGetExtendedEpidGroupIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutFieldNumber = 9,
  };
  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_SGXSwitchExtendedEpidGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest) */ {
 public:
  inline Request_SGXSwitchExtendedEpidGroupRequest() : Request_SGXSwitchExtendedEpidGroupRequest(nullptr) {};
  virtual ~Request_SGXSwitchExtendedEpidGroupRequest();

  Request_SGXSwitchExtendedEpidGroupRequest(const Request_SGXSwitchExtendedEpidGroupRequest& from);
  Request_SGXSwitchExtendedEpidGroupRequest(Request_SGXSwitchExtendedEpidGroupRequest&& from) noexcept
    : Request_SGXSwitchExtendedEpidGroupRequest() {
    *this = ::std::move(from);
  }

  inline Request_SGXSwitchExtendedEpidGroupRequest& operator=(const Request_SGXSwitchExtendedEpidGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_SGXSwitchExtendedEpidGroupRequest& operator=(Request_SGXSwitchExtendedEpidGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_SGXSwitchExtendedEpidGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_SGXSwitchExtendedEpidGroupRequest* internal_default_instance() {
    return reinterpret_cast<const Request_SGXSwitchExtendedEpidGroupRequest*>(
               &_Request_SGXSwitchExtendedEpidGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Request_SGXSwitchExtendedEpidGroupRequest& a, Request_SGXSwitchExtendedEpidGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_SGXSwitchExtendedEpidGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_SGXSwitchExtendedEpidGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_SGXSwitchExtendedEpidGroupRequest* New() const final {
    return CreateMaybeMessage<Request_SGXSwitchExtendedEpidGroupRequest>(nullptr);
  }

  Request_SGXSwitchExtendedEpidGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_SGXSwitchExtendedEpidGroupRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_SGXSwitchExtendedEpidGroupRequest& from);
  void MergeFrom(const Request_SGXSwitchExtendedEpidGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_SGXSwitchExtendedEpidGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.SGXSwitchExtendedEpidGroupRequest";
  }
  protected:
  explicit Request_SGXSwitchExtendedEpidGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXGroupIdFieldNumber = 1,
    kTimeoutFieldNumber = 9,
  };
  // optional uint32 x_group_id = 1;
  bool has_x_group_id() const;
  private:
  bool _internal_has_x_group_id() const;
  public:
  void clear_x_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 x_group_id() const;
  void set_x_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x_group_id() const;
  void _internal_set_x_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_SGXRegisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.SGXRegisterRequest) */ {
 public:
  inline Request_SGXRegisterRequest() : Request_SGXRegisterRequest(nullptr) {};
  virtual ~Request_SGXRegisterRequest();

  Request_SGXRegisterRequest(const Request_SGXRegisterRequest& from);
  Request_SGXRegisterRequest(Request_SGXRegisterRequest&& from) noexcept
    : Request_SGXRegisterRequest() {
    *this = ::std::move(from);
  }

  inline Request_SGXRegisterRequest& operator=(const Request_SGXRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_SGXRegisterRequest& operator=(Request_SGXRegisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_SGXRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_SGXRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const Request_SGXRegisterRequest*>(
               &_Request_SGXRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Request_SGXRegisterRequest& a, Request_SGXRegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_SGXRegisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_SGXRegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_SGXRegisterRequest* New() const final {
    return CreateMaybeMessage<Request_SGXRegisterRequest>(nullptr);
  }

  Request_SGXRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_SGXRegisterRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_SGXRegisterRequest& from);
  void MergeFrom(const Request_SGXRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_SGXRegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.SGXRegisterRequest";
  }
  protected:
  explicit Request_SGXRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 1,
    kDataTypeFieldNumber = 2,
    kTimeoutFieldNumber = 9,
  };
  // required bytes buf = 1;
  bool has_buf() const;
  private:
  bool _internal_has_buf() const;
  public:
  void clear_buf();
  const std::string& buf() const;
  void set_buf(const std::string& value);
  void set_buf(std::string&& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  std::string* mutable_buf();
  std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_buf();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_buf(
      std::string* buf);
  private:
  const std::string& _internal_buf() const;
  void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // required uint32 data_type = 2;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.SGXRegisterRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_InitQuoteExRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.InitQuoteExRequest) */ {
 public:
  inline Request_InitQuoteExRequest() : Request_InitQuoteExRequest(nullptr) {};
  virtual ~Request_InitQuoteExRequest();

  Request_InitQuoteExRequest(const Request_InitQuoteExRequest& from);
  Request_InitQuoteExRequest(Request_InitQuoteExRequest&& from) noexcept
    : Request_InitQuoteExRequest() {
    *this = ::std::move(from);
  }

  inline Request_InitQuoteExRequest& operator=(const Request_InitQuoteExRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_InitQuoteExRequest& operator=(Request_InitQuoteExRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_InitQuoteExRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_InitQuoteExRequest* internal_default_instance() {
    return reinterpret_cast<const Request_InitQuoteExRequest*>(
               &_Request_InitQuoteExRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Request_InitQuoteExRequest& a, Request_InitQuoteExRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_InitQuoteExRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_InitQuoteExRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_InitQuoteExRequest* New() const final {
    return CreateMaybeMessage<Request_InitQuoteExRequest>(nullptr);
  }

  Request_InitQuoteExRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_InitQuoteExRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_InitQuoteExRequest& from);
  void MergeFrom(const Request_InitQuoteExRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_InitQuoteExRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.InitQuoteExRequest";
  }
  protected:
  explicit Request_InitQuoteExRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttKeyIdFieldNumber = 1,
    kBufSizeFieldNumber = 4,
    kBPubKeyIdFieldNumber = 3,
    kTimeoutFieldNumber = 9,
  };
  // optional bytes att_key_id = 1;
  bool has_att_key_id() const;
  private:
  bool _internal_has_att_key_id() const;
  public:
  void clear_att_key_id();
  const std::string& att_key_id() const;
  void set_att_key_id(const std::string& value);
  void set_att_key_id(std::string&& value);
  void set_att_key_id(const char* value);
  void set_att_key_id(const void* value, size_t size);
  std::string* mutable_att_key_id();
  std::string* release_att_key_id();
  void set_allocated_att_key_id(std::string* att_key_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_att_key_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_att_key_id(
      std::string* att_key_id);
  private:
  const std::string& _internal_att_key_id() const;
  void _internal_set_att_key_id(const std::string& value);
  std::string* _internal_mutable_att_key_id();
  public:

  // optional uint64 buf_size = 4;
  bool has_buf_size() const;
  private:
  bool _internal_has_buf_size() const;
  public:
  void clear_buf_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 buf_size() const;
  void set_buf_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_buf_size() const;
  void _internal_set_buf_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool b_pub_key_id = 3;
  bool has_b_pub_key_id() const;
  private:
  bool _internal_has_b_pub_key_id() const;
  public:
  void clear_b_pub_key_id();
  bool b_pub_key_id() const;
  void set_b_pub_key_id(bool value);
  private:
  bool _internal_b_pub_key_id() const;
  void _internal_set_b_pub_key_id(bool value);
  public:

  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.InitQuoteExRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr att_key_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buf_size_;
  bool b_pub_key_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_SelectAttKeyIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.SelectAttKeyIDRequest) */ {
 public:
  inline Request_SelectAttKeyIDRequest() : Request_SelectAttKeyIDRequest(nullptr) {};
  virtual ~Request_SelectAttKeyIDRequest();

  Request_SelectAttKeyIDRequest(const Request_SelectAttKeyIDRequest& from);
  Request_SelectAttKeyIDRequest(Request_SelectAttKeyIDRequest&& from) noexcept
    : Request_SelectAttKeyIDRequest() {
    *this = ::std::move(from);
  }

  inline Request_SelectAttKeyIDRequest& operator=(const Request_SelectAttKeyIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_SelectAttKeyIDRequest& operator=(Request_SelectAttKeyIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_SelectAttKeyIDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_SelectAttKeyIDRequest* internal_default_instance() {
    return reinterpret_cast<const Request_SelectAttKeyIDRequest*>(
               &_Request_SelectAttKeyIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Request_SelectAttKeyIDRequest& a, Request_SelectAttKeyIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_SelectAttKeyIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_SelectAttKeyIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_SelectAttKeyIDRequest* New() const final {
    return CreateMaybeMessage<Request_SelectAttKeyIDRequest>(nullptr);
  }

  Request_SelectAttKeyIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_SelectAttKeyIDRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_SelectAttKeyIDRequest& from);
  void MergeFrom(const Request_SelectAttKeyIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_SelectAttKeyIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.SelectAttKeyIDRequest";
  }
  protected:
  explicit Request_SelectAttKeyIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttKeyIdListFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // optional bytes att_key_id_list = 1;
  bool has_att_key_id_list() const;
  private:
  bool _internal_has_att_key_id_list() const;
  public:
  void clear_att_key_id_list();
  const std::string& att_key_id_list() const;
  void set_att_key_id_list(const std::string& value);
  void set_att_key_id_list(std::string&& value);
  void set_att_key_id_list(const char* value);
  void set_att_key_id_list(const void* value, size_t size);
  std::string* mutable_att_key_id_list();
  std::string* release_att_key_id_list();
  void set_allocated_att_key_id_list(std::string* att_key_id_list);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_att_key_id_list();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_att_key_id_list(
      std::string* att_key_id_list);
  private:
  const std::string& _internal_att_key_id_list() const;
  void _internal_set_att_key_id_list(const std::string& value);
  std::string* _internal_mutable_att_key_id_list();
  public:

  // optional uint32 timeout = 2;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.SelectAttKeyIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr att_key_id_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_GetQuoteSizeExRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.GetQuoteSizeExRequest) */ {
 public:
  inline Request_GetQuoteSizeExRequest() : Request_GetQuoteSizeExRequest(nullptr) {};
  virtual ~Request_GetQuoteSizeExRequest();

  Request_GetQuoteSizeExRequest(const Request_GetQuoteSizeExRequest& from);
  Request_GetQuoteSizeExRequest(Request_GetQuoteSizeExRequest&& from) noexcept
    : Request_GetQuoteSizeExRequest() {
    *this = ::std::move(from);
  }

  inline Request_GetQuoteSizeExRequest& operator=(const Request_GetQuoteSizeExRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetQuoteSizeExRequest& operator=(Request_GetQuoteSizeExRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_GetQuoteSizeExRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_GetQuoteSizeExRequest* internal_default_instance() {
    return reinterpret_cast<const Request_GetQuoteSizeExRequest*>(
               &_Request_GetQuoteSizeExRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Request_GetQuoteSizeExRequest& a, Request_GetQuoteSizeExRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetQuoteSizeExRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetQuoteSizeExRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetQuoteSizeExRequest* New() const final {
    return CreateMaybeMessage<Request_GetQuoteSizeExRequest>(nullptr);
  }

  Request_GetQuoteSizeExRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetQuoteSizeExRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_GetQuoteSizeExRequest& from);
  void MergeFrom(const Request_GetQuoteSizeExRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_GetQuoteSizeExRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.GetQuoteSizeExRequest";
  }
  protected:
  explicit Request_GetQuoteSizeExRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttKeyIdFieldNumber = 1,
    kTimeoutFieldNumber = 9,
  };
  // optional bytes att_key_id = 1;
  bool has_att_key_id() const;
  private:
  bool _internal_has_att_key_id() const;
  public:
  void clear_att_key_id();
  const std::string& att_key_id() const;
  void set_att_key_id(const std::string& value);
  void set_att_key_id(std::string&& value);
  void set_att_key_id(const char* value);
  void set_att_key_id(const void* value, size_t size);
  std::string* mutable_att_key_id();
  std::string* release_att_key_id();
  void set_allocated_att_key_id(std::string* att_key_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_att_key_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_att_key_id(
      std::string* att_key_id);
  private:
  const std::string& _internal_att_key_id() const;
  void _internal_set_att_key_id(const std::string& value);
  std::string* _internal_mutable_att_key_id();
  public:

  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.GetQuoteSizeExRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr att_key_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_GetQuoteExRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.GetQuoteExRequest) */ {
 public:
  inline Request_GetQuoteExRequest() : Request_GetQuoteExRequest(nullptr) {};
  virtual ~Request_GetQuoteExRequest();

  Request_GetQuoteExRequest(const Request_GetQuoteExRequest& from);
  Request_GetQuoteExRequest(Request_GetQuoteExRequest&& from) noexcept
    : Request_GetQuoteExRequest() {
    *this = ::std::move(from);
  }

  inline Request_GetQuoteExRequest& operator=(const Request_GetQuoteExRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetQuoteExRequest& operator=(Request_GetQuoteExRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_GetQuoteExRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_GetQuoteExRequest* internal_default_instance() {
    return reinterpret_cast<const Request_GetQuoteExRequest*>(
               &_Request_GetQuoteExRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Request_GetQuoteExRequest& a, Request_GetQuoteExRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetQuoteExRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetQuoteExRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetQuoteExRequest* New() const final {
    return CreateMaybeMessage<Request_GetQuoteExRequest>(nullptr);
  }

  Request_GetQuoteExRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetQuoteExRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_GetQuoteExRequest& from);
  void MergeFrom(const Request_GetQuoteExRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_GetQuoteExRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.GetQuoteExRequest";
  }
  protected:
  explicit Request_GetQuoteExRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportFieldNumber = 1,
    kAttKeyIdFieldNumber = 2,
    kQeReportInfoFieldNumber = 3,
    kBufSizeFieldNumber = 4,
    kTimeoutFieldNumber = 9,
  };
  // required bytes report = 1;
  bool has_report() const;
  private:
  bool _internal_has_report() const;
  public:
  void clear_report();
  const std::string& report() const;
  void set_report(const std::string& value);
  void set_report(std::string&& value);
  void set_report(const char* value);
  void set_report(const void* value, size_t size);
  std::string* mutable_report();
  std::string* release_report();
  void set_allocated_report(std::string* report);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_report();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_report(
      std::string* report);
  private:
  const std::string& _internal_report() const;
  void _internal_set_report(const std::string& value);
  std::string* _internal_mutable_report();
  public:

  // optional bytes att_key_id = 2;
  bool has_att_key_id() const;
  private:
  bool _internal_has_att_key_id() const;
  public:
  void clear_att_key_id();
  const std::string& att_key_id() const;
  void set_att_key_id(const std::string& value);
  void set_att_key_id(std::string&& value);
  void set_att_key_id(const char* value);
  void set_att_key_id(const void* value, size_t size);
  std::string* mutable_att_key_id();
  std::string* release_att_key_id();
  void set_allocated_att_key_id(std::string* att_key_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_att_key_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_att_key_id(
      std::string* att_key_id);
  private:
  const std::string& _internal_att_key_id() const;
  void _internal_set_att_key_id(const std::string& value);
  std::string* _internal_mutable_att_key_id();
  public:

  // optional bytes qe_report_info = 3;
  bool has_qe_report_info() const;
  private:
  bool _internal_has_qe_report_info() const;
  public:
  void clear_qe_report_info();
  const std::string& qe_report_info() const;
  void set_qe_report_info(const std::string& value);
  void set_qe_report_info(std::string&& value);
  void set_qe_report_info(const char* value);
  void set_qe_report_info(const void* value, size_t size);
  std::string* mutable_qe_report_info();
  std::string* release_qe_report_info();
  void set_allocated_qe_report_info(std::string* qe_report_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_qe_report_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_qe_report_info(
      std::string* qe_report_info);
  private:
  const std::string& _internal_qe_report_info() const;
  void _internal_set_qe_report_info(const std::string& value);
  std::string* _internal_mutable_qe_report_info();
  public:

  // required uint32 buf_size = 4;
  bool has_buf_size() const;
  private:
  bool _internal_has_buf_size() const;
  public:
  void clear_buf_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 buf_size() const;
  void set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buf_size() const;
  void _internal_set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.GetQuoteExRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr att_key_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qe_report_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buf_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_GetSupportedAttKeyIDNumRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.GetSupportedAttKeyIDNumRequest) */ {
 public:
  inline Request_GetSupportedAttKeyIDNumRequest() : Request_GetSupportedAttKeyIDNumRequest(nullptr) {};
  virtual ~Request_GetSupportedAttKeyIDNumRequest();

  Request_GetSupportedAttKeyIDNumRequest(const Request_GetSupportedAttKeyIDNumRequest& from);
  Request_GetSupportedAttKeyIDNumRequest(Request_GetSupportedAttKeyIDNumRequest&& from) noexcept
    : Request_GetSupportedAttKeyIDNumRequest() {
    *this = ::std::move(from);
  }

  inline Request_GetSupportedAttKeyIDNumRequest& operator=(const Request_GetSupportedAttKeyIDNumRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetSupportedAttKeyIDNumRequest& operator=(Request_GetSupportedAttKeyIDNumRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_GetSupportedAttKeyIDNumRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_GetSupportedAttKeyIDNumRequest* internal_default_instance() {
    return reinterpret_cast<const Request_GetSupportedAttKeyIDNumRequest*>(
               &_Request_GetSupportedAttKeyIDNumRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Request_GetSupportedAttKeyIDNumRequest& a, Request_GetSupportedAttKeyIDNumRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetSupportedAttKeyIDNumRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetSupportedAttKeyIDNumRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetSupportedAttKeyIDNumRequest* New() const final {
    return CreateMaybeMessage<Request_GetSupportedAttKeyIDNumRequest>(nullptr);
  }

  Request_GetSupportedAttKeyIDNumRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetSupportedAttKeyIDNumRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_GetSupportedAttKeyIDNumRequest& from);
  void MergeFrom(const Request_GetSupportedAttKeyIDNumRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_GetSupportedAttKeyIDNumRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.GetSupportedAttKeyIDNumRequest";
  }
  protected:
  explicit Request_GetSupportedAttKeyIDNumRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutFieldNumber = 9,
  };
  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request_GetSupportedAttKeyIDsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request.GetSupportedAttKeyIDsRequest) */ {
 public:
  inline Request_GetSupportedAttKeyIDsRequest() : Request_GetSupportedAttKeyIDsRequest(nullptr) {};
  virtual ~Request_GetSupportedAttKeyIDsRequest();

  Request_GetSupportedAttKeyIDsRequest(const Request_GetSupportedAttKeyIDsRequest& from);
  Request_GetSupportedAttKeyIDsRequest(Request_GetSupportedAttKeyIDsRequest&& from) noexcept
    : Request_GetSupportedAttKeyIDsRequest() {
    *this = ::std::move(from);
  }

  inline Request_GetSupportedAttKeyIDsRequest& operator=(const Request_GetSupportedAttKeyIDsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetSupportedAttKeyIDsRequest& operator=(Request_GetSupportedAttKeyIDsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request_GetSupportedAttKeyIDsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_GetSupportedAttKeyIDsRequest* internal_default_instance() {
    return reinterpret_cast<const Request_GetSupportedAttKeyIDsRequest*>(
               &_Request_GetSupportedAttKeyIDsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Request_GetSupportedAttKeyIDsRequest& a, Request_GetSupportedAttKeyIDsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetSupportedAttKeyIDsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetSupportedAttKeyIDsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetSupportedAttKeyIDsRequest* New() const final {
    return CreateMaybeMessage<Request_GetSupportedAttKeyIDsRequest>(nullptr);
  }

  Request_GetSupportedAttKeyIDsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetSupportedAttKeyIDsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request_GetSupportedAttKeyIDsRequest& from);
  void MergeFrom(const Request_GetSupportedAttKeyIDsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_GetSupportedAttKeyIDsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request.GetSupportedAttKeyIDsRequest";
  }
  protected:
  explicit Request_GetSupportedAttKeyIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufSizeFieldNumber = 1,
    kTimeoutFieldNumber = 9,
  };
  // required uint32 buf_size = 1;
  bool has_buf_size() const;
  private:
  bool _internal_has_buf_size() const;
  public:
  void clear_buf_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 buf_size() const;
  void set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buf_size() const;
  void _internal_set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timeout = 9;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Request.GetSupportedAttKeyIDsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buf_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Request_InitQuoteRequest InitQuoteRequest;
  typedef Request_GetQuoteRequest GetQuoteRequest;
  typedef Request_GetLaunchTokenRequest GetLaunchTokenRequest;
  typedef Request_ReportAttestationErrorRequest ReportAttestationErrorRequest;
  typedef Request_CheckUpdateStatusRequest CheckUpdateStatusRequest;
  typedef Request_GetWhiteListSizeRequest GetWhiteListSizeRequest;
  typedef Request_GetWhiteListRequest GetWhiteListRequest;
  typedef Request_SGXGetExtendedEpidGroupIdRequest SGXGetExtendedEpidGroupIdRequest;
  typedef Request_SGXSwitchExtendedEpidGroupRequest SGXSwitchExtendedEpidGroupRequest;
  typedef Request_SGXRegisterRequest SGXRegisterRequest;
  typedef Request_InitQuoteExRequest InitQuoteExRequest;
  typedef Request_SelectAttKeyIDRequest SelectAttKeyIDRequest;
  typedef Request_GetQuoteSizeExRequest GetQuoteSizeExRequest;
  typedef Request_GetQuoteExRequest GetQuoteExRequest;
  typedef Request_GetSupportedAttKeyIDNumRequest GetSupportedAttKeyIDNumRequest;
  typedef Request_GetSupportedAttKeyIDsRequest GetSupportedAttKeyIDsRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kInitQuoteReqFieldNumber = 1,
    kGetQuoteReqFieldNumber = 2,
    kGetLicTokenReqFieldNumber = 3,
    kReportErrReqFieldNumber = 4,
    kGetWhiteListSizeReqFieldNumber = 10,
    kGetWhiteListReqFieldNumber = 11,
    kSgxGetExtendedEpidGroupIdReqFieldNumber = 12,
    kSgxSwitchExtendedEpidGroupReqFieldNumber = 13,
    kSgxRegisterReqFieldNumber = 14,
    kInitQuoteExReqFieldNumber = 15,
    kGetQuoteSizeExReqFieldNumber = 16,
    kGetQuoteExReqFieldNumber = 17,
    kCheckUpdateStatusReqFieldNumber = 18,
    kSelectAttKeyIDReqFieldNumber = 19,
    kGetSupportedAttKeyIDNumReqFieldNumber = 21,
    kGetSupportedAttKeyIDsReqFieldNumber = 22,
  };
  // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
  bool has_initquotereq() const;
  private:
  bool _internal_has_initquotereq() const;
  public:
  void clear_initquotereq();
  const ::aesm::message::Request_InitQuoteRequest& initquotereq() const;
  ::aesm::message::Request_InitQuoteRequest* release_initquotereq();
  ::aesm::message::Request_InitQuoteRequest* mutable_initquotereq();
  void set_allocated_initquotereq(::aesm::message::Request_InitQuoteRequest* initquotereq);
  private:
  const ::aesm::message::Request_InitQuoteRequest& _internal_initquotereq() const;
  ::aesm::message::Request_InitQuoteRequest* _internal_mutable_initquotereq();
  public:
  void unsafe_arena_set_allocated_initquotereq(
      ::aesm::message::Request_InitQuoteRequest* initquotereq);
  ::aesm::message::Request_InitQuoteRequest* unsafe_arena_release_initquotereq();

  // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
  bool has_getquotereq() const;
  private:
  bool _internal_has_getquotereq() const;
  public:
  void clear_getquotereq();
  const ::aesm::message::Request_GetQuoteRequest& getquotereq() const;
  ::aesm::message::Request_GetQuoteRequest* release_getquotereq();
  ::aesm::message::Request_GetQuoteRequest* mutable_getquotereq();
  void set_allocated_getquotereq(::aesm::message::Request_GetQuoteRequest* getquotereq);
  private:
  const ::aesm::message::Request_GetQuoteRequest& _internal_getquotereq() const;
  ::aesm::message::Request_GetQuoteRequest* _internal_mutable_getquotereq();
  public:
  void unsafe_arena_set_allocated_getquotereq(
      ::aesm::message::Request_GetQuoteRequest* getquotereq);
  ::aesm::message::Request_GetQuoteRequest* unsafe_arena_release_getquotereq();

  // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
  bool has_getlictokenreq() const;
  private:
  bool _internal_has_getlictokenreq() const;
  public:
  void clear_getlictokenreq();
  const ::aesm::message::Request_GetLaunchTokenRequest& getlictokenreq() const;
  ::aesm::message::Request_GetLaunchTokenRequest* release_getlictokenreq();
  ::aesm::message::Request_GetLaunchTokenRequest* mutable_getlictokenreq();
  void set_allocated_getlictokenreq(::aesm::message::Request_GetLaunchTokenRequest* getlictokenreq);
  private:
  const ::aesm::message::Request_GetLaunchTokenRequest& _internal_getlictokenreq() const;
  ::aesm::message::Request_GetLaunchTokenRequest* _internal_mutable_getlictokenreq();
  public:
  void unsafe_arena_set_allocated_getlictokenreq(
      ::aesm::message::Request_GetLaunchTokenRequest* getlictokenreq);
  ::aesm::message::Request_GetLaunchTokenRequest* unsafe_arena_release_getlictokenreq();

  // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
  bool has_reporterrreq() const;
  private:
  bool _internal_has_reporterrreq() const;
  public:
  void clear_reporterrreq();
  const ::aesm::message::Request_ReportAttestationErrorRequest& reporterrreq() const;
  ::aesm::message::Request_ReportAttestationErrorRequest* release_reporterrreq();
  ::aesm::message::Request_ReportAttestationErrorRequest* mutable_reporterrreq();
  void set_allocated_reporterrreq(::aesm::message::Request_ReportAttestationErrorRequest* reporterrreq);
  private:
  const ::aesm::message::Request_ReportAttestationErrorRequest& _internal_reporterrreq() const;
  ::aesm::message::Request_ReportAttestationErrorRequest* _internal_mutable_reporterrreq();
  public:
  void unsafe_arena_set_allocated_reporterrreq(
      ::aesm::message::Request_ReportAttestationErrorRequest* reporterrreq);
  ::aesm::message::Request_ReportAttestationErrorRequest* unsafe_arena_release_reporterrreq();

  // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
  bool has_getwhitelistsizereq() const;
  private:
  bool _internal_has_getwhitelistsizereq() const;
  public:
  void clear_getwhitelistsizereq();
  const ::aesm::message::Request_GetWhiteListSizeRequest& getwhitelistsizereq() const;
  ::aesm::message::Request_GetWhiteListSizeRequest* release_getwhitelistsizereq();
  ::aesm::message::Request_GetWhiteListSizeRequest* mutable_getwhitelistsizereq();
  void set_allocated_getwhitelistsizereq(::aesm::message::Request_GetWhiteListSizeRequest* getwhitelistsizereq);
  private:
  const ::aesm::message::Request_GetWhiteListSizeRequest& _internal_getwhitelistsizereq() const;
  ::aesm::message::Request_GetWhiteListSizeRequest* _internal_mutable_getwhitelistsizereq();
  public:
  void unsafe_arena_set_allocated_getwhitelistsizereq(
      ::aesm::message::Request_GetWhiteListSizeRequest* getwhitelistsizereq);
  ::aesm::message::Request_GetWhiteListSizeRequest* unsafe_arena_release_getwhitelistsizereq();

  // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
  bool has_getwhitelistreq() const;
  private:
  bool _internal_has_getwhitelistreq() const;
  public:
  void clear_getwhitelistreq();
  const ::aesm::message::Request_GetWhiteListRequest& getwhitelistreq() const;
  ::aesm::message::Request_GetWhiteListRequest* release_getwhitelistreq();
  ::aesm::message::Request_GetWhiteListRequest* mutable_getwhitelistreq();
  void set_allocated_getwhitelistreq(::aesm::message::Request_GetWhiteListRequest* getwhitelistreq);
  private:
  const ::aesm::message::Request_GetWhiteListRequest& _internal_getwhitelistreq() const;
  ::aesm::message::Request_GetWhiteListRequest* _internal_mutable_getwhitelistreq();
  public:
  void unsafe_arena_set_allocated_getwhitelistreq(
      ::aesm::message::Request_GetWhiteListRequest* getwhitelistreq);
  ::aesm::message::Request_GetWhiteListRequest* unsafe_arena_release_getwhitelistreq();

  // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
  bool has_sgxgetextendedepidgroupidreq() const;
  private:
  bool _internal_has_sgxgetextendedepidgroupidreq() const;
  public:
  void clear_sgxgetextendedepidgroupidreq();
  const ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest& sgxgetextendedepidgroupidreq() const;
  ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* release_sgxgetextendedepidgroupidreq();
  ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* mutable_sgxgetextendedepidgroupidreq();
  void set_allocated_sgxgetextendedepidgroupidreq(::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* sgxgetextendedepidgroupidreq);
  private:
  const ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest& _internal_sgxgetextendedepidgroupidreq() const;
  ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* _internal_mutable_sgxgetextendedepidgroupidreq();
  public:
  void unsafe_arena_set_allocated_sgxgetextendedepidgroupidreq(
      ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* sgxgetextendedepidgroupidreq);
  ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* unsafe_arena_release_sgxgetextendedepidgroupidreq();

  // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
  bool has_sgxswitchextendedepidgroupreq() const;
  private:
  bool _internal_has_sgxswitchextendedepidgroupreq() const;
  public:
  void clear_sgxswitchextendedepidgroupreq();
  const ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest& sgxswitchextendedepidgroupreq() const;
  ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* release_sgxswitchextendedepidgroupreq();
  ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* mutable_sgxswitchextendedepidgroupreq();
  void set_allocated_sgxswitchextendedepidgroupreq(::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* sgxswitchextendedepidgroupreq);
  private:
  const ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest& _internal_sgxswitchextendedepidgroupreq() const;
  ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* _internal_mutable_sgxswitchextendedepidgroupreq();
  public:
  void unsafe_arena_set_allocated_sgxswitchextendedepidgroupreq(
      ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* sgxswitchextendedepidgroupreq);
  ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* unsafe_arena_release_sgxswitchextendedepidgroupreq();

  // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
  bool has_sgxregisterreq() const;
  private:
  bool _internal_has_sgxregisterreq() const;
  public:
  void clear_sgxregisterreq();
  const ::aesm::message::Request_SGXRegisterRequest& sgxregisterreq() const;
  ::aesm::message::Request_SGXRegisterRequest* release_sgxregisterreq();
  ::aesm::message::Request_SGXRegisterRequest* mutable_sgxregisterreq();
  void set_allocated_sgxregisterreq(::aesm::message::Request_SGXRegisterRequest* sgxregisterreq);
  private:
  const ::aesm::message::Request_SGXRegisterRequest& _internal_sgxregisterreq() const;
  ::aesm::message::Request_SGXRegisterRequest* _internal_mutable_sgxregisterreq();
  public:
  void unsafe_arena_set_allocated_sgxregisterreq(
      ::aesm::message::Request_SGXRegisterRequest* sgxregisterreq);
  ::aesm::message::Request_SGXRegisterRequest* unsafe_arena_release_sgxregisterreq();

  // optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
  bool has_initquoteexreq() const;
  private:
  bool _internal_has_initquoteexreq() const;
  public:
  void clear_initquoteexreq();
  const ::aesm::message::Request_InitQuoteExRequest& initquoteexreq() const;
  ::aesm::message::Request_InitQuoteExRequest* release_initquoteexreq();
  ::aesm::message::Request_InitQuoteExRequest* mutable_initquoteexreq();
  void set_allocated_initquoteexreq(::aesm::message::Request_InitQuoteExRequest* initquoteexreq);
  private:
  const ::aesm::message::Request_InitQuoteExRequest& _internal_initquoteexreq() const;
  ::aesm::message::Request_InitQuoteExRequest* _internal_mutable_initquoteexreq();
  public:
  void unsafe_arena_set_allocated_initquoteexreq(
      ::aesm::message::Request_InitQuoteExRequest* initquoteexreq);
  ::aesm::message::Request_InitQuoteExRequest* unsafe_arena_release_initquoteexreq();

  // optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
  bool has_getquotesizeexreq() const;
  private:
  bool _internal_has_getquotesizeexreq() const;
  public:
  void clear_getquotesizeexreq();
  const ::aesm::message::Request_GetQuoteSizeExRequest& getquotesizeexreq() const;
  ::aesm::message::Request_GetQuoteSizeExRequest* release_getquotesizeexreq();
  ::aesm::message::Request_GetQuoteSizeExRequest* mutable_getquotesizeexreq();
  void set_allocated_getquotesizeexreq(::aesm::message::Request_GetQuoteSizeExRequest* getquotesizeexreq);
  private:
  const ::aesm::message::Request_GetQuoteSizeExRequest& _internal_getquotesizeexreq() const;
  ::aesm::message::Request_GetQuoteSizeExRequest* _internal_mutable_getquotesizeexreq();
  public:
  void unsafe_arena_set_allocated_getquotesizeexreq(
      ::aesm::message::Request_GetQuoteSizeExRequest* getquotesizeexreq);
  ::aesm::message::Request_GetQuoteSizeExRequest* unsafe_arena_release_getquotesizeexreq();

  // optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
  bool has_getquoteexreq() const;
  private:
  bool _internal_has_getquoteexreq() const;
  public:
  void clear_getquoteexreq();
  const ::aesm::message::Request_GetQuoteExRequest& getquoteexreq() const;
  ::aesm::message::Request_GetQuoteExRequest* release_getquoteexreq();
  ::aesm::message::Request_GetQuoteExRequest* mutable_getquoteexreq();
  void set_allocated_getquoteexreq(::aesm::message::Request_GetQuoteExRequest* getquoteexreq);
  private:
  const ::aesm::message::Request_GetQuoteExRequest& _internal_getquoteexreq() const;
  ::aesm::message::Request_GetQuoteExRequest* _internal_mutable_getquoteexreq();
  public:
  void unsafe_arena_set_allocated_getquoteexreq(
      ::aesm::message::Request_GetQuoteExRequest* getquoteexreq);
  ::aesm::message::Request_GetQuoteExRequest* unsafe_arena_release_getquoteexreq();

  // optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
  bool has_checkupdatestatusreq() const;
  private:
  bool _internal_has_checkupdatestatusreq() const;
  public:
  void clear_checkupdatestatusreq();
  const ::aesm::message::Request_CheckUpdateStatusRequest& checkupdatestatusreq() const;
  ::aesm::message::Request_CheckUpdateStatusRequest* release_checkupdatestatusreq();
  ::aesm::message::Request_CheckUpdateStatusRequest* mutable_checkupdatestatusreq();
  void set_allocated_checkupdatestatusreq(::aesm::message::Request_CheckUpdateStatusRequest* checkupdatestatusreq);
  private:
  const ::aesm::message::Request_CheckUpdateStatusRequest& _internal_checkupdatestatusreq() const;
  ::aesm::message::Request_CheckUpdateStatusRequest* _internal_mutable_checkupdatestatusreq();
  public:
  void unsafe_arena_set_allocated_checkupdatestatusreq(
      ::aesm::message::Request_CheckUpdateStatusRequest* checkupdatestatusreq);
  ::aesm::message::Request_CheckUpdateStatusRequest* unsafe_arena_release_checkupdatestatusreq();

  // optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
  bool has_selectattkeyidreq() const;
  private:
  bool _internal_has_selectattkeyidreq() const;
  public:
  void clear_selectattkeyidreq();
  const ::aesm::message::Request_SelectAttKeyIDRequest& selectattkeyidreq() const;
  ::aesm::message::Request_SelectAttKeyIDRequest* release_selectattkeyidreq();
  ::aesm::message::Request_SelectAttKeyIDRequest* mutable_selectattkeyidreq();
  void set_allocated_selectattkeyidreq(::aesm::message::Request_SelectAttKeyIDRequest* selectattkeyidreq);
  private:
  const ::aesm::message::Request_SelectAttKeyIDRequest& _internal_selectattkeyidreq() const;
  ::aesm::message::Request_SelectAttKeyIDRequest* _internal_mutable_selectattkeyidreq();
  public:
  void unsafe_arena_set_allocated_selectattkeyidreq(
      ::aesm::message::Request_SelectAttKeyIDRequest* selectattkeyidreq);
  ::aesm::message::Request_SelectAttKeyIDRequest* unsafe_arena_release_selectattkeyidreq();

  // optional .aesm.message.Request.GetSupportedAttKeyIDNumRequest getSupportedAttKeyIDNumReq = 21;
  bool has_getsupportedattkeyidnumreq() const;
  private:
  bool _internal_has_getsupportedattkeyidnumreq() const;
  public:
  void clear_getsupportedattkeyidnumreq();
  const ::aesm::message::Request_GetSupportedAttKeyIDNumRequest& getsupportedattkeyidnumreq() const;
  ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* release_getsupportedattkeyidnumreq();
  ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* mutable_getsupportedattkeyidnumreq();
  void set_allocated_getsupportedattkeyidnumreq(::aesm::message::Request_GetSupportedAttKeyIDNumRequest* getsupportedattkeyidnumreq);
  private:
  const ::aesm::message::Request_GetSupportedAttKeyIDNumRequest& _internal_getsupportedattkeyidnumreq() const;
  ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* _internal_mutable_getsupportedattkeyidnumreq();
  public:
  void unsafe_arena_set_allocated_getsupportedattkeyidnumreq(
      ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* getsupportedattkeyidnumreq);
  ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* unsafe_arena_release_getsupportedattkeyidnumreq();

  // optional .aesm.message.Request.GetSupportedAttKeyIDsRequest getSupportedAttKeyIDsReq = 22;
  bool has_getsupportedattkeyidsreq() const;
  private:
  bool _internal_has_getsupportedattkeyidsreq() const;
  public:
  void clear_getsupportedattkeyidsreq();
  const ::aesm::message::Request_GetSupportedAttKeyIDsRequest& getsupportedattkeyidsreq() const;
  ::aesm::message::Request_GetSupportedAttKeyIDsRequest* release_getsupportedattkeyidsreq();
  ::aesm::message::Request_GetSupportedAttKeyIDsRequest* mutable_getsupportedattkeyidsreq();
  void set_allocated_getsupportedattkeyidsreq(::aesm::message::Request_GetSupportedAttKeyIDsRequest* getsupportedattkeyidsreq);
  private:
  const ::aesm::message::Request_GetSupportedAttKeyIDsRequest& _internal_getsupportedattkeyidsreq() const;
  ::aesm::message::Request_GetSupportedAttKeyIDsRequest* _internal_mutable_getsupportedattkeyidsreq();
  public:
  void unsafe_arena_set_allocated_getsupportedattkeyidsreq(
      ::aesm::message::Request_GetSupportedAttKeyIDsRequest* getsupportedattkeyidsreq);
  ::aesm::message::Request_GetSupportedAttKeyIDsRequest* unsafe_arena_release_getsupportedattkeyidsreq();

  // @@protoc_insertion_point(class_scope:aesm.message.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::aesm::message::Request_InitQuoteRequest* initquotereq_;
  ::aesm::message::Request_GetQuoteRequest* getquotereq_;
  ::aesm::message::Request_GetLaunchTokenRequest* getlictokenreq_;
  ::aesm::message::Request_ReportAttestationErrorRequest* reporterrreq_;
  ::aesm::message::Request_GetWhiteListSizeRequest* getwhitelistsizereq_;
  ::aesm::message::Request_GetWhiteListRequest* getwhitelistreq_;
  ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* sgxgetextendedepidgroupidreq_;
  ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* sgxswitchextendedepidgroupreq_;
  ::aesm::message::Request_SGXRegisterRequest* sgxregisterreq_;
  ::aesm::message::Request_InitQuoteExRequest* initquoteexreq_;
  ::aesm::message::Request_GetQuoteSizeExRequest* getquotesizeexreq_;
  ::aesm::message::Request_GetQuoteExRequest* getquoteexreq_;
  ::aesm::message::Request_CheckUpdateStatusRequest* checkupdatestatusreq_;
  ::aesm::message::Request_SelectAttKeyIDRequest* selectattkeyidreq_;
  ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* getsupportedattkeyidnumreq_;
  ::aesm::message::Request_GetSupportedAttKeyIDsRequest* getsupportedattkeyidsreq_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_InitQuoteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.InitQuoteResponse) */ {
 public:
  inline Response_InitQuoteResponse() : Response_InitQuoteResponse(nullptr) {};
  virtual ~Response_InitQuoteResponse();

  Response_InitQuoteResponse(const Response_InitQuoteResponse& from);
  Response_InitQuoteResponse(Response_InitQuoteResponse&& from) noexcept
    : Response_InitQuoteResponse() {
    *this = ::std::move(from);
  }

  inline Response_InitQuoteResponse& operator=(const Response_InitQuoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_InitQuoteResponse& operator=(Response_InitQuoteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_InitQuoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_InitQuoteResponse* internal_default_instance() {
    return reinterpret_cast<const Response_InitQuoteResponse*>(
               &_Response_InitQuoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Response_InitQuoteResponse& a, Response_InitQuoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_InitQuoteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_InitQuoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_InitQuoteResponse* New() const final {
    return CreateMaybeMessage<Response_InitQuoteResponse>(nullptr);
  }

  Response_InitQuoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_InitQuoteResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_InitQuoteResponse& from);
  void MergeFrom(const Response_InitQuoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_InitQuoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.InitQuoteResponse";
  }
  protected:
  explicit Response_InitQuoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetInfoFieldNumber = 2,
    kGidFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
  };
  // optional bytes targetInfo = 2;
  bool has_targetinfo() const;
  private:
  bool _internal_has_targetinfo() const;
  public:
  void clear_targetinfo();
  const std::string& targetinfo() const;
  void set_targetinfo(const std::string& value);
  void set_targetinfo(std::string&& value);
  void set_targetinfo(const char* value);
  void set_targetinfo(const void* value, size_t size);
  std::string* mutable_targetinfo();
  std::string* release_targetinfo();
  void set_allocated_targetinfo(std::string* targetinfo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_targetinfo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_targetinfo(
      std::string* targetinfo);
  private:
  const std::string& _internal_targetinfo() const;
  void _internal_set_targetinfo(const std::string& value);
  std::string* _internal_mutable_targetinfo();
  public:

  // optional bytes gid = 3;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  const std::string& gid() const;
  void set_gid(const std::string& value);
  void set_gid(std::string&& value);
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  std::string* mutable_gid();
  std::string* release_gid();
  void set_allocated_gid(std::string* gid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gid(
      std::string* gid);
  private:
  const std::string& _internal_gid() const;
  void _internal_set_gid(const std::string& value);
  std::string* _internal_mutable_gid();
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.InitQuoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_GetQuoteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.GetQuoteResponse) */ {
 public:
  inline Response_GetQuoteResponse() : Response_GetQuoteResponse(nullptr) {};
  virtual ~Response_GetQuoteResponse();

  Response_GetQuoteResponse(const Response_GetQuoteResponse& from);
  Response_GetQuoteResponse(Response_GetQuoteResponse&& from) noexcept
    : Response_GetQuoteResponse() {
    *this = ::std::move(from);
  }

  inline Response_GetQuoteResponse& operator=(const Response_GetQuoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetQuoteResponse& operator=(Response_GetQuoteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_GetQuoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_GetQuoteResponse* internal_default_instance() {
    return reinterpret_cast<const Response_GetQuoteResponse*>(
               &_Response_GetQuoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Response_GetQuoteResponse& a, Response_GetQuoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetQuoteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetQuoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetQuoteResponse* New() const final {
    return CreateMaybeMessage<Response_GetQuoteResponse>(nullptr);
  }

  Response_GetQuoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetQuoteResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_GetQuoteResponse& from);
  void MergeFrom(const Response_GetQuoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_GetQuoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.GetQuoteResponse";
  }
  protected:
  explicit Response_GetQuoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuoteFieldNumber = 2,
    kQeReportFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
  };
  // optional bytes quote = 2;
  bool has_quote() const;
  private:
  bool _internal_has_quote() const;
  public:
  void clear_quote();
  const std::string& quote() const;
  void set_quote(const std::string& value);
  void set_quote(std::string&& value);
  void set_quote(const char* value);
  void set_quote(const void* value, size_t size);
  std::string* mutable_quote();
  std::string* release_quote();
  void set_allocated_quote(std::string* quote);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_quote();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_quote(
      std::string* quote);
  private:
  const std::string& _internal_quote() const;
  void _internal_set_quote(const std::string& value);
  std::string* _internal_mutable_quote();
  public:

  // optional bytes qe_report = 3;
  bool has_qe_report() const;
  private:
  bool _internal_has_qe_report() const;
  public:
  void clear_qe_report();
  const std::string& qe_report() const;
  void set_qe_report(const std::string& value);
  void set_qe_report(std::string&& value);
  void set_qe_report(const char* value);
  void set_qe_report(const void* value, size_t size);
  std::string* mutable_qe_report();
  std::string* release_qe_report();
  void set_allocated_qe_report(std::string* qe_report);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_qe_report();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_qe_report(
      std::string* qe_report);
  private:
  const std::string& _internal_qe_report() const;
  void _internal_set_qe_report(const std::string& value);
  std::string* _internal_mutable_qe_report();
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.GetQuoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qe_report_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_GetLaunchTokenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.GetLaunchTokenResponse) */ {
 public:
  inline Response_GetLaunchTokenResponse() : Response_GetLaunchTokenResponse(nullptr) {};
  virtual ~Response_GetLaunchTokenResponse();

  Response_GetLaunchTokenResponse(const Response_GetLaunchTokenResponse& from);
  Response_GetLaunchTokenResponse(Response_GetLaunchTokenResponse&& from) noexcept
    : Response_GetLaunchTokenResponse() {
    *this = ::std::move(from);
  }

  inline Response_GetLaunchTokenResponse& operator=(const Response_GetLaunchTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetLaunchTokenResponse& operator=(Response_GetLaunchTokenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_GetLaunchTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_GetLaunchTokenResponse* internal_default_instance() {
    return reinterpret_cast<const Response_GetLaunchTokenResponse*>(
               &_Response_GetLaunchTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Response_GetLaunchTokenResponse& a, Response_GetLaunchTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetLaunchTokenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetLaunchTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetLaunchTokenResponse* New() const final {
    return CreateMaybeMessage<Response_GetLaunchTokenResponse>(nullptr);
  }

  Response_GetLaunchTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetLaunchTokenResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_GetLaunchTokenResponse& from);
  void MergeFrom(const Response_GetLaunchTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_GetLaunchTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.GetLaunchTokenResponse";
  }
  protected:
  explicit Response_GetLaunchTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional bytes token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.GetLaunchTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_ReportAttestationErrorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.ReportAttestationErrorResponse) */ {
 public:
  inline Response_ReportAttestationErrorResponse() : Response_ReportAttestationErrorResponse(nullptr) {};
  virtual ~Response_ReportAttestationErrorResponse();

  Response_ReportAttestationErrorResponse(const Response_ReportAttestationErrorResponse& from);
  Response_ReportAttestationErrorResponse(Response_ReportAttestationErrorResponse&& from) noexcept
    : Response_ReportAttestationErrorResponse() {
    *this = ::std::move(from);
  }

  inline Response_ReportAttestationErrorResponse& operator=(const Response_ReportAttestationErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_ReportAttestationErrorResponse& operator=(Response_ReportAttestationErrorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_ReportAttestationErrorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_ReportAttestationErrorResponse* internal_default_instance() {
    return reinterpret_cast<const Response_ReportAttestationErrorResponse*>(
               &_Response_ReportAttestationErrorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Response_ReportAttestationErrorResponse& a, Response_ReportAttestationErrorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_ReportAttestationErrorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_ReportAttestationErrorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_ReportAttestationErrorResponse* New() const final {
    return CreateMaybeMessage<Response_ReportAttestationErrorResponse>(nullptr);
  }

  Response_ReportAttestationErrorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_ReportAttestationErrorResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_ReportAttestationErrorResponse& from);
  void MergeFrom(const Response_ReportAttestationErrorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_ReportAttestationErrorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.ReportAttestationErrorResponse";
  }
  protected:
  explicit Response_ReportAttestationErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformUpdateInfoFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional bytes platform_update_info = 2;
  bool has_platform_update_info() const;
  private:
  bool _internal_has_platform_update_info() const;
  public:
  void clear_platform_update_info();
  const std::string& platform_update_info() const;
  void set_platform_update_info(const std::string& value);
  void set_platform_update_info(std::string&& value);
  void set_platform_update_info(const char* value);
  void set_platform_update_info(const void* value, size_t size);
  std::string* mutable_platform_update_info();
  std::string* release_platform_update_info();
  void set_allocated_platform_update_info(std::string* platform_update_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_platform_update_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_platform_update_info(
      std::string* platform_update_info);
  private:
  const std::string& _internal_platform_update_info() const;
  void _internal_set_platform_update_info(const std::string& value);
  std::string* _internal_mutable_platform_update_info();
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.ReportAttestationErrorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_update_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_CheckUpdateStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.CheckUpdateStatusResponse) */ {
 public:
  inline Response_CheckUpdateStatusResponse() : Response_CheckUpdateStatusResponse(nullptr) {};
  virtual ~Response_CheckUpdateStatusResponse();

  Response_CheckUpdateStatusResponse(const Response_CheckUpdateStatusResponse& from);
  Response_CheckUpdateStatusResponse(Response_CheckUpdateStatusResponse&& from) noexcept
    : Response_CheckUpdateStatusResponse() {
    *this = ::std::move(from);
  }

  inline Response_CheckUpdateStatusResponse& operator=(const Response_CheckUpdateStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_CheckUpdateStatusResponse& operator=(Response_CheckUpdateStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_CheckUpdateStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_CheckUpdateStatusResponse* internal_default_instance() {
    return reinterpret_cast<const Response_CheckUpdateStatusResponse*>(
               &_Response_CheckUpdateStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Response_CheckUpdateStatusResponse& a, Response_CheckUpdateStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_CheckUpdateStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_CheckUpdateStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_CheckUpdateStatusResponse* New() const final {
    return CreateMaybeMessage<Response_CheckUpdateStatusResponse>(nullptr);
  }

  Response_CheckUpdateStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_CheckUpdateStatusResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_CheckUpdateStatusResponse& from);
  void MergeFrom(const Response_CheckUpdateStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_CheckUpdateStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.CheckUpdateStatusResponse";
  }
  protected:
  explicit Response_CheckUpdateStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformUpdateInfoFieldNumber = 2,
    kStatusFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
  };
  // optional bytes platform_update_info = 2;
  bool has_platform_update_info() const;
  private:
  bool _internal_has_platform_update_info() const;
  public:
  void clear_platform_update_info();
  const std::string& platform_update_info() const;
  void set_platform_update_info(const std::string& value);
  void set_platform_update_info(std::string&& value);
  void set_platform_update_info(const char* value);
  void set_platform_update_info(const void* value, size_t size);
  std::string* mutable_platform_update_info();
  std::string* release_platform_update_info();
  void set_allocated_platform_update_info(std::string* platform_update_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_platform_update_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_platform_update_info(
      std::string* platform_update_info);
  private:
  const std::string& _internal_platform_update_info() const;
  void _internal_set_platform_update_info(const std::string& value);
  std::string* _internal_mutable_platform_update_info();
  public:

  // optional uint32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.CheckUpdateStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_update_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_GetWhiteListSizeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.GetWhiteListSizeResponse) */ {
 public:
  inline Response_GetWhiteListSizeResponse() : Response_GetWhiteListSizeResponse(nullptr) {};
  virtual ~Response_GetWhiteListSizeResponse();

  Response_GetWhiteListSizeResponse(const Response_GetWhiteListSizeResponse& from);
  Response_GetWhiteListSizeResponse(Response_GetWhiteListSizeResponse&& from) noexcept
    : Response_GetWhiteListSizeResponse() {
    *this = ::std::move(from);
  }

  inline Response_GetWhiteListSizeResponse& operator=(const Response_GetWhiteListSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetWhiteListSizeResponse& operator=(Response_GetWhiteListSizeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_GetWhiteListSizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_GetWhiteListSizeResponse* internal_default_instance() {
    return reinterpret_cast<const Response_GetWhiteListSizeResponse*>(
               &_Response_GetWhiteListSizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Response_GetWhiteListSizeResponse& a, Response_GetWhiteListSizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetWhiteListSizeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetWhiteListSizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetWhiteListSizeResponse* New() const final {
    return CreateMaybeMessage<Response_GetWhiteListSizeResponse>(nullptr);
  }

  Response_GetWhiteListSizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetWhiteListSizeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_GetWhiteListSizeResponse& from);
  void MergeFrom(const Response_GetWhiteListSizeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_GetWhiteListSizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.GetWhiteListSizeResponse";
  }
  protected:
  explicit Response_GetWhiteListSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhiteListSizeFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional uint32 white_list_size = 2;
  bool has_white_list_size() const;
  private:
  bool _internal_has_white_list_size() const;
  public:
  void clear_white_list_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 white_list_size() const;
  void set_white_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_white_list_size() const;
  void _internal_set_white_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.GetWhiteListSizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 white_list_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_GetWhiteListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.GetWhiteListResponse) */ {
 public:
  inline Response_GetWhiteListResponse() : Response_GetWhiteListResponse(nullptr) {};
  virtual ~Response_GetWhiteListResponse();

  Response_GetWhiteListResponse(const Response_GetWhiteListResponse& from);
  Response_GetWhiteListResponse(Response_GetWhiteListResponse&& from) noexcept
    : Response_GetWhiteListResponse() {
    *this = ::std::move(from);
  }

  inline Response_GetWhiteListResponse& operator=(const Response_GetWhiteListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetWhiteListResponse& operator=(Response_GetWhiteListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_GetWhiteListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_GetWhiteListResponse* internal_default_instance() {
    return reinterpret_cast<const Response_GetWhiteListResponse*>(
               &_Response_GetWhiteListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Response_GetWhiteListResponse& a, Response_GetWhiteListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetWhiteListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetWhiteListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetWhiteListResponse* New() const final {
    return CreateMaybeMessage<Response_GetWhiteListResponse>(nullptr);
  }

  Response_GetWhiteListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetWhiteListResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_GetWhiteListResponse& from);
  void MergeFrom(const Response_GetWhiteListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_GetWhiteListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.GetWhiteListResponse";
  }
  protected:
  explicit Response_GetWhiteListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhiteListFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional bytes white_list = 2;
  bool has_white_list() const;
  private:
  bool _internal_has_white_list() const;
  public:
  void clear_white_list();
  const std::string& white_list() const;
  void set_white_list(const std::string& value);
  void set_white_list(std::string&& value);
  void set_white_list(const char* value);
  void set_white_list(const void* value, size_t size);
  std::string* mutable_white_list();
  std::string* release_white_list();
  void set_allocated_white_list(std::string* white_list);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_white_list();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_white_list(
      std::string* white_list);
  private:
  const std::string& _internal_white_list() const;
  void _internal_set_white_list(const std::string& value);
  std::string* _internal_mutable_white_list();
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.GetWhiteListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr white_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_SGXGetExtendedEpidGroupIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse) */ {
 public:
  inline Response_SGXGetExtendedEpidGroupIdResponse() : Response_SGXGetExtendedEpidGroupIdResponse(nullptr) {};
  virtual ~Response_SGXGetExtendedEpidGroupIdResponse();

  Response_SGXGetExtendedEpidGroupIdResponse(const Response_SGXGetExtendedEpidGroupIdResponse& from);
  Response_SGXGetExtendedEpidGroupIdResponse(Response_SGXGetExtendedEpidGroupIdResponse&& from) noexcept
    : Response_SGXGetExtendedEpidGroupIdResponse() {
    *this = ::std::move(from);
  }

  inline Response_SGXGetExtendedEpidGroupIdResponse& operator=(const Response_SGXGetExtendedEpidGroupIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_SGXGetExtendedEpidGroupIdResponse& operator=(Response_SGXGetExtendedEpidGroupIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_SGXGetExtendedEpidGroupIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_SGXGetExtendedEpidGroupIdResponse* internal_default_instance() {
    return reinterpret_cast<const Response_SGXGetExtendedEpidGroupIdResponse*>(
               &_Response_SGXGetExtendedEpidGroupIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Response_SGXGetExtendedEpidGroupIdResponse& a, Response_SGXGetExtendedEpidGroupIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_SGXGetExtendedEpidGroupIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_SGXGetExtendedEpidGroupIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_SGXGetExtendedEpidGroupIdResponse* New() const final {
    return CreateMaybeMessage<Response_SGXGetExtendedEpidGroupIdResponse>(nullptr);
  }

  Response_SGXGetExtendedEpidGroupIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_SGXGetExtendedEpidGroupIdResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_SGXGetExtendedEpidGroupIdResponse& from);
  void MergeFrom(const Response_SGXGetExtendedEpidGroupIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_SGXGetExtendedEpidGroupIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.SGXGetExtendedEpidGroupIdResponse";
  }
  protected:
  explicit Response_SGXGetExtendedEpidGroupIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXGroupIdFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional uint32 x_group_id = 2;
  bool has_x_group_id() const;
  private:
  bool _internal_has_x_group_id() const;
  public:
  void clear_x_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 x_group_id() const;
  void set_x_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x_group_id() const;
  void _internal_set_x_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_SGXSwitchExtendedEpidGroupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse) */ {
 public:
  inline Response_SGXSwitchExtendedEpidGroupResponse() : Response_SGXSwitchExtendedEpidGroupResponse(nullptr) {};
  virtual ~Response_SGXSwitchExtendedEpidGroupResponse();

  Response_SGXSwitchExtendedEpidGroupResponse(const Response_SGXSwitchExtendedEpidGroupResponse& from);
  Response_SGXSwitchExtendedEpidGroupResponse(Response_SGXSwitchExtendedEpidGroupResponse&& from) noexcept
    : Response_SGXSwitchExtendedEpidGroupResponse() {
    *this = ::std::move(from);
  }

  inline Response_SGXSwitchExtendedEpidGroupResponse& operator=(const Response_SGXSwitchExtendedEpidGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_SGXSwitchExtendedEpidGroupResponse& operator=(Response_SGXSwitchExtendedEpidGroupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_SGXSwitchExtendedEpidGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_SGXSwitchExtendedEpidGroupResponse* internal_default_instance() {
    return reinterpret_cast<const Response_SGXSwitchExtendedEpidGroupResponse*>(
               &_Response_SGXSwitchExtendedEpidGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Response_SGXSwitchExtendedEpidGroupResponse& a, Response_SGXSwitchExtendedEpidGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_SGXSwitchExtendedEpidGroupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_SGXSwitchExtendedEpidGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_SGXSwitchExtendedEpidGroupResponse* New() const final {
    return CreateMaybeMessage<Response_SGXSwitchExtendedEpidGroupResponse>(nullptr);
  }

  Response_SGXSwitchExtendedEpidGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_SGXSwitchExtendedEpidGroupResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_SGXSwitchExtendedEpidGroupResponse& from);
  void MergeFrom(const Response_SGXSwitchExtendedEpidGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_SGXSwitchExtendedEpidGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.SGXSwitchExtendedEpidGroupResponse";
  }
  protected:
  explicit Response_SGXSwitchExtendedEpidGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_SGXRegisterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.SGXRegisterResponse) */ {
 public:
  inline Response_SGXRegisterResponse() : Response_SGXRegisterResponse(nullptr) {};
  virtual ~Response_SGXRegisterResponse();

  Response_SGXRegisterResponse(const Response_SGXRegisterResponse& from);
  Response_SGXRegisterResponse(Response_SGXRegisterResponse&& from) noexcept
    : Response_SGXRegisterResponse() {
    *this = ::std::move(from);
  }

  inline Response_SGXRegisterResponse& operator=(const Response_SGXRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_SGXRegisterResponse& operator=(Response_SGXRegisterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_SGXRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_SGXRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const Response_SGXRegisterResponse*>(
               &_Response_SGXRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Response_SGXRegisterResponse& a, Response_SGXRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_SGXRegisterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_SGXRegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_SGXRegisterResponse* New() const final {
    return CreateMaybeMessage<Response_SGXRegisterResponse>(nullptr);
  }

  Response_SGXRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_SGXRegisterResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_SGXRegisterResponse& from);
  void MergeFrom(const Response_SGXRegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_SGXRegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.SGXRegisterResponse";
  }
  protected:
  explicit Response_SGXRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.SGXRegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_SelectAttKeyIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.SelectAttKeyIDResponse) */ {
 public:
  inline Response_SelectAttKeyIDResponse() : Response_SelectAttKeyIDResponse(nullptr) {};
  virtual ~Response_SelectAttKeyIDResponse();

  Response_SelectAttKeyIDResponse(const Response_SelectAttKeyIDResponse& from);
  Response_SelectAttKeyIDResponse(Response_SelectAttKeyIDResponse&& from) noexcept
    : Response_SelectAttKeyIDResponse() {
    *this = ::std::move(from);
  }

  inline Response_SelectAttKeyIDResponse& operator=(const Response_SelectAttKeyIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_SelectAttKeyIDResponse& operator=(Response_SelectAttKeyIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_SelectAttKeyIDResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_SelectAttKeyIDResponse* internal_default_instance() {
    return reinterpret_cast<const Response_SelectAttKeyIDResponse*>(
               &_Response_SelectAttKeyIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Response_SelectAttKeyIDResponse& a, Response_SelectAttKeyIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_SelectAttKeyIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_SelectAttKeyIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_SelectAttKeyIDResponse* New() const final {
    return CreateMaybeMessage<Response_SelectAttKeyIDResponse>(nullptr);
  }

  Response_SelectAttKeyIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_SelectAttKeyIDResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_SelectAttKeyIDResponse& from);
  void MergeFrom(const Response_SelectAttKeyIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_SelectAttKeyIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.SelectAttKeyIDResponse";
  }
  protected:
  explicit Response_SelectAttKeyIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedAttKeyIdFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional bytes selected_att_key_id = 2;
  bool has_selected_att_key_id() const;
  private:
  bool _internal_has_selected_att_key_id() const;
  public:
  void clear_selected_att_key_id();
  const std::string& selected_att_key_id() const;
  void set_selected_att_key_id(const std::string& value);
  void set_selected_att_key_id(std::string&& value);
  void set_selected_att_key_id(const char* value);
  void set_selected_att_key_id(const void* value, size_t size);
  std::string* mutable_selected_att_key_id();
  std::string* release_selected_att_key_id();
  void set_allocated_selected_att_key_id(std::string* selected_att_key_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_selected_att_key_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_selected_att_key_id(
      std::string* selected_att_key_id);
  private:
  const std::string& _internal_selected_att_key_id() const;
  void _internal_set_selected_att_key_id(const std::string& value);
  std::string* _internal_mutable_selected_att_key_id();
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.SelectAttKeyIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selected_att_key_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_InitQuoteExResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.InitQuoteExResponse) */ {
 public:
  inline Response_InitQuoteExResponse() : Response_InitQuoteExResponse(nullptr) {};
  virtual ~Response_InitQuoteExResponse();

  Response_InitQuoteExResponse(const Response_InitQuoteExResponse& from);
  Response_InitQuoteExResponse(Response_InitQuoteExResponse&& from) noexcept
    : Response_InitQuoteExResponse() {
    *this = ::std::move(from);
  }

  inline Response_InitQuoteExResponse& operator=(const Response_InitQuoteExResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_InitQuoteExResponse& operator=(Response_InitQuoteExResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_InitQuoteExResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_InitQuoteExResponse* internal_default_instance() {
    return reinterpret_cast<const Response_InitQuoteExResponse*>(
               &_Response_InitQuoteExResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Response_InitQuoteExResponse& a, Response_InitQuoteExResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_InitQuoteExResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_InitQuoteExResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_InitQuoteExResponse* New() const final {
    return CreateMaybeMessage<Response_InitQuoteExResponse>(nullptr);
  }

  Response_InitQuoteExResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_InitQuoteExResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_InitQuoteExResponse& from);
  void MergeFrom(const Response_InitQuoteExResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_InitQuoteExResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.InitQuoteExResponse";
  }
  protected:
  explicit Response_InitQuoteExResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetInfoFieldNumber = 2,
    kPubKeyIdFieldNumber = 4,
    kPubKeyIdSizeFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
  };
  // optional bytes target_info = 2;
  bool has_target_info() const;
  private:
  bool _internal_has_target_info() const;
  public:
  void clear_target_info();
  const std::string& target_info() const;
  void set_target_info(const std::string& value);
  void set_target_info(std::string&& value);
  void set_target_info(const char* value);
  void set_target_info(const void* value, size_t size);
  std::string* mutable_target_info();
  std::string* release_target_info();
  void set_allocated_target_info(std::string* target_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_info(
      std::string* target_info);
  private:
  const std::string& _internal_target_info() const;
  void _internal_set_target_info(const std::string& value);
  std::string* _internal_mutable_target_info();
  public:

  // optional bytes pub_key_id = 4;
  bool has_pub_key_id() const;
  private:
  bool _internal_has_pub_key_id() const;
  public:
  void clear_pub_key_id();
  const std::string& pub_key_id() const;
  void set_pub_key_id(const std::string& value);
  void set_pub_key_id(std::string&& value);
  void set_pub_key_id(const char* value);
  void set_pub_key_id(const void* value, size_t size);
  std::string* mutable_pub_key_id();
  std::string* release_pub_key_id();
  void set_allocated_pub_key_id(std::string* pub_key_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pub_key_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pub_key_id(
      std::string* pub_key_id);
  private:
  const std::string& _internal_pub_key_id() const;
  void _internal_set_pub_key_id(const std::string& value);
  std::string* _internal_mutable_pub_key_id();
  public:

  // optional uint64 pub_key_id_size = 3;
  bool has_pub_key_id_size() const;
  private:
  bool _internal_has_pub_key_id_size() const;
  public:
  void clear_pub_key_id_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 pub_key_id_size() const;
  void set_pub_key_id_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pub_key_id_size() const;
  void _internal_set_pub_key_id_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.InitQuoteExResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pub_key_id_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_GetQuoteSizeExResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.GetQuoteSizeExResponse) */ {
 public:
  inline Response_GetQuoteSizeExResponse() : Response_GetQuoteSizeExResponse(nullptr) {};
  virtual ~Response_GetQuoteSizeExResponse();

  Response_GetQuoteSizeExResponse(const Response_GetQuoteSizeExResponse& from);
  Response_GetQuoteSizeExResponse(Response_GetQuoteSizeExResponse&& from) noexcept
    : Response_GetQuoteSizeExResponse() {
    *this = ::std::move(from);
  }

  inline Response_GetQuoteSizeExResponse& operator=(const Response_GetQuoteSizeExResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetQuoteSizeExResponse& operator=(Response_GetQuoteSizeExResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_GetQuoteSizeExResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_GetQuoteSizeExResponse* internal_default_instance() {
    return reinterpret_cast<const Response_GetQuoteSizeExResponse*>(
               &_Response_GetQuoteSizeExResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Response_GetQuoteSizeExResponse& a, Response_GetQuoteSizeExResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetQuoteSizeExResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetQuoteSizeExResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetQuoteSizeExResponse* New() const final {
    return CreateMaybeMessage<Response_GetQuoteSizeExResponse>(nullptr);
  }

  Response_GetQuoteSizeExResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetQuoteSizeExResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_GetQuoteSizeExResponse& from);
  void MergeFrom(const Response_GetQuoteSizeExResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_GetQuoteSizeExResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.GetQuoteSizeExResponse";
  }
  protected:
  explicit Response_GetQuoteSizeExResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuoteSizeFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional uint32 quote_size = 2;
  bool has_quote_size() const;
  private:
  bool _internal_has_quote_size() const;
  public:
  void clear_quote_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 quote_size() const;
  void set_quote_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quote_size() const;
  void _internal_set_quote_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.GetQuoteSizeExResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quote_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_GetQuoteExResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.GetQuoteExResponse) */ {
 public:
  inline Response_GetQuoteExResponse() : Response_GetQuoteExResponse(nullptr) {};
  virtual ~Response_GetQuoteExResponse();

  Response_GetQuoteExResponse(const Response_GetQuoteExResponse& from);
  Response_GetQuoteExResponse(Response_GetQuoteExResponse&& from) noexcept
    : Response_GetQuoteExResponse() {
    *this = ::std::move(from);
  }

  inline Response_GetQuoteExResponse& operator=(const Response_GetQuoteExResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetQuoteExResponse& operator=(Response_GetQuoteExResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_GetQuoteExResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_GetQuoteExResponse* internal_default_instance() {
    return reinterpret_cast<const Response_GetQuoteExResponse*>(
               &_Response_GetQuoteExResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Response_GetQuoteExResponse& a, Response_GetQuoteExResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetQuoteExResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetQuoteExResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetQuoteExResponse* New() const final {
    return CreateMaybeMessage<Response_GetQuoteExResponse>(nullptr);
  }

  Response_GetQuoteExResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetQuoteExResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_GetQuoteExResponse& from);
  void MergeFrom(const Response_GetQuoteExResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_GetQuoteExResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.GetQuoteExResponse";
  }
  protected:
  explicit Response_GetQuoteExResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuoteFieldNumber = 2,
    kQeReportInfoFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
  };
  // optional bytes quote = 2;
  bool has_quote() const;
  private:
  bool _internal_has_quote() const;
  public:
  void clear_quote();
  const std::string& quote() const;
  void set_quote(const std::string& value);
  void set_quote(std::string&& value);
  void set_quote(const char* value);
  void set_quote(const void* value, size_t size);
  std::string* mutable_quote();
  std::string* release_quote();
  void set_allocated_quote(std::string* quote);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_quote();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_quote(
      std::string* quote);
  private:
  const std::string& _internal_quote() const;
  void _internal_set_quote(const std::string& value);
  std::string* _internal_mutable_quote();
  public:

  // optional bytes qe_report_info = 3;
  bool has_qe_report_info() const;
  private:
  bool _internal_has_qe_report_info() const;
  public:
  void clear_qe_report_info();
  const std::string& qe_report_info() const;
  void set_qe_report_info(const std::string& value);
  void set_qe_report_info(std::string&& value);
  void set_qe_report_info(const char* value);
  void set_qe_report_info(const void* value, size_t size);
  std::string* mutable_qe_report_info();
  std::string* release_qe_report_info();
  void set_allocated_qe_report_info(std::string* qe_report_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_qe_report_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_qe_report_info(
      std::string* qe_report_info);
  private:
  const std::string& _internal_qe_report_info() const;
  void _internal_set_qe_report_info(const std::string& value);
  std::string* _internal_mutable_qe_report_info();
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.GetQuoteExResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qe_report_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_UnsupportedRequestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.UnsupportedRequestResponse) */ {
 public:
  inline Response_UnsupportedRequestResponse() : Response_UnsupportedRequestResponse(nullptr) {};
  virtual ~Response_UnsupportedRequestResponse();

  Response_UnsupportedRequestResponse(const Response_UnsupportedRequestResponse& from);
  Response_UnsupportedRequestResponse(Response_UnsupportedRequestResponse&& from) noexcept
    : Response_UnsupportedRequestResponse() {
    *this = ::std::move(from);
  }

  inline Response_UnsupportedRequestResponse& operator=(const Response_UnsupportedRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_UnsupportedRequestResponse& operator=(Response_UnsupportedRequestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_UnsupportedRequestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_UnsupportedRequestResponse* internal_default_instance() {
    return reinterpret_cast<const Response_UnsupportedRequestResponse*>(
               &_Response_UnsupportedRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Response_UnsupportedRequestResponse& a, Response_UnsupportedRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_UnsupportedRequestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_UnsupportedRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_UnsupportedRequestResponse* New() const final {
    return CreateMaybeMessage<Response_UnsupportedRequestResponse>(nullptr);
  }

  Response_UnsupportedRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_UnsupportedRequestResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_UnsupportedRequestResponse& from);
  void MergeFrom(const Response_UnsupportedRequestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_UnsupportedRequestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.UnsupportedRequestResponse";
  }
  protected:
  explicit Response_UnsupportedRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.UnsupportedRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_GetSupportedAttKeyIDNumResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.GetSupportedAttKeyIDNumResponse) */ {
 public:
  inline Response_GetSupportedAttKeyIDNumResponse() : Response_GetSupportedAttKeyIDNumResponse(nullptr) {};
  virtual ~Response_GetSupportedAttKeyIDNumResponse();

  Response_GetSupportedAttKeyIDNumResponse(const Response_GetSupportedAttKeyIDNumResponse& from);
  Response_GetSupportedAttKeyIDNumResponse(Response_GetSupportedAttKeyIDNumResponse&& from) noexcept
    : Response_GetSupportedAttKeyIDNumResponse() {
    *this = ::std::move(from);
  }

  inline Response_GetSupportedAttKeyIDNumResponse& operator=(const Response_GetSupportedAttKeyIDNumResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetSupportedAttKeyIDNumResponse& operator=(Response_GetSupportedAttKeyIDNumResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_GetSupportedAttKeyIDNumResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_GetSupportedAttKeyIDNumResponse* internal_default_instance() {
    return reinterpret_cast<const Response_GetSupportedAttKeyIDNumResponse*>(
               &_Response_GetSupportedAttKeyIDNumResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Response_GetSupportedAttKeyIDNumResponse& a, Response_GetSupportedAttKeyIDNumResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetSupportedAttKeyIDNumResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetSupportedAttKeyIDNumResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetSupportedAttKeyIDNumResponse* New() const final {
    return CreateMaybeMessage<Response_GetSupportedAttKeyIDNumResponse>(nullptr);
  }

  Response_GetSupportedAttKeyIDNumResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetSupportedAttKeyIDNumResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_GetSupportedAttKeyIDNumResponse& from);
  void MergeFrom(const Response_GetSupportedAttKeyIDNumResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_GetSupportedAttKeyIDNumResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.GetSupportedAttKeyIDNumResponse";
  }
  protected:
  explicit Response_GetSupportedAttKeyIDNumResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttKeyIdNumFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional uint32 att_key_id_num = 2;
  bool has_att_key_id_num() const;
  private:
  bool _internal_has_att_key_id_num() const;
  public:
  void clear_att_key_id_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 att_key_id_num() const;
  void set_att_key_id_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_att_key_id_num() const;
  void _internal_set_att_key_id_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 att_key_id_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response_GetSupportedAttKeyIDsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response.GetSupportedAttKeyIDsResponse) */ {
 public:
  inline Response_GetSupportedAttKeyIDsResponse() : Response_GetSupportedAttKeyIDsResponse(nullptr) {};
  virtual ~Response_GetSupportedAttKeyIDsResponse();

  Response_GetSupportedAttKeyIDsResponse(const Response_GetSupportedAttKeyIDsResponse& from);
  Response_GetSupportedAttKeyIDsResponse(Response_GetSupportedAttKeyIDsResponse&& from) noexcept
    : Response_GetSupportedAttKeyIDsResponse() {
    *this = ::std::move(from);
  }

  inline Response_GetSupportedAttKeyIDsResponse& operator=(const Response_GetSupportedAttKeyIDsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetSupportedAttKeyIDsResponse& operator=(Response_GetSupportedAttKeyIDsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response_GetSupportedAttKeyIDsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_GetSupportedAttKeyIDsResponse* internal_default_instance() {
    return reinterpret_cast<const Response_GetSupportedAttKeyIDsResponse*>(
               &_Response_GetSupportedAttKeyIDsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Response_GetSupportedAttKeyIDsResponse& a, Response_GetSupportedAttKeyIDsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetSupportedAttKeyIDsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetSupportedAttKeyIDsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetSupportedAttKeyIDsResponse* New() const final {
    return CreateMaybeMessage<Response_GetSupportedAttKeyIDsResponse>(nullptr);
  }

  Response_GetSupportedAttKeyIDsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetSupportedAttKeyIDsResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response_GetSupportedAttKeyIDsResponse& from);
  void MergeFrom(const Response_GetSupportedAttKeyIDsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_GetSupportedAttKeyIDsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response.GetSupportedAttKeyIDsResponse";
  }
  protected:
  explicit Response_GetSupportedAttKeyIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttKeyIdsFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional bytes att_key_ids = 2;
  bool has_att_key_ids() const;
  private:
  bool _internal_has_att_key_ids() const;
  public:
  void clear_att_key_ids();
  const std::string& att_key_ids() const;
  void set_att_key_ids(const std::string& value);
  void set_att_key_ids(std::string&& value);
  void set_att_key_ids(const char* value);
  void set_att_key_ids(const void* value, size_t size);
  std::string* mutable_att_key_ids();
  std::string* release_att_key_ids();
  void set_allocated_att_key_ids(std::string* att_key_ids);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_att_key_ids();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_att_key_ids(
      std::string* att_key_ids);
  private:
  const std::string& _internal_att_key_ids() const;
  void _internal_set_att_key_ids(const std::string& value);
  std::string* _internal_mutable_att_key_ids();
  public:

  // required uint32 errorCode = 1 [default = 1];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aesm.message.Response.GetSupportedAttKeyIDsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr att_key_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:aesm.message.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aesm.message.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Response_InitQuoteResponse InitQuoteResponse;
  typedef Response_GetQuoteResponse GetQuoteResponse;
  typedef Response_GetLaunchTokenResponse GetLaunchTokenResponse;
  typedef Response_ReportAttestationErrorResponse ReportAttestationErrorResponse;
  typedef Response_CheckUpdateStatusResponse CheckUpdateStatusResponse;
  typedef Response_GetWhiteListSizeResponse GetWhiteListSizeResponse;
  typedef Response_GetWhiteListResponse GetWhiteListResponse;
  typedef Response_SGXGetExtendedEpidGroupIdResponse SGXGetExtendedEpidGroupIdResponse;
  typedef Response_SGXSwitchExtendedEpidGroupResponse SGXSwitchExtendedEpidGroupResponse;
  typedef Response_SGXRegisterResponse SGXRegisterResponse;
  typedef Response_SelectAttKeyIDResponse SelectAttKeyIDResponse;
  typedef Response_InitQuoteExResponse InitQuoteExResponse;
  typedef Response_GetQuoteSizeExResponse GetQuoteSizeExResponse;
  typedef Response_GetQuoteExResponse GetQuoteExResponse;
  typedef Response_UnsupportedRequestResponse UnsupportedRequestResponse;
  typedef Response_GetSupportedAttKeyIDNumResponse GetSupportedAttKeyIDNumResponse;
  typedef Response_GetSupportedAttKeyIDsResponse GetSupportedAttKeyIDsResponse;

  // accessors -------------------------------------------------------

  enum : int {
    kInitQuoteResFieldNumber = 1,
    kGetQuoteResFieldNumber = 2,
    kGetLicTokenResFieldNumber = 3,
    kReportErrResFieldNumber = 4,
    kGetWhiteListSizeResFieldNumber = 10,
    kGetWhiteListResFieldNumber = 11,
    kSgxGetExtendedEpidGroupIdResFieldNumber = 12,
    kSgxSwitchExtendedEpidGroupResFieldNumber = 13,
    kSgxRegisterResFieldNumber = 14,
    kInitQuoteExResFieldNumber = 15,
    kGetQuoteSizeExResFieldNumber = 16,
    kGetQuoteExResFieldNumber = 17,
    kCheckUpdateStatusResFieldNumber = 18,
    kSelectAttKeyIDResFieldNumber = 19,
    kUnsupportedRequestResponseFieldNumber = 20,
    kGetSupportedAttKeyIDNumResFieldNumber = 21,
    kGetSupportedAttKeyIDsResFieldNumber = 22,
  };
  // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
  bool has_initquoteres() const;
  private:
  bool _internal_has_initquoteres() const;
  public:
  void clear_initquoteres();
  const ::aesm::message::Response_InitQuoteResponse& initquoteres() const;
  ::aesm::message::Response_InitQuoteResponse* release_initquoteres();
  ::aesm::message::Response_InitQuoteResponse* mutable_initquoteres();
  void set_allocated_initquoteres(::aesm::message::Response_InitQuoteResponse* initquoteres);
  private:
  const ::aesm::message::Response_InitQuoteResponse& _internal_initquoteres() const;
  ::aesm::message::Response_InitQuoteResponse* _internal_mutable_initquoteres();
  public:
  void unsafe_arena_set_allocated_initquoteres(
      ::aesm::message::Response_InitQuoteResponse* initquoteres);
  ::aesm::message::Response_InitQuoteResponse* unsafe_arena_release_initquoteres();

  // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
  bool has_getquoteres() const;
  private:
  bool _internal_has_getquoteres() const;
  public:
  void clear_getquoteres();
  const ::aesm::message::Response_GetQuoteResponse& getquoteres() const;
  ::aesm::message::Response_GetQuoteResponse* release_getquoteres();
  ::aesm::message::Response_GetQuoteResponse* mutable_getquoteres();
  void set_allocated_getquoteres(::aesm::message::Response_GetQuoteResponse* getquoteres);
  private:
  const ::aesm::message::Response_GetQuoteResponse& _internal_getquoteres() const;
  ::aesm::message::Response_GetQuoteResponse* _internal_mutable_getquoteres();
  public:
  void unsafe_arena_set_allocated_getquoteres(
      ::aesm::message::Response_GetQuoteResponse* getquoteres);
  ::aesm::message::Response_GetQuoteResponse* unsafe_arena_release_getquoteres();

  // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
  bool has_getlictokenres() const;
  private:
  bool _internal_has_getlictokenres() const;
  public:
  void clear_getlictokenres();
  const ::aesm::message::Response_GetLaunchTokenResponse& getlictokenres() const;
  ::aesm::message::Response_GetLaunchTokenResponse* release_getlictokenres();
  ::aesm::message::Response_GetLaunchTokenResponse* mutable_getlictokenres();
  void set_allocated_getlictokenres(::aesm::message::Response_GetLaunchTokenResponse* getlictokenres);
  private:
  const ::aesm::message::Response_GetLaunchTokenResponse& _internal_getlictokenres() const;
  ::aesm::message::Response_GetLaunchTokenResponse* _internal_mutable_getlictokenres();
  public:
  void unsafe_arena_set_allocated_getlictokenres(
      ::aesm::message::Response_GetLaunchTokenResponse* getlictokenres);
  ::aesm::message::Response_GetLaunchTokenResponse* unsafe_arena_release_getlictokenres();

  // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
  bool has_reporterrres() const;
  private:
  bool _internal_has_reporterrres() const;
  public:
  void clear_reporterrres();
  const ::aesm::message::Response_ReportAttestationErrorResponse& reporterrres() const;
  ::aesm::message::Response_ReportAttestationErrorResponse* release_reporterrres();
  ::aesm::message::Response_ReportAttestationErrorResponse* mutable_reporterrres();
  void set_allocated_reporterrres(::aesm::message::Response_ReportAttestationErrorResponse* reporterrres);
  private:
  const ::aesm::message::Response_ReportAttestationErrorResponse& _internal_reporterrres() const;
  ::aesm::message::Response_ReportAttestationErrorResponse* _internal_mutable_reporterrres();
  public:
  void unsafe_arena_set_allocated_reporterrres(
      ::aesm::message::Response_ReportAttestationErrorResponse* reporterrres);
  ::aesm::message::Response_ReportAttestationErrorResponse* unsafe_arena_release_reporterrres();

  // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
  bool has_getwhitelistsizeres() const;
  private:
  bool _internal_has_getwhitelistsizeres() const;
  public:
  void clear_getwhitelistsizeres();
  const ::aesm::message::Response_GetWhiteListSizeResponse& getwhitelistsizeres() const;
  ::aesm::message::Response_GetWhiteListSizeResponse* release_getwhitelistsizeres();
  ::aesm::message::Response_GetWhiteListSizeResponse* mutable_getwhitelistsizeres();
  void set_allocated_getwhitelistsizeres(::aesm::message::Response_GetWhiteListSizeResponse* getwhitelistsizeres);
  private:
  const ::aesm::message::Response_GetWhiteListSizeResponse& _internal_getwhitelistsizeres() const;
  ::aesm::message::Response_GetWhiteListSizeResponse* _internal_mutable_getwhitelistsizeres();
  public:
  void unsafe_arena_set_allocated_getwhitelistsizeres(
      ::aesm::message::Response_GetWhiteListSizeResponse* getwhitelistsizeres);
  ::aesm::message::Response_GetWhiteListSizeResponse* unsafe_arena_release_getwhitelistsizeres();

  // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
  bool has_getwhitelistres() const;
  private:
  bool _internal_has_getwhitelistres() const;
  public:
  void clear_getwhitelistres();
  const ::aesm::message::Response_GetWhiteListResponse& getwhitelistres() const;
  ::aesm::message::Response_GetWhiteListResponse* release_getwhitelistres();
  ::aesm::message::Response_GetWhiteListResponse* mutable_getwhitelistres();
  void set_allocated_getwhitelistres(::aesm::message::Response_GetWhiteListResponse* getwhitelistres);
  private:
  const ::aesm::message::Response_GetWhiteListResponse& _internal_getwhitelistres() const;
  ::aesm::message::Response_GetWhiteListResponse* _internal_mutable_getwhitelistres();
  public:
  void unsafe_arena_set_allocated_getwhitelistres(
      ::aesm::message::Response_GetWhiteListResponse* getwhitelistres);
  ::aesm::message::Response_GetWhiteListResponse* unsafe_arena_release_getwhitelistres();

  // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
  bool has_sgxgetextendedepidgroupidres() const;
  private:
  bool _internal_has_sgxgetextendedepidgroupidres() const;
  public:
  void clear_sgxgetextendedepidgroupidres();
  const ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse& sgxgetextendedepidgroupidres() const;
  ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* release_sgxgetextendedepidgroupidres();
  ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* mutable_sgxgetextendedepidgroupidres();
  void set_allocated_sgxgetextendedepidgroupidres(::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* sgxgetextendedepidgroupidres);
  private:
  const ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse& _internal_sgxgetextendedepidgroupidres() const;
  ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* _internal_mutable_sgxgetextendedepidgroupidres();
  public:
  void unsafe_arena_set_allocated_sgxgetextendedepidgroupidres(
      ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* sgxgetextendedepidgroupidres);
  ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* unsafe_arena_release_sgxgetextendedepidgroupidres();

  // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
  bool has_sgxswitchextendedepidgroupres() const;
  private:
  bool _internal_has_sgxswitchextendedepidgroupres() const;
  public:
  void clear_sgxswitchextendedepidgroupres();
  const ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse& sgxswitchextendedepidgroupres() const;
  ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* release_sgxswitchextendedepidgroupres();
  ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* mutable_sgxswitchextendedepidgroupres();
  void set_allocated_sgxswitchextendedepidgroupres(::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* sgxswitchextendedepidgroupres);
  private:
  const ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse& _internal_sgxswitchextendedepidgroupres() const;
  ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* _internal_mutable_sgxswitchextendedepidgroupres();
  public:
  void unsafe_arena_set_allocated_sgxswitchextendedepidgroupres(
      ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* sgxswitchextendedepidgroupres);
  ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* unsafe_arena_release_sgxswitchextendedepidgroupres();

  // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
  bool has_sgxregisterres() const;
  private:
  bool _internal_has_sgxregisterres() const;
  public:
  void clear_sgxregisterres();
  const ::aesm::message::Response_SGXRegisterResponse& sgxregisterres() const;
  ::aesm::message::Response_SGXRegisterResponse* release_sgxregisterres();
  ::aesm::message::Response_SGXRegisterResponse* mutable_sgxregisterres();
  void set_allocated_sgxregisterres(::aesm::message::Response_SGXRegisterResponse* sgxregisterres);
  private:
  const ::aesm::message::Response_SGXRegisterResponse& _internal_sgxregisterres() const;
  ::aesm::message::Response_SGXRegisterResponse* _internal_mutable_sgxregisterres();
  public:
  void unsafe_arena_set_allocated_sgxregisterres(
      ::aesm::message::Response_SGXRegisterResponse* sgxregisterres);
  ::aesm::message::Response_SGXRegisterResponse* unsafe_arena_release_sgxregisterres();

  // optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
  bool has_initquoteexres() const;
  private:
  bool _internal_has_initquoteexres() const;
  public:
  void clear_initquoteexres();
  const ::aesm::message::Response_InitQuoteExResponse& initquoteexres() const;
  ::aesm::message::Response_InitQuoteExResponse* release_initquoteexres();
  ::aesm::message::Response_InitQuoteExResponse* mutable_initquoteexres();
  void set_allocated_initquoteexres(::aesm::message::Response_InitQuoteExResponse* initquoteexres);
  private:
  const ::aesm::message::Response_InitQuoteExResponse& _internal_initquoteexres() const;
  ::aesm::message::Response_InitQuoteExResponse* _internal_mutable_initquoteexres();
  public:
  void unsafe_arena_set_allocated_initquoteexres(
      ::aesm::message::Response_InitQuoteExResponse* initquoteexres);
  ::aesm::message::Response_InitQuoteExResponse* unsafe_arena_release_initquoteexres();

  // optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
  bool has_getquotesizeexres() const;
  private:
  bool _internal_has_getquotesizeexres() const;
  public:
  void clear_getquotesizeexres();
  const ::aesm::message::Response_GetQuoteSizeExResponse& getquotesizeexres() const;
  ::aesm::message::Response_GetQuoteSizeExResponse* release_getquotesizeexres();
  ::aesm::message::Response_GetQuoteSizeExResponse* mutable_getquotesizeexres();
  void set_allocated_getquotesizeexres(::aesm::message::Response_GetQuoteSizeExResponse* getquotesizeexres);
  private:
  const ::aesm::message::Response_GetQuoteSizeExResponse& _internal_getquotesizeexres() const;
  ::aesm::message::Response_GetQuoteSizeExResponse* _internal_mutable_getquotesizeexres();
  public:
  void unsafe_arena_set_allocated_getquotesizeexres(
      ::aesm::message::Response_GetQuoteSizeExResponse* getquotesizeexres);
  ::aesm::message::Response_GetQuoteSizeExResponse* unsafe_arena_release_getquotesizeexres();

  // optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
  bool has_getquoteexres() const;
  private:
  bool _internal_has_getquoteexres() const;
  public:
  void clear_getquoteexres();
  const ::aesm::message::Response_GetQuoteExResponse& getquoteexres() const;
  ::aesm::message::Response_GetQuoteExResponse* release_getquoteexres();
  ::aesm::message::Response_GetQuoteExResponse* mutable_getquoteexres();
  void set_allocated_getquoteexres(::aesm::message::Response_GetQuoteExResponse* getquoteexres);
  private:
  const ::aesm::message::Response_GetQuoteExResponse& _internal_getquoteexres() const;
  ::aesm::message::Response_GetQuoteExResponse* _internal_mutable_getquoteexres();
  public:
  void unsafe_arena_set_allocated_getquoteexres(
      ::aesm::message::Response_GetQuoteExResponse* getquoteexres);
  ::aesm::message::Response_GetQuoteExResponse* unsafe_arena_release_getquoteexres();

  // optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
  bool has_checkupdatestatusres() const;
  private:
  bool _internal_has_checkupdatestatusres() const;
  public:
  void clear_checkupdatestatusres();
  const ::aesm::message::Response_CheckUpdateStatusResponse& checkupdatestatusres() const;
  ::aesm::message::Response_CheckUpdateStatusResponse* release_checkupdatestatusres();
  ::aesm::message::Response_CheckUpdateStatusResponse* mutable_checkupdatestatusres();
  void set_allocated_checkupdatestatusres(::aesm::message::Response_CheckUpdateStatusResponse* checkupdatestatusres);
  private:
  const ::aesm::message::Response_CheckUpdateStatusResponse& _internal_checkupdatestatusres() const;
  ::aesm::message::Response_CheckUpdateStatusResponse* _internal_mutable_checkupdatestatusres();
  public:
  void unsafe_arena_set_allocated_checkupdatestatusres(
      ::aesm::message::Response_CheckUpdateStatusResponse* checkupdatestatusres);
  ::aesm::message::Response_CheckUpdateStatusResponse* unsafe_arena_release_checkupdatestatusres();

  // optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
  bool has_selectattkeyidres() const;
  private:
  bool _internal_has_selectattkeyidres() const;
  public:
  void clear_selectattkeyidres();
  const ::aesm::message::Response_SelectAttKeyIDResponse& selectattkeyidres() const;
  ::aesm::message::Response_SelectAttKeyIDResponse* release_selectattkeyidres();
  ::aesm::message::Response_SelectAttKeyIDResponse* mutable_selectattkeyidres();
  void set_allocated_selectattkeyidres(::aesm::message::Response_SelectAttKeyIDResponse* selectattkeyidres);
  private:
  const ::aesm::message::Response_SelectAttKeyIDResponse& _internal_selectattkeyidres() const;
  ::aesm::message::Response_SelectAttKeyIDResponse* _internal_mutable_selectattkeyidres();
  public:
  void unsafe_arena_set_allocated_selectattkeyidres(
      ::aesm::message::Response_SelectAttKeyIDResponse* selectattkeyidres);
  ::aesm::message::Response_SelectAttKeyIDResponse* unsafe_arena_release_selectattkeyidres();

  // optional .aesm.message.Response.UnsupportedRequestResponse unsupportedRequestResponse = 20;
  bool has_unsupportedrequestresponse() const;
  private:
  bool _internal_has_unsupportedrequestresponse() const;
  public:
  void clear_unsupportedrequestresponse();
  const ::aesm::message::Response_UnsupportedRequestResponse& unsupportedrequestresponse() const;
  ::aesm::message::Response_UnsupportedRequestResponse* release_unsupportedrequestresponse();
  ::aesm::message::Response_UnsupportedRequestResponse* mutable_unsupportedrequestresponse();
  void set_allocated_unsupportedrequestresponse(::aesm::message::Response_UnsupportedRequestResponse* unsupportedrequestresponse);
  private:
  const ::aesm::message::Response_UnsupportedRequestResponse& _internal_unsupportedrequestresponse() const;
  ::aesm::message::Response_UnsupportedRequestResponse* _internal_mutable_unsupportedrequestresponse();
  public:
  void unsafe_arena_set_allocated_unsupportedrequestresponse(
      ::aesm::message::Response_UnsupportedRequestResponse* unsupportedrequestresponse);
  ::aesm::message::Response_UnsupportedRequestResponse* unsafe_arena_release_unsupportedrequestresponse();

  // optional .aesm.message.Response.GetSupportedAttKeyIDNumResponse getSupportedAttKeyIDNumRes = 21;
  bool has_getsupportedattkeyidnumres() const;
  private:
  bool _internal_has_getsupportedattkeyidnumres() const;
  public:
  void clear_getsupportedattkeyidnumres();
  const ::aesm::message::Response_GetSupportedAttKeyIDNumResponse& getsupportedattkeyidnumres() const;
  ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* release_getsupportedattkeyidnumres();
  ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* mutable_getsupportedattkeyidnumres();
  void set_allocated_getsupportedattkeyidnumres(::aesm::message::Response_GetSupportedAttKeyIDNumResponse* getsupportedattkeyidnumres);
  private:
  const ::aesm::message::Response_GetSupportedAttKeyIDNumResponse& _internal_getsupportedattkeyidnumres() const;
  ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* _internal_mutable_getsupportedattkeyidnumres();
  public:
  void unsafe_arena_set_allocated_getsupportedattkeyidnumres(
      ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* getsupportedattkeyidnumres);
  ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* unsafe_arena_release_getsupportedattkeyidnumres();

  // optional .aesm.message.Response.GetSupportedAttKeyIDsResponse getSupportedAttKeyIDsRes = 22;
  bool has_getsupportedattkeyidsres() const;
  private:
  bool _internal_has_getsupportedattkeyidsres() const;
  public:
  void clear_getsupportedattkeyidsres();
  const ::aesm::message::Response_GetSupportedAttKeyIDsResponse& getsupportedattkeyidsres() const;
  ::aesm::message::Response_GetSupportedAttKeyIDsResponse* release_getsupportedattkeyidsres();
  ::aesm::message::Response_GetSupportedAttKeyIDsResponse* mutable_getsupportedattkeyidsres();
  void set_allocated_getsupportedattkeyidsres(::aesm::message::Response_GetSupportedAttKeyIDsResponse* getsupportedattkeyidsres);
  private:
  const ::aesm::message::Response_GetSupportedAttKeyIDsResponse& _internal_getsupportedattkeyidsres() const;
  ::aesm::message::Response_GetSupportedAttKeyIDsResponse* _internal_mutable_getsupportedattkeyidsres();
  public:
  void unsafe_arena_set_allocated_getsupportedattkeyidsres(
      ::aesm::message::Response_GetSupportedAttKeyIDsResponse* getsupportedattkeyidsres);
  ::aesm::message::Response_GetSupportedAttKeyIDsResponse* unsafe_arena_release_getsupportedattkeyidsres();

  // @@protoc_insertion_point(class_scope:aesm.message.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::aesm::message::Response_InitQuoteResponse* initquoteres_;
  ::aesm::message::Response_GetQuoteResponse* getquoteres_;
  ::aesm::message::Response_GetLaunchTokenResponse* getlictokenres_;
  ::aesm::message::Response_ReportAttestationErrorResponse* reporterrres_;
  ::aesm::message::Response_GetWhiteListSizeResponse* getwhitelistsizeres_;
  ::aesm::message::Response_GetWhiteListResponse* getwhitelistres_;
  ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* sgxgetextendedepidgroupidres_;
  ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* sgxswitchextendedepidgroupres_;
  ::aesm::message::Response_SGXRegisterResponse* sgxregisterres_;
  ::aesm::message::Response_InitQuoteExResponse* initquoteexres_;
  ::aesm::message::Response_GetQuoteSizeExResponse* getquotesizeexres_;
  ::aesm::message::Response_GetQuoteExResponse* getquoteexres_;
  ::aesm::message::Response_CheckUpdateStatusResponse* checkupdatestatusres_;
  ::aesm::message::Response_SelectAttKeyIDResponse* selectattkeyidres_;
  ::aesm::message::Response_UnsupportedRequestResponse* unsupportedrequestresponse_;
  ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* getsupportedattkeyidnumres_;
  ::aesm::message::Response_GetSupportedAttKeyIDsResponse* getsupportedattkeyidsres_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request_InitQuoteRequest

// optional uint32 timeout = 9;
inline bool Request_InitQuoteRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_InitQuoteRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_InitQuoteRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_InitQuoteRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_InitQuoteRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.InitQuoteRequest.timeout)
  return _internal_timeout();
}
inline void Request_InitQuoteRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  timeout_ = value;
}
inline void Request_InitQuoteRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.InitQuoteRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetQuoteRequest

// required bytes report = 1;
inline bool Request_GetQuoteRequest::_internal_has_report() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_GetQuoteRequest::has_report() const {
  return _internal_has_report();
}
inline void Request_GetQuoteRequest::clear_report() {
  report_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_GetQuoteRequest::report() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.report)
  return _internal_report();
}
inline void Request_GetQuoteRequest::set_report(const std::string& value) {
  _internal_set_report(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.report)
}
inline std::string* Request_GetQuoteRequest::mutable_report() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteRequest.report)
  return _internal_mutable_report();
}
inline const std::string& Request_GetQuoteRequest::_internal_report() const {
  return report_.Get();
}
inline void Request_GetQuoteRequest::_internal_set_report(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetQuoteRequest::set_report(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  report_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.GetQuoteRequest.report)
}
inline void Request_GetQuoteRequest::set_report(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteRequest.report)
}
inline void Request_GetQuoteRequest::set_report(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteRequest.report)
}
inline std::string* Request_GetQuoteRequest::_internal_mutable_report() {
  _has_bits_[0] |= 0x00000001u;
  return report_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetQuoteRequest::release_report() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteRequest.report)
  if (!_internal_has_report()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return report_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetQuoteRequest::set_allocated_report(std::string* report) {
  if (report != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  report_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteRequest.report)
}
inline std::string* Request_GetQuoteRequest::unsafe_arena_release_report() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.GetQuoteRequest.report)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return report_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetQuoteRequest::unsafe_arena_set_allocated_report(
    std::string* report) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (report != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  report_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      report, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.GetQuoteRequest.report)
}

// required uint32 quote_type = 2;
inline bool Request_GetQuoteRequest::_internal_has_quote_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Request_GetQuoteRequest::has_quote_type() const {
  return _internal_has_quote_type();
}
inline void Request_GetQuoteRequest::clear_quote_type() {
  quote_type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteRequest::_internal_quote_type() const {
  return quote_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteRequest::quote_type() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.quote_type)
  return _internal_quote_type();
}
inline void Request_GetQuoteRequest::_internal_set_quote_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  quote_type_ = value;
}
inline void Request_GetQuoteRequest::set_quote_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quote_type(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.quote_type)
}

// required bytes spid = 3;
inline bool Request_GetQuoteRequest::_internal_has_spid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_GetQuoteRequest::has_spid() const {
  return _internal_has_spid();
}
inline void Request_GetQuoteRequest::clear_spid() {
  spid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Request_GetQuoteRequest::spid() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.spid)
  return _internal_spid();
}
inline void Request_GetQuoteRequest::set_spid(const std::string& value) {
  _internal_set_spid(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.spid)
}
inline std::string* Request_GetQuoteRequest::mutable_spid() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteRequest.spid)
  return _internal_mutable_spid();
}
inline const std::string& Request_GetQuoteRequest::_internal_spid() const {
  return spid_.Get();
}
inline void Request_GetQuoteRequest::_internal_set_spid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  spid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetQuoteRequest::set_spid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  spid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.GetQuoteRequest.spid)
}
inline void Request_GetQuoteRequest::set_spid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  spid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteRequest.spid)
}
inline void Request_GetQuoteRequest::set_spid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  spid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteRequest.spid)
}
inline std::string* Request_GetQuoteRequest::_internal_mutable_spid() {
  _has_bits_[0] |= 0x00000002u;
  return spid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetQuoteRequest::release_spid() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteRequest.spid)
  if (!_internal_has_spid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return spid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetQuoteRequest::set_allocated_spid(std::string* spid) {
  if (spid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  spid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteRequest.spid)
}
inline std::string* Request_GetQuoteRequest::unsafe_arena_release_spid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.GetQuoteRequest.spid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return spid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetQuoteRequest::unsafe_arena_set_allocated_spid(
    std::string* spid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (spid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  spid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      spid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.GetQuoteRequest.spid)
}

// optional bytes nonce = 4;
inline bool Request_GetQuoteRequest::_internal_has_nonce() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request_GetQuoteRequest::has_nonce() const {
  return _internal_has_nonce();
}
inline void Request_GetQuoteRequest::clear_nonce() {
  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Request_GetQuoteRequest::nonce() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.nonce)
  return _internal_nonce();
}
inline void Request_GetQuoteRequest::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.nonce)
}
inline std::string* Request_GetQuoteRequest::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteRequest.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& Request_GetQuoteRequest::_internal_nonce() const {
  return nonce_.Get();
}
inline void Request_GetQuoteRequest::_internal_set_nonce(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  nonce_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetQuoteRequest::set_nonce(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  nonce_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.GetQuoteRequest.nonce)
}
inline void Request_GetQuoteRequest::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  nonce_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteRequest.nonce)
}
inline void Request_GetQuoteRequest::set_nonce(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  nonce_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteRequest.nonce)
}
inline std::string* Request_GetQuoteRequest::_internal_mutable_nonce() {
  _has_bits_[0] |= 0x00000004u;
  return nonce_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetQuoteRequest::release_nonce() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteRequest.nonce)
  if (!_internal_has_nonce()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return nonce_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetQuoteRequest::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteRequest.nonce)
}
inline std::string* Request_GetQuoteRequest::unsafe_arena_release_nonce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.GetQuoteRequest.nonce)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return nonce_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetQuoteRequest::unsafe_arena_set_allocated_nonce(
    std::string* nonce) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nonce != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  nonce_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nonce, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.GetQuoteRequest.nonce)
}

// optional bytes sig_rl = 5;
inline bool Request_GetQuoteRequest::_internal_has_sig_rl() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request_GetQuoteRequest::has_sig_rl() const {
  return _internal_has_sig_rl();
}
inline void Request_GetQuoteRequest::clear_sig_rl() {
  sig_rl_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Request_GetQuoteRequest::sig_rl() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.sig_rl)
  return _internal_sig_rl();
}
inline void Request_GetQuoteRequest::set_sig_rl(const std::string& value) {
  _internal_set_sig_rl(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.sig_rl)
}
inline std::string* Request_GetQuoteRequest::mutable_sig_rl() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteRequest.sig_rl)
  return _internal_mutable_sig_rl();
}
inline const std::string& Request_GetQuoteRequest::_internal_sig_rl() const {
  return sig_rl_.Get();
}
inline void Request_GetQuoteRequest::_internal_set_sig_rl(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sig_rl_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetQuoteRequest::set_sig_rl(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  sig_rl_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.GetQuoteRequest.sig_rl)
}
inline void Request_GetQuoteRequest::set_sig_rl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  sig_rl_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteRequest.sig_rl)
}
inline void Request_GetQuoteRequest::set_sig_rl(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  sig_rl_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteRequest.sig_rl)
}
inline std::string* Request_GetQuoteRequest::_internal_mutable_sig_rl() {
  _has_bits_[0] |= 0x00000008u;
  return sig_rl_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetQuoteRequest::release_sig_rl() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteRequest.sig_rl)
  if (!_internal_has_sig_rl()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sig_rl_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetQuoteRequest::set_allocated_sig_rl(std::string* sig_rl) {
  if (sig_rl != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sig_rl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig_rl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteRequest.sig_rl)
}
inline std::string* Request_GetQuoteRequest::unsafe_arena_release_sig_rl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.GetQuoteRequest.sig_rl)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return sig_rl_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetQuoteRequest::unsafe_arena_set_allocated_sig_rl(
    std::string* sig_rl) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sig_rl != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sig_rl_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sig_rl, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.GetQuoteRequest.sig_rl)
}

// required uint32 buf_size = 6;
inline bool Request_GetQuoteRequest::_internal_has_buf_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Request_GetQuoteRequest::has_buf_size() const {
  return _internal_has_buf_size();
}
inline void Request_GetQuoteRequest::clear_buf_size() {
  buf_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteRequest::_internal_buf_size() const {
  return buf_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteRequest::buf_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.buf_size)
  return _internal_buf_size();
}
inline void Request_GetQuoteRequest::_internal_set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  buf_size_ = value;
}
inline void Request_GetQuoteRequest::set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buf_size(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.buf_size)
}

// optional bool qe_report = 7;
inline bool Request_GetQuoteRequest::_internal_has_qe_report() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Request_GetQuoteRequest::has_qe_report() const {
  return _internal_has_qe_report();
}
inline void Request_GetQuoteRequest::clear_qe_report() {
  qe_report_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Request_GetQuoteRequest::_internal_qe_report() const {
  return qe_report_;
}
inline bool Request_GetQuoteRequest::qe_report() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.qe_report)
  return _internal_qe_report();
}
inline void Request_GetQuoteRequest::_internal_set_qe_report(bool value) {
  _has_bits_[0] |= 0x00000040u;
  qe_report_ = value;
}
inline void Request_GetQuoteRequest::set_qe_report(bool value) {
  _internal_set_qe_report(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.qe_report)
}

// optional uint32 timeout = 9;
inline bool Request_GetQuoteRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Request_GetQuoteRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_GetQuoteRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.timeout)
  return _internal_timeout();
}
inline void Request_GetQuoteRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  timeout_ = value;
}
inline void Request_GetQuoteRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetLaunchTokenRequest

// required bytes mr_enclave = 1;
inline bool Request_GetLaunchTokenRequest::_internal_has_mr_enclave() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_GetLaunchTokenRequest::has_mr_enclave() const {
  return _internal_has_mr_enclave();
}
inline void Request_GetLaunchTokenRequest::clear_mr_enclave() {
  mr_enclave_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_GetLaunchTokenRequest::mr_enclave() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
  return _internal_mr_enclave();
}
inline void Request_GetLaunchTokenRequest::set_mr_enclave(const std::string& value) {
  _internal_set_mr_enclave(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
}
inline std::string* Request_GetLaunchTokenRequest::mutable_mr_enclave() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
  return _internal_mutable_mr_enclave();
}
inline const std::string& Request_GetLaunchTokenRequest::_internal_mr_enclave() const {
  return mr_enclave_.Get();
}
inline void Request_GetLaunchTokenRequest::_internal_set_mr_enclave(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mr_enclave_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetLaunchTokenRequest::set_mr_enclave(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mr_enclave_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
}
inline void Request_GetLaunchTokenRequest::set_mr_enclave(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mr_enclave_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
}
inline void Request_GetLaunchTokenRequest::set_mr_enclave(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mr_enclave_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
}
inline std::string* Request_GetLaunchTokenRequest::_internal_mutable_mr_enclave() {
  _has_bits_[0] |= 0x00000001u;
  return mr_enclave_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetLaunchTokenRequest::release_mr_enclave() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
  if (!_internal_has_mr_enclave()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mr_enclave_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetLaunchTokenRequest::set_allocated_mr_enclave(std::string* mr_enclave) {
  if (mr_enclave != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mr_enclave_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mr_enclave,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
}
inline std::string* Request_GetLaunchTokenRequest::unsafe_arena_release_mr_enclave() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mr_enclave_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetLaunchTokenRequest::unsafe_arena_set_allocated_mr_enclave(
    std::string* mr_enclave) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mr_enclave != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mr_enclave_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mr_enclave, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
}

// required bytes mr_signer = 2;
inline bool Request_GetLaunchTokenRequest::_internal_has_mr_signer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_GetLaunchTokenRequest::has_mr_signer() const {
  return _internal_has_mr_signer();
}
inline void Request_GetLaunchTokenRequest::clear_mr_signer() {
  mr_signer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Request_GetLaunchTokenRequest::mr_signer() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
  return _internal_mr_signer();
}
inline void Request_GetLaunchTokenRequest::set_mr_signer(const std::string& value) {
  _internal_set_mr_signer(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
}
inline std::string* Request_GetLaunchTokenRequest::mutable_mr_signer() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
  return _internal_mutable_mr_signer();
}
inline const std::string& Request_GetLaunchTokenRequest::_internal_mr_signer() const {
  return mr_signer_.Get();
}
inline void Request_GetLaunchTokenRequest::_internal_set_mr_signer(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mr_signer_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetLaunchTokenRequest::set_mr_signer(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mr_signer_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
}
inline void Request_GetLaunchTokenRequest::set_mr_signer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mr_signer_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
}
inline void Request_GetLaunchTokenRequest::set_mr_signer(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mr_signer_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
}
inline std::string* Request_GetLaunchTokenRequest::_internal_mutable_mr_signer() {
  _has_bits_[0] |= 0x00000002u;
  return mr_signer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetLaunchTokenRequest::release_mr_signer() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
  if (!_internal_has_mr_signer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mr_signer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetLaunchTokenRequest::set_allocated_mr_signer(std::string* mr_signer) {
  if (mr_signer != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mr_signer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mr_signer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
}
inline std::string* Request_GetLaunchTokenRequest::unsafe_arena_release_mr_signer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return mr_signer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetLaunchTokenRequest::unsafe_arena_set_allocated_mr_signer(
    std::string* mr_signer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mr_signer != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mr_signer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mr_signer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
}

// required bytes se_attributes = 3;
inline bool Request_GetLaunchTokenRequest::_internal_has_se_attributes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request_GetLaunchTokenRequest::has_se_attributes() const {
  return _internal_has_se_attributes();
}
inline void Request_GetLaunchTokenRequest::clear_se_attributes() {
  se_attributes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Request_GetLaunchTokenRequest::se_attributes() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
  return _internal_se_attributes();
}
inline void Request_GetLaunchTokenRequest::set_se_attributes(const std::string& value) {
  _internal_set_se_attributes(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
}
inline std::string* Request_GetLaunchTokenRequest::mutable_se_attributes() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
  return _internal_mutable_se_attributes();
}
inline const std::string& Request_GetLaunchTokenRequest::_internal_se_attributes() const {
  return se_attributes_.Get();
}
inline void Request_GetLaunchTokenRequest::_internal_set_se_attributes(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  se_attributes_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetLaunchTokenRequest::set_se_attributes(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  se_attributes_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
}
inline void Request_GetLaunchTokenRequest::set_se_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  se_attributes_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
}
inline void Request_GetLaunchTokenRequest::set_se_attributes(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  se_attributes_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
}
inline std::string* Request_GetLaunchTokenRequest::_internal_mutable_se_attributes() {
  _has_bits_[0] |= 0x00000004u;
  return se_attributes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetLaunchTokenRequest::release_se_attributes() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
  if (!_internal_has_se_attributes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return se_attributes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetLaunchTokenRequest::set_allocated_se_attributes(std::string* se_attributes) {
  if (se_attributes != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  se_attributes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), se_attributes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
}
inline std::string* Request_GetLaunchTokenRequest::unsafe_arena_release_se_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return se_attributes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetLaunchTokenRequest::unsafe_arena_set_allocated_se_attributes(
    std::string* se_attributes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (se_attributes != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  se_attributes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      se_attributes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
}

// optional uint32 timeout = 9;
inline bool Request_GetLaunchTokenRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request_GetLaunchTokenRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_GetLaunchTokenRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetLaunchTokenRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetLaunchTokenRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetLaunchTokenRequest.timeout)
  return _internal_timeout();
}
inline void Request_GetLaunchTokenRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  timeout_ = value;
}
inline void Request_GetLaunchTokenRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetLaunchTokenRequest.timeout)
}

// -------------------------------------------------------------------

// Request_ReportAttestationErrorRequest

// required bytes platform_info = 1;
inline bool Request_ReportAttestationErrorRequest::_internal_has_platform_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_ReportAttestationErrorRequest::has_platform_info() const {
  return _internal_has_platform_info();
}
inline void Request_ReportAttestationErrorRequest::clear_platform_info() {
  platform_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_ReportAttestationErrorRequest::platform_info() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
  return _internal_platform_info();
}
inline void Request_ReportAttestationErrorRequest::set_platform_info(const std::string& value) {
  _internal_set_platform_info(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
}
inline std::string* Request_ReportAttestationErrorRequest::mutable_platform_info() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
  return _internal_mutable_platform_info();
}
inline const std::string& Request_ReportAttestationErrorRequest::_internal_platform_info() const {
  return platform_info_.Get();
}
inline void Request_ReportAttestationErrorRequest::_internal_set_platform_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  platform_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_ReportAttestationErrorRequest::set_platform_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  platform_info_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
}
inline void Request_ReportAttestationErrorRequest::set_platform_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  platform_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
}
inline void Request_ReportAttestationErrorRequest::set_platform_info(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  platform_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
}
inline std::string* Request_ReportAttestationErrorRequest::_internal_mutable_platform_info() {
  _has_bits_[0] |= 0x00000001u;
  return platform_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_ReportAttestationErrorRequest::release_platform_info() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
  if (!_internal_has_platform_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return platform_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_ReportAttestationErrorRequest::set_allocated_platform_info(std::string* platform_info) {
  if (platform_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  platform_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
}
inline std::string* Request_ReportAttestationErrorRequest::unsafe_arena_release_platform_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return platform_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_ReportAttestationErrorRequest::unsafe_arena_set_allocated_platform_info(
    std::string* platform_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (platform_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  platform_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      platform_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
}

// required uint32 attestation_error_code = 2;
inline bool Request_ReportAttestationErrorRequest::_internal_has_attestation_error_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_ReportAttestationErrorRequest::has_attestation_error_code() const {
  return _internal_has_attestation_error_code();
}
inline void Request_ReportAttestationErrorRequest::clear_attestation_error_code() {
  attestation_error_code_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_ReportAttestationErrorRequest::_internal_attestation_error_code() const {
  return attestation_error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_ReportAttestationErrorRequest::attestation_error_code() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ReportAttestationErrorRequest.attestation_error_code)
  return _internal_attestation_error_code();
}
inline void Request_ReportAttestationErrorRequest::_internal_set_attestation_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  attestation_error_code_ = value;
}
inline void Request_ReportAttestationErrorRequest::set_attestation_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attestation_error_code(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.ReportAttestationErrorRequest.attestation_error_code)
}

// required uint32 update_info_size = 3;
inline bool Request_ReportAttestationErrorRequest::_internal_has_update_info_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request_ReportAttestationErrorRequest::has_update_info_size() const {
  return _internal_has_update_info_size();
}
inline void Request_ReportAttestationErrorRequest::clear_update_info_size() {
  update_info_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_ReportAttestationErrorRequest::_internal_update_info_size() const {
  return update_info_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_ReportAttestationErrorRequest::update_info_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ReportAttestationErrorRequest.update_info_size)
  return _internal_update_info_size();
}
inline void Request_ReportAttestationErrorRequest::_internal_set_update_info_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  update_info_size_ = value;
}
inline void Request_ReportAttestationErrorRequest::set_update_info_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_update_info_size(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.ReportAttestationErrorRequest.update_info_size)
}

// optional uint32 timeout = 9;
inline bool Request_ReportAttestationErrorRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request_ReportAttestationErrorRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_ReportAttestationErrorRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_ReportAttestationErrorRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_ReportAttestationErrorRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ReportAttestationErrorRequest.timeout)
  return _internal_timeout();
}
inline void Request_ReportAttestationErrorRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  timeout_ = value;
}
inline void Request_ReportAttestationErrorRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.ReportAttestationErrorRequest.timeout)
}

// -------------------------------------------------------------------

// Request_CheckUpdateStatusRequest

// optional bytes platform_info = 1;
inline bool Request_CheckUpdateStatusRequest::_internal_has_platform_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_CheckUpdateStatusRequest::has_platform_info() const {
  return _internal_has_platform_info();
}
inline void Request_CheckUpdateStatusRequest::clear_platform_info() {
  platform_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_CheckUpdateStatusRequest::platform_info() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.CheckUpdateStatusRequest.platform_info)
  return _internal_platform_info();
}
inline void Request_CheckUpdateStatusRequest::set_platform_info(const std::string& value) {
  _internal_set_platform_info(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.CheckUpdateStatusRequest.platform_info)
}
inline std::string* Request_CheckUpdateStatusRequest::mutable_platform_info() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.CheckUpdateStatusRequest.platform_info)
  return _internal_mutable_platform_info();
}
inline const std::string& Request_CheckUpdateStatusRequest::_internal_platform_info() const {
  return platform_info_.Get();
}
inline void Request_CheckUpdateStatusRequest::_internal_set_platform_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  platform_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_CheckUpdateStatusRequest::set_platform_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  platform_info_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.CheckUpdateStatusRequest.platform_info)
}
inline void Request_CheckUpdateStatusRequest::set_platform_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  platform_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.CheckUpdateStatusRequest.platform_info)
}
inline void Request_CheckUpdateStatusRequest::set_platform_info(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  platform_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.CheckUpdateStatusRequest.platform_info)
}
inline std::string* Request_CheckUpdateStatusRequest::_internal_mutable_platform_info() {
  _has_bits_[0] |= 0x00000001u;
  return platform_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_CheckUpdateStatusRequest::release_platform_info() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.CheckUpdateStatusRequest.platform_info)
  if (!_internal_has_platform_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return platform_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_CheckUpdateStatusRequest::set_allocated_platform_info(std::string* platform_info) {
  if (platform_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  platform_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.CheckUpdateStatusRequest.platform_info)
}
inline std::string* Request_CheckUpdateStatusRequest::unsafe_arena_release_platform_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.CheckUpdateStatusRequest.platform_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return platform_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_CheckUpdateStatusRequest::unsafe_arena_set_allocated_platform_info(
    std::string* platform_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (platform_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  platform_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      platform_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.CheckUpdateStatusRequest.platform_info)
}

// required uint32 update_info_size = 2;
inline bool Request_CheckUpdateStatusRequest::_internal_has_update_info_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_CheckUpdateStatusRequest::has_update_info_size() const {
  return _internal_has_update_info_size();
}
inline void Request_CheckUpdateStatusRequest::clear_update_info_size() {
  update_info_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_CheckUpdateStatusRequest::_internal_update_info_size() const {
  return update_info_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_CheckUpdateStatusRequest::update_info_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.CheckUpdateStatusRequest.update_info_size)
  return _internal_update_info_size();
}
inline void Request_CheckUpdateStatusRequest::_internal_set_update_info_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  update_info_size_ = value;
}
inline void Request_CheckUpdateStatusRequest::set_update_info_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_update_info_size(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.CheckUpdateStatusRequest.update_info_size)
}

// required uint32 config = 3;
inline bool Request_CheckUpdateStatusRequest::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request_CheckUpdateStatusRequest::has_config() const {
  return _internal_has_config();
}
inline void Request_CheckUpdateStatusRequest::clear_config() {
  config_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_CheckUpdateStatusRequest::_internal_config() const {
  return config_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_CheckUpdateStatusRequest::config() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.CheckUpdateStatusRequest.config)
  return _internal_config();
}
inline void Request_CheckUpdateStatusRequest::_internal_set_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  config_ = value;
}
inline void Request_CheckUpdateStatusRequest::set_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_config(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.CheckUpdateStatusRequest.config)
}

// optional uint32 timeout = 9;
inline bool Request_CheckUpdateStatusRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request_CheckUpdateStatusRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_CheckUpdateStatusRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_CheckUpdateStatusRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_CheckUpdateStatusRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.CheckUpdateStatusRequest.timeout)
  return _internal_timeout();
}
inline void Request_CheckUpdateStatusRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  timeout_ = value;
}
inline void Request_CheckUpdateStatusRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.CheckUpdateStatusRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetWhiteListSizeRequest

// optional uint32 timeout = 9;
inline bool Request_GetWhiteListSizeRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_GetWhiteListSizeRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_GetWhiteListSizeRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetWhiteListSizeRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetWhiteListSizeRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetWhiteListSizeRequest.timeout)
  return _internal_timeout();
}
inline void Request_GetWhiteListSizeRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  timeout_ = value;
}
inline void Request_GetWhiteListSizeRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetWhiteListSizeRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetWhiteListRequest

// optional uint32 white_list_size = 1;
inline bool Request_GetWhiteListRequest::_internal_has_white_list_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_GetWhiteListRequest::has_white_list_size() const {
  return _internal_has_white_list_size();
}
inline void Request_GetWhiteListRequest::clear_white_list_size() {
  white_list_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetWhiteListRequest::_internal_white_list_size() const {
  return white_list_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetWhiteListRequest::white_list_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetWhiteListRequest.white_list_size)
  return _internal_white_list_size();
}
inline void Request_GetWhiteListRequest::_internal_set_white_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  white_list_size_ = value;
}
inline void Request_GetWhiteListRequest::set_white_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_white_list_size(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetWhiteListRequest.white_list_size)
}

// optional uint32 timeout = 9;
inline bool Request_GetWhiteListRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_GetWhiteListRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_GetWhiteListRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetWhiteListRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetWhiteListRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetWhiteListRequest.timeout)
  return _internal_timeout();
}
inline void Request_GetWhiteListRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timeout_ = value;
}
inline void Request_GetWhiteListRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetWhiteListRequest.timeout)
}

// -------------------------------------------------------------------

// Request_SGXGetExtendedEpidGroupIdRequest

// optional uint32 timeout = 9;
inline bool Request_SGXGetExtendedEpidGroupIdRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_SGXGetExtendedEpidGroupIdRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_SGXGetExtendedEpidGroupIdRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SGXGetExtendedEpidGroupIdRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SGXGetExtendedEpidGroupIdRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest.timeout)
  return _internal_timeout();
}
inline void Request_SGXGetExtendedEpidGroupIdRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  timeout_ = value;
}
inline void Request_SGXGetExtendedEpidGroupIdRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest.timeout)
}

// -------------------------------------------------------------------

// Request_SGXSwitchExtendedEpidGroupRequest

// optional uint32 x_group_id = 1;
inline bool Request_SGXSwitchExtendedEpidGroupRequest::_internal_has_x_group_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_SGXSwitchExtendedEpidGroupRequest::has_x_group_id() const {
  return _internal_has_x_group_id();
}
inline void Request_SGXSwitchExtendedEpidGroupRequest::clear_x_group_id() {
  x_group_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SGXSwitchExtendedEpidGroupRequest::_internal_x_group_id() const {
  return x_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SGXSwitchExtendedEpidGroupRequest::x_group_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest.x_group_id)
  return _internal_x_group_id();
}
inline void Request_SGXSwitchExtendedEpidGroupRequest::_internal_set_x_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_group_id_ = value;
}
inline void Request_SGXSwitchExtendedEpidGroupRequest::set_x_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x_group_id(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest.x_group_id)
}

// optional uint32 timeout = 9;
inline bool Request_SGXSwitchExtendedEpidGroupRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_SGXSwitchExtendedEpidGroupRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_SGXSwitchExtendedEpidGroupRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SGXSwitchExtendedEpidGroupRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SGXSwitchExtendedEpidGroupRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest.timeout)
  return _internal_timeout();
}
inline void Request_SGXSwitchExtendedEpidGroupRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timeout_ = value;
}
inline void Request_SGXSwitchExtendedEpidGroupRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest.timeout)
}

// -------------------------------------------------------------------

// Request_SGXRegisterRequest

// required bytes buf = 1;
inline bool Request_SGXRegisterRequest::_internal_has_buf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_SGXRegisterRequest::has_buf() const {
  return _internal_has_buf();
}
inline void Request_SGXRegisterRequest::clear_buf() {
  buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_SGXRegisterRequest::buf() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXRegisterRequest.buf)
  return _internal_buf();
}
inline void Request_SGXRegisterRequest::set_buf(const std::string& value) {
  _internal_set_buf(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXRegisterRequest.buf)
}
inline std::string* Request_SGXRegisterRequest::mutable_buf() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.SGXRegisterRequest.buf)
  return _internal_mutable_buf();
}
inline const std::string& Request_SGXRegisterRequest::_internal_buf() const {
  return buf_.Get();
}
inline void Request_SGXRegisterRequest::_internal_set_buf(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buf_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_SGXRegisterRequest::set_buf(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buf_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.SGXRegisterRequest.buf)
}
inline void Request_SGXRegisterRequest::set_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buf_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.SGXRegisterRequest.buf)
}
inline void Request_SGXRegisterRequest::set_buf(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buf_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.SGXRegisterRequest.buf)
}
inline std::string* Request_SGXRegisterRequest::_internal_mutable_buf() {
  _has_bits_[0] |= 0x00000001u;
  return buf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_SGXRegisterRequest::release_buf() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.SGXRegisterRequest.buf)
  if (!_internal_has_buf()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buf_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_SGXRegisterRequest::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.SGXRegisterRequest.buf)
}
inline std::string* Request_SGXRegisterRequest::unsafe_arena_release_buf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.SGXRegisterRequest.buf)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return buf_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_SGXRegisterRequest::unsafe_arena_set_allocated_buf(
    std::string* buf) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (buf != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buf_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      buf, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.SGXRegisterRequest.buf)
}

// required uint32 data_type = 2;
inline bool Request_SGXRegisterRequest::_internal_has_data_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_SGXRegisterRequest::has_data_type() const {
  return _internal_has_data_type();
}
inline void Request_SGXRegisterRequest::clear_data_type() {
  data_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SGXRegisterRequest::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SGXRegisterRequest::data_type() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXRegisterRequest.data_type)
  return _internal_data_type();
}
inline void Request_SGXRegisterRequest::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  data_type_ = value;
}
inline void Request_SGXRegisterRequest::set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXRegisterRequest.data_type)
}

// optional uint32 timeout = 9;
inline bool Request_SGXRegisterRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request_SGXRegisterRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_SGXRegisterRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SGXRegisterRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SGXRegisterRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXRegisterRequest.timeout)
  return _internal_timeout();
}
inline void Request_SGXRegisterRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  timeout_ = value;
}
inline void Request_SGXRegisterRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXRegisterRequest.timeout)
}

// -------------------------------------------------------------------

// Request_InitQuoteExRequest

// optional bytes att_key_id = 1;
inline bool Request_InitQuoteExRequest::_internal_has_att_key_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_InitQuoteExRequest::has_att_key_id() const {
  return _internal_has_att_key_id();
}
inline void Request_InitQuoteExRequest::clear_att_key_id() {
  att_key_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_InitQuoteExRequest::att_key_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.InitQuoteExRequest.att_key_id)
  return _internal_att_key_id();
}
inline void Request_InitQuoteExRequest::set_att_key_id(const std::string& value) {
  _internal_set_att_key_id(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.InitQuoteExRequest.att_key_id)
}
inline std::string* Request_InitQuoteExRequest::mutable_att_key_id() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.InitQuoteExRequest.att_key_id)
  return _internal_mutable_att_key_id();
}
inline const std::string& Request_InitQuoteExRequest::_internal_att_key_id() const {
  return att_key_id_.Get();
}
inline void Request_InitQuoteExRequest::_internal_set_att_key_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_InitQuoteExRequest::set_att_key_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  att_key_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.InitQuoteExRequest.att_key_id)
}
inline void Request_InitQuoteExRequest::set_att_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.InitQuoteExRequest.att_key_id)
}
inline void Request_InitQuoteExRequest::set_att_key_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.InitQuoteExRequest.att_key_id)
}
inline std::string* Request_InitQuoteExRequest::_internal_mutable_att_key_id() {
  _has_bits_[0] |= 0x00000001u;
  return att_key_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_InitQuoteExRequest::release_att_key_id() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.InitQuoteExRequest.att_key_id)
  if (!_internal_has_att_key_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return att_key_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_InitQuoteExRequest::set_allocated_att_key_id(std::string* att_key_id) {
  if (att_key_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  att_key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), att_key_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.InitQuoteExRequest.att_key_id)
}
inline std::string* Request_InitQuoteExRequest::unsafe_arena_release_att_key_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.InitQuoteExRequest.att_key_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return att_key_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_InitQuoteExRequest::unsafe_arena_set_allocated_att_key_id(
    std::string* att_key_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (att_key_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  att_key_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      att_key_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.InitQuoteExRequest.att_key_id)
}

// required bool b_pub_key_id = 3;
inline bool Request_InitQuoteExRequest::_internal_has_b_pub_key_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request_InitQuoteExRequest::has_b_pub_key_id() const {
  return _internal_has_b_pub_key_id();
}
inline void Request_InitQuoteExRequest::clear_b_pub_key_id() {
  b_pub_key_id_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Request_InitQuoteExRequest::_internal_b_pub_key_id() const {
  return b_pub_key_id_;
}
inline bool Request_InitQuoteExRequest::b_pub_key_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.InitQuoteExRequest.b_pub_key_id)
  return _internal_b_pub_key_id();
}
inline void Request_InitQuoteExRequest::_internal_set_b_pub_key_id(bool value) {
  _has_bits_[0] |= 0x00000004u;
  b_pub_key_id_ = value;
}
inline void Request_InitQuoteExRequest::set_b_pub_key_id(bool value) {
  _internal_set_b_pub_key_id(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.InitQuoteExRequest.b_pub_key_id)
}

// optional uint64 buf_size = 4;
inline bool Request_InitQuoteExRequest::_internal_has_buf_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_InitQuoteExRequest::has_buf_size() const {
  return _internal_has_buf_size();
}
inline void Request_InitQuoteExRequest::clear_buf_size() {
  buf_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request_InitQuoteExRequest::_internal_buf_size() const {
  return buf_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request_InitQuoteExRequest::buf_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.InitQuoteExRequest.buf_size)
  return _internal_buf_size();
}
inline void Request_InitQuoteExRequest::_internal_set_buf_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  buf_size_ = value;
}
inline void Request_InitQuoteExRequest::set_buf_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_buf_size(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.InitQuoteExRequest.buf_size)
}

// optional uint32 timeout = 9;
inline bool Request_InitQuoteExRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request_InitQuoteExRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_InitQuoteExRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_InitQuoteExRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_InitQuoteExRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.InitQuoteExRequest.timeout)
  return _internal_timeout();
}
inline void Request_InitQuoteExRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  timeout_ = value;
}
inline void Request_InitQuoteExRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.InitQuoteExRequest.timeout)
}

// -------------------------------------------------------------------

// Request_SelectAttKeyIDRequest

// optional bytes att_key_id_list = 1;
inline bool Request_SelectAttKeyIDRequest::_internal_has_att_key_id_list() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_SelectAttKeyIDRequest::has_att_key_id_list() const {
  return _internal_has_att_key_id_list();
}
inline void Request_SelectAttKeyIDRequest::clear_att_key_id_list() {
  att_key_id_list_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_SelectAttKeyIDRequest::att_key_id_list() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SelectAttKeyIDRequest.att_key_id_list)
  return _internal_att_key_id_list();
}
inline void Request_SelectAttKeyIDRequest::set_att_key_id_list(const std::string& value) {
  _internal_set_att_key_id_list(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.SelectAttKeyIDRequest.att_key_id_list)
}
inline std::string* Request_SelectAttKeyIDRequest::mutable_att_key_id_list() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.SelectAttKeyIDRequest.att_key_id_list)
  return _internal_mutable_att_key_id_list();
}
inline const std::string& Request_SelectAttKeyIDRequest::_internal_att_key_id_list() const {
  return att_key_id_list_.Get();
}
inline void Request_SelectAttKeyIDRequest::_internal_set_att_key_id_list(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  att_key_id_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_SelectAttKeyIDRequest::set_att_key_id_list(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  att_key_id_list_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.SelectAttKeyIDRequest.att_key_id_list)
}
inline void Request_SelectAttKeyIDRequest::set_att_key_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  att_key_id_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.SelectAttKeyIDRequest.att_key_id_list)
}
inline void Request_SelectAttKeyIDRequest::set_att_key_id_list(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  att_key_id_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.SelectAttKeyIDRequest.att_key_id_list)
}
inline std::string* Request_SelectAttKeyIDRequest::_internal_mutable_att_key_id_list() {
  _has_bits_[0] |= 0x00000001u;
  return att_key_id_list_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_SelectAttKeyIDRequest::release_att_key_id_list() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.SelectAttKeyIDRequest.att_key_id_list)
  if (!_internal_has_att_key_id_list()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return att_key_id_list_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_SelectAttKeyIDRequest::set_allocated_att_key_id_list(std::string* att_key_id_list) {
  if (att_key_id_list != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  att_key_id_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), att_key_id_list,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.SelectAttKeyIDRequest.att_key_id_list)
}
inline std::string* Request_SelectAttKeyIDRequest::unsafe_arena_release_att_key_id_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.SelectAttKeyIDRequest.att_key_id_list)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return att_key_id_list_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_SelectAttKeyIDRequest::unsafe_arena_set_allocated_att_key_id_list(
    std::string* att_key_id_list) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (att_key_id_list != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  att_key_id_list_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      att_key_id_list, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.SelectAttKeyIDRequest.att_key_id_list)
}

// optional uint32 timeout = 2;
inline bool Request_SelectAttKeyIDRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_SelectAttKeyIDRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_SelectAttKeyIDRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SelectAttKeyIDRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_SelectAttKeyIDRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SelectAttKeyIDRequest.timeout)
  return _internal_timeout();
}
inline void Request_SelectAttKeyIDRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timeout_ = value;
}
inline void Request_SelectAttKeyIDRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.SelectAttKeyIDRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetQuoteSizeExRequest

// optional bytes att_key_id = 1;
inline bool Request_GetQuoteSizeExRequest::_internal_has_att_key_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_GetQuoteSizeExRequest::has_att_key_id() const {
  return _internal_has_att_key_id();
}
inline void Request_GetQuoteSizeExRequest::clear_att_key_id() {
  att_key_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_GetQuoteSizeExRequest::att_key_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteSizeExRequest.att_key_id)
  return _internal_att_key_id();
}
inline void Request_GetQuoteSizeExRequest::set_att_key_id(const std::string& value) {
  _internal_set_att_key_id(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteSizeExRequest.att_key_id)
}
inline std::string* Request_GetQuoteSizeExRequest::mutable_att_key_id() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteSizeExRequest.att_key_id)
  return _internal_mutable_att_key_id();
}
inline const std::string& Request_GetQuoteSizeExRequest::_internal_att_key_id() const {
  return att_key_id_.Get();
}
inline void Request_GetQuoteSizeExRequest::_internal_set_att_key_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetQuoteSizeExRequest::set_att_key_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  att_key_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.GetQuoteSizeExRequest.att_key_id)
}
inline void Request_GetQuoteSizeExRequest::set_att_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteSizeExRequest.att_key_id)
}
inline void Request_GetQuoteSizeExRequest::set_att_key_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteSizeExRequest.att_key_id)
}
inline std::string* Request_GetQuoteSizeExRequest::_internal_mutable_att_key_id() {
  _has_bits_[0] |= 0x00000001u;
  return att_key_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetQuoteSizeExRequest::release_att_key_id() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteSizeExRequest.att_key_id)
  if (!_internal_has_att_key_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return att_key_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetQuoteSizeExRequest::set_allocated_att_key_id(std::string* att_key_id) {
  if (att_key_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  att_key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), att_key_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteSizeExRequest.att_key_id)
}
inline std::string* Request_GetQuoteSizeExRequest::unsafe_arena_release_att_key_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.GetQuoteSizeExRequest.att_key_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return att_key_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetQuoteSizeExRequest::unsafe_arena_set_allocated_att_key_id(
    std::string* att_key_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (att_key_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  att_key_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      att_key_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.GetQuoteSizeExRequest.att_key_id)
}

// optional uint32 timeout = 9;
inline bool Request_GetQuoteSizeExRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_GetQuoteSizeExRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_GetQuoteSizeExRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteSizeExRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteSizeExRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteSizeExRequest.timeout)
  return _internal_timeout();
}
inline void Request_GetQuoteSizeExRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timeout_ = value;
}
inline void Request_GetQuoteSizeExRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteSizeExRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetQuoteExRequest

// required bytes report = 1;
inline bool Request_GetQuoteExRequest::_internal_has_report() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_GetQuoteExRequest::has_report() const {
  return _internal_has_report();
}
inline void Request_GetQuoteExRequest::clear_report() {
  report_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_GetQuoteExRequest::report() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteExRequest.report)
  return _internal_report();
}
inline void Request_GetQuoteExRequest::set_report(const std::string& value) {
  _internal_set_report(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteExRequest.report)
}
inline std::string* Request_GetQuoteExRequest::mutable_report() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteExRequest.report)
  return _internal_mutable_report();
}
inline const std::string& Request_GetQuoteExRequest::_internal_report() const {
  return report_.Get();
}
inline void Request_GetQuoteExRequest::_internal_set_report(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetQuoteExRequest::set_report(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  report_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.GetQuoteExRequest.report)
}
inline void Request_GetQuoteExRequest::set_report(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteExRequest.report)
}
inline void Request_GetQuoteExRequest::set_report(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteExRequest.report)
}
inline std::string* Request_GetQuoteExRequest::_internal_mutable_report() {
  _has_bits_[0] |= 0x00000001u;
  return report_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetQuoteExRequest::release_report() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteExRequest.report)
  if (!_internal_has_report()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return report_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetQuoteExRequest::set_allocated_report(std::string* report) {
  if (report != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  report_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteExRequest.report)
}
inline std::string* Request_GetQuoteExRequest::unsafe_arena_release_report() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.GetQuoteExRequest.report)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return report_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetQuoteExRequest::unsafe_arena_set_allocated_report(
    std::string* report) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (report != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  report_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      report, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.GetQuoteExRequest.report)
}

// optional bytes att_key_id = 2;
inline bool Request_GetQuoteExRequest::_internal_has_att_key_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_GetQuoteExRequest::has_att_key_id() const {
  return _internal_has_att_key_id();
}
inline void Request_GetQuoteExRequest::clear_att_key_id() {
  att_key_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Request_GetQuoteExRequest::att_key_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteExRequest.att_key_id)
  return _internal_att_key_id();
}
inline void Request_GetQuoteExRequest::set_att_key_id(const std::string& value) {
  _internal_set_att_key_id(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteExRequest.att_key_id)
}
inline std::string* Request_GetQuoteExRequest::mutable_att_key_id() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteExRequest.att_key_id)
  return _internal_mutable_att_key_id();
}
inline const std::string& Request_GetQuoteExRequest::_internal_att_key_id() const {
  return att_key_id_.Get();
}
inline void Request_GetQuoteExRequest::_internal_set_att_key_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetQuoteExRequest::set_att_key_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  att_key_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.GetQuoteExRequest.att_key_id)
}
inline void Request_GetQuoteExRequest::set_att_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteExRequest.att_key_id)
}
inline void Request_GetQuoteExRequest::set_att_key_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteExRequest.att_key_id)
}
inline std::string* Request_GetQuoteExRequest::_internal_mutable_att_key_id() {
  _has_bits_[0] |= 0x00000002u;
  return att_key_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetQuoteExRequest::release_att_key_id() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteExRequest.att_key_id)
  if (!_internal_has_att_key_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return att_key_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetQuoteExRequest::set_allocated_att_key_id(std::string* att_key_id) {
  if (att_key_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  att_key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), att_key_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteExRequest.att_key_id)
}
inline std::string* Request_GetQuoteExRequest::unsafe_arena_release_att_key_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.GetQuoteExRequest.att_key_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return att_key_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetQuoteExRequest::unsafe_arena_set_allocated_att_key_id(
    std::string* att_key_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (att_key_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  att_key_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      att_key_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.GetQuoteExRequest.att_key_id)
}

// optional bytes qe_report_info = 3;
inline bool Request_GetQuoteExRequest::_internal_has_qe_report_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request_GetQuoteExRequest::has_qe_report_info() const {
  return _internal_has_qe_report_info();
}
inline void Request_GetQuoteExRequest::clear_qe_report_info() {
  qe_report_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Request_GetQuoteExRequest::qe_report_info() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteExRequest.qe_report_info)
  return _internal_qe_report_info();
}
inline void Request_GetQuoteExRequest::set_qe_report_info(const std::string& value) {
  _internal_set_qe_report_info(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteExRequest.qe_report_info)
}
inline std::string* Request_GetQuoteExRequest::mutable_qe_report_info() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteExRequest.qe_report_info)
  return _internal_mutable_qe_report_info();
}
inline const std::string& Request_GetQuoteExRequest::_internal_qe_report_info() const {
  return qe_report_info_.Get();
}
inline void Request_GetQuoteExRequest::_internal_set_qe_report_info(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  qe_report_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetQuoteExRequest::set_qe_report_info(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  qe_report_info_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Request.GetQuoteExRequest.qe_report_info)
}
inline void Request_GetQuoteExRequest::set_qe_report_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  qe_report_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteExRequest.qe_report_info)
}
inline void Request_GetQuoteExRequest::set_qe_report_info(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  qe_report_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteExRequest.qe_report_info)
}
inline std::string* Request_GetQuoteExRequest::_internal_mutable_qe_report_info() {
  _has_bits_[0] |= 0x00000004u;
  return qe_report_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetQuoteExRequest::release_qe_report_info() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteExRequest.qe_report_info)
  if (!_internal_has_qe_report_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return qe_report_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetQuoteExRequest::set_allocated_qe_report_info(std::string* qe_report_info) {
  if (qe_report_info != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  qe_report_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qe_report_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteExRequest.qe_report_info)
}
inline std::string* Request_GetQuoteExRequest::unsafe_arena_release_qe_report_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Request.GetQuoteExRequest.qe_report_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return qe_report_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetQuoteExRequest::unsafe_arena_set_allocated_qe_report_info(
    std::string* qe_report_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (qe_report_info != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  qe_report_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      qe_report_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.GetQuoteExRequest.qe_report_info)
}

// required uint32 buf_size = 4;
inline bool Request_GetQuoteExRequest::_internal_has_buf_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request_GetQuoteExRequest::has_buf_size() const {
  return _internal_has_buf_size();
}
inline void Request_GetQuoteExRequest::clear_buf_size() {
  buf_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteExRequest::_internal_buf_size() const {
  return buf_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteExRequest::buf_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteExRequest.buf_size)
  return _internal_buf_size();
}
inline void Request_GetQuoteExRequest::_internal_set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  buf_size_ = value;
}
inline void Request_GetQuoteExRequest::set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buf_size(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteExRequest.buf_size)
}

// optional uint32 timeout = 9;
inline bool Request_GetQuoteExRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Request_GetQuoteExRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_GetQuoteExRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteExRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetQuoteExRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteExRequest.timeout)
  return _internal_timeout();
}
inline void Request_GetQuoteExRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  timeout_ = value;
}
inline void Request_GetQuoteExRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteExRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetSupportedAttKeyIDNumRequest

// optional uint32 timeout = 9;
inline bool Request_GetSupportedAttKeyIDNumRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_GetSupportedAttKeyIDNumRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_GetSupportedAttKeyIDNumRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetSupportedAttKeyIDNumRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetSupportedAttKeyIDNumRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetSupportedAttKeyIDNumRequest.timeout)
  return _internal_timeout();
}
inline void Request_GetSupportedAttKeyIDNumRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  timeout_ = value;
}
inline void Request_GetSupportedAttKeyIDNumRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetSupportedAttKeyIDNumRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetSupportedAttKeyIDsRequest

// required uint32 buf_size = 1;
inline bool Request_GetSupportedAttKeyIDsRequest::_internal_has_buf_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_GetSupportedAttKeyIDsRequest::has_buf_size() const {
  return _internal_has_buf_size();
}
inline void Request_GetSupportedAttKeyIDsRequest::clear_buf_size() {
  buf_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetSupportedAttKeyIDsRequest::_internal_buf_size() const {
  return buf_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetSupportedAttKeyIDsRequest::buf_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetSupportedAttKeyIDsRequest.buf_size)
  return _internal_buf_size();
}
inline void Request_GetSupportedAttKeyIDsRequest::_internal_set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  buf_size_ = value;
}
inline void Request_GetSupportedAttKeyIDsRequest::set_buf_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buf_size(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetSupportedAttKeyIDsRequest.buf_size)
}

// optional uint32 timeout = 9;
inline bool Request_GetSupportedAttKeyIDsRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_GetSupportedAttKeyIDsRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void Request_GetSupportedAttKeyIDsRequest::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetSupportedAttKeyIDsRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_GetSupportedAttKeyIDsRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetSupportedAttKeyIDsRequest.timeout)
  return _internal_timeout();
}
inline void Request_GetSupportedAttKeyIDsRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timeout_ = value;
}
inline void Request_GetSupportedAttKeyIDsRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetSupportedAttKeyIDsRequest.timeout)
}

// -------------------------------------------------------------------

// Request

// optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
inline bool Request::_internal_has_initquotereq() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || initquotereq_ != nullptr);
  return value;
}
inline bool Request::has_initquotereq() const {
  return _internal_has_initquotereq();
}
inline void Request::clear_initquotereq() {
  if (initquotereq_ != nullptr) initquotereq_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::aesm::message::Request_InitQuoteRequest& Request::_internal_initquotereq() const {
  const ::aesm::message::Request_InitQuoteRequest* p = initquotereq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_InitQuoteRequest*>(
      &::aesm::message::_Request_InitQuoteRequest_default_instance_);
}
inline const ::aesm::message::Request_InitQuoteRequest& Request::initquotereq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.initQuoteReq)
  return _internal_initquotereq();
}
inline void Request::unsafe_arena_set_allocated_initquotereq(
    ::aesm::message::Request_InitQuoteRequest* initquotereq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initquotereq_);
  }
  initquotereq_ = initquotereq;
  if (initquotereq) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.initQuoteReq)
}
inline ::aesm::message::Request_InitQuoteRequest* Request::release_initquotereq() {
  auto temp = unsafe_arena_release_initquotereq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_InitQuoteRequest* Request::unsafe_arena_release_initquotereq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.initQuoteReq)
  _has_bits_[0] &= ~0x00000001u;
  ::aesm::message::Request_InitQuoteRequest* temp = initquotereq_;
  initquotereq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_InitQuoteRequest* Request::_internal_mutable_initquotereq() {
  _has_bits_[0] |= 0x00000001u;
  if (initquotereq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_InitQuoteRequest>(GetArena());
    initquotereq_ = p;
  }
  return initquotereq_;
}
inline ::aesm::message::Request_InitQuoteRequest* Request::mutable_initquotereq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.initQuoteReq)
  return _internal_mutable_initquotereq();
}
inline void Request::set_allocated_initquotereq(::aesm::message::Request_InitQuoteRequest* initquotereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete initquotereq_;
  }
  if (initquotereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initquotereq);
    if (message_arena != submessage_arena) {
      initquotereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initquotereq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  initquotereq_ = initquotereq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.initQuoteReq)
}

// optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
inline bool Request::_internal_has_getquotereq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || getquotereq_ != nullptr);
  return value;
}
inline bool Request::has_getquotereq() const {
  return _internal_has_getquotereq();
}
inline void Request::clear_getquotereq() {
  if (getquotereq_ != nullptr) getquotereq_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::aesm::message::Request_GetQuoteRequest& Request::_internal_getquotereq() const {
  const ::aesm::message::Request_GetQuoteRequest* p = getquotereq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_GetQuoteRequest*>(
      &::aesm::message::_Request_GetQuoteRequest_default_instance_);
}
inline const ::aesm::message::Request_GetQuoteRequest& Request::getquotereq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getQuoteReq)
  return _internal_getquotereq();
}
inline void Request::unsafe_arena_set_allocated_getquotereq(
    ::aesm::message::Request_GetQuoteRequest* getquotereq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getquotereq_);
  }
  getquotereq_ = getquotereq;
  if (getquotereq) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.getQuoteReq)
}
inline ::aesm::message::Request_GetQuoteRequest* Request::release_getquotereq() {
  auto temp = unsafe_arena_release_getquotereq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_GetQuoteRequest* Request::unsafe_arena_release_getquotereq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getQuoteReq)
  _has_bits_[0] &= ~0x00000002u;
  ::aesm::message::Request_GetQuoteRequest* temp = getquotereq_;
  getquotereq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_GetQuoteRequest* Request::_internal_mutable_getquotereq() {
  _has_bits_[0] |= 0x00000002u;
  if (getquotereq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_GetQuoteRequest>(GetArena());
    getquotereq_ = p;
  }
  return getquotereq_;
}
inline ::aesm::message::Request_GetQuoteRequest* Request::mutable_getquotereq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getQuoteReq)
  return _internal_mutable_getquotereq();
}
inline void Request::set_allocated_getquotereq(::aesm::message::Request_GetQuoteRequest* getquotereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getquotereq_;
  }
  if (getquotereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getquotereq);
    if (message_arena != submessage_arena) {
      getquotereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getquotereq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  getquotereq_ = getquotereq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getQuoteReq)
}

// optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
inline bool Request::_internal_has_getlictokenreq() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || getlictokenreq_ != nullptr);
  return value;
}
inline bool Request::has_getlictokenreq() const {
  return _internal_has_getlictokenreq();
}
inline void Request::clear_getlictokenreq() {
  if (getlictokenreq_ != nullptr) getlictokenreq_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::aesm::message::Request_GetLaunchTokenRequest& Request::_internal_getlictokenreq() const {
  const ::aesm::message::Request_GetLaunchTokenRequest* p = getlictokenreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_GetLaunchTokenRequest*>(
      &::aesm::message::_Request_GetLaunchTokenRequest_default_instance_);
}
inline const ::aesm::message::Request_GetLaunchTokenRequest& Request::getlictokenreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getLicTokenReq)
  return _internal_getlictokenreq();
}
inline void Request::unsafe_arena_set_allocated_getlictokenreq(
    ::aesm::message::Request_GetLaunchTokenRequest* getlictokenreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getlictokenreq_);
  }
  getlictokenreq_ = getlictokenreq;
  if (getlictokenreq) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.getLicTokenReq)
}
inline ::aesm::message::Request_GetLaunchTokenRequest* Request::release_getlictokenreq() {
  auto temp = unsafe_arena_release_getlictokenreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_GetLaunchTokenRequest* Request::unsafe_arena_release_getlictokenreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getLicTokenReq)
  _has_bits_[0] &= ~0x00000004u;
  ::aesm::message::Request_GetLaunchTokenRequest* temp = getlictokenreq_;
  getlictokenreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_GetLaunchTokenRequest* Request::_internal_mutable_getlictokenreq() {
  _has_bits_[0] |= 0x00000004u;
  if (getlictokenreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_GetLaunchTokenRequest>(GetArena());
    getlictokenreq_ = p;
  }
  return getlictokenreq_;
}
inline ::aesm::message::Request_GetLaunchTokenRequest* Request::mutable_getlictokenreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getLicTokenReq)
  return _internal_mutable_getlictokenreq();
}
inline void Request::set_allocated_getlictokenreq(::aesm::message::Request_GetLaunchTokenRequest* getlictokenreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getlictokenreq_;
  }
  if (getlictokenreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getlictokenreq);
    if (message_arena != submessage_arena) {
      getlictokenreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getlictokenreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  getlictokenreq_ = getlictokenreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getLicTokenReq)
}

// optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
inline bool Request::_internal_has_reporterrreq() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || reporterrreq_ != nullptr);
  return value;
}
inline bool Request::has_reporterrreq() const {
  return _internal_has_reporterrreq();
}
inline void Request::clear_reporterrreq() {
  if (reporterrreq_ != nullptr) reporterrreq_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::aesm::message::Request_ReportAttestationErrorRequest& Request::_internal_reporterrreq() const {
  const ::aesm::message::Request_ReportAttestationErrorRequest* p = reporterrreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_ReportAttestationErrorRequest*>(
      &::aesm::message::_Request_ReportAttestationErrorRequest_default_instance_);
}
inline const ::aesm::message::Request_ReportAttestationErrorRequest& Request::reporterrreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.reportErrReq)
  return _internal_reporterrreq();
}
inline void Request::unsafe_arena_set_allocated_reporterrreq(
    ::aesm::message::Request_ReportAttestationErrorRequest* reporterrreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reporterrreq_);
  }
  reporterrreq_ = reporterrreq;
  if (reporterrreq) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.reportErrReq)
}
inline ::aesm::message::Request_ReportAttestationErrorRequest* Request::release_reporterrreq() {
  auto temp = unsafe_arena_release_reporterrreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_ReportAttestationErrorRequest* Request::unsafe_arena_release_reporterrreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.reportErrReq)
  _has_bits_[0] &= ~0x00000008u;
  ::aesm::message::Request_ReportAttestationErrorRequest* temp = reporterrreq_;
  reporterrreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_ReportAttestationErrorRequest* Request::_internal_mutable_reporterrreq() {
  _has_bits_[0] |= 0x00000008u;
  if (reporterrreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_ReportAttestationErrorRequest>(GetArena());
    reporterrreq_ = p;
  }
  return reporterrreq_;
}
inline ::aesm::message::Request_ReportAttestationErrorRequest* Request::mutable_reporterrreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.reportErrReq)
  return _internal_mutable_reporterrreq();
}
inline void Request::set_allocated_reporterrreq(::aesm::message::Request_ReportAttestationErrorRequest* reporterrreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reporterrreq_;
  }
  if (reporterrreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reporterrreq);
    if (message_arena != submessage_arena) {
      reporterrreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reporterrreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  reporterrreq_ = reporterrreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.reportErrReq)
}

// optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
inline bool Request::_internal_has_getwhitelistsizereq() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || getwhitelistsizereq_ != nullptr);
  return value;
}
inline bool Request::has_getwhitelistsizereq() const {
  return _internal_has_getwhitelistsizereq();
}
inline void Request::clear_getwhitelistsizereq() {
  if (getwhitelistsizereq_ != nullptr) getwhitelistsizereq_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::aesm::message::Request_GetWhiteListSizeRequest& Request::_internal_getwhitelistsizereq() const {
  const ::aesm::message::Request_GetWhiteListSizeRequest* p = getwhitelistsizereq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_GetWhiteListSizeRequest*>(
      &::aesm::message::_Request_GetWhiteListSizeRequest_default_instance_);
}
inline const ::aesm::message::Request_GetWhiteListSizeRequest& Request::getwhitelistsizereq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getWhiteListSizeReq)
  return _internal_getwhitelistsizereq();
}
inline void Request::unsafe_arena_set_allocated_getwhitelistsizereq(
    ::aesm::message::Request_GetWhiteListSizeRequest* getwhitelistsizereq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getwhitelistsizereq_);
  }
  getwhitelistsizereq_ = getwhitelistsizereq;
  if (getwhitelistsizereq) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.getWhiteListSizeReq)
}
inline ::aesm::message::Request_GetWhiteListSizeRequest* Request::release_getwhitelistsizereq() {
  auto temp = unsafe_arena_release_getwhitelistsizereq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_GetWhiteListSizeRequest* Request::unsafe_arena_release_getwhitelistsizereq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getWhiteListSizeReq)
  _has_bits_[0] &= ~0x00000010u;
  ::aesm::message::Request_GetWhiteListSizeRequest* temp = getwhitelistsizereq_;
  getwhitelistsizereq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_GetWhiteListSizeRequest* Request::_internal_mutable_getwhitelistsizereq() {
  _has_bits_[0] |= 0x00000010u;
  if (getwhitelistsizereq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_GetWhiteListSizeRequest>(GetArena());
    getwhitelistsizereq_ = p;
  }
  return getwhitelistsizereq_;
}
inline ::aesm::message::Request_GetWhiteListSizeRequest* Request::mutable_getwhitelistsizereq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getWhiteListSizeReq)
  return _internal_mutable_getwhitelistsizereq();
}
inline void Request::set_allocated_getwhitelistsizereq(::aesm::message::Request_GetWhiteListSizeRequest* getwhitelistsizereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getwhitelistsizereq_;
  }
  if (getwhitelistsizereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getwhitelistsizereq);
    if (message_arena != submessage_arena) {
      getwhitelistsizereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getwhitelistsizereq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  getwhitelistsizereq_ = getwhitelistsizereq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getWhiteListSizeReq)
}

// optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
inline bool Request::_internal_has_getwhitelistreq() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || getwhitelistreq_ != nullptr);
  return value;
}
inline bool Request::has_getwhitelistreq() const {
  return _internal_has_getwhitelistreq();
}
inline void Request::clear_getwhitelistreq() {
  if (getwhitelistreq_ != nullptr) getwhitelistreq_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::aesm::message::Request_GetWhiteListRequest& Request::_internal_getwhitelistreq() const {
  const ::aesm::message::Request_GetWhiteListRequest* p = getwhitelistreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_GetWhiteListRequest*>(
      &::aesm::message::_Request_GetWhiteListRequest_default_instance_);
}
inline const ::aesm::message::Request_GetWhiteListRequest& Request::getwhitelistreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getWhiteListReq)
  return _internal_getwhitelistreq();
}
inline void Request::unsafe_arena_set_allocated_getwhitelistreq(
    ::aesm::message::Request_GetWhiteListRequest* getwhitelistreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getwhitelistreq_);
  }
  getwhitelistreq_ = getwhitelistreq;
  if (getwhitelistreq) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.getWhiteListReq)
}
inline ::aesm::message::Request_GetWhiteListRequest* Request::release_getwhitelistreq() {
  auto temp = unsafe_arena_release_getwhitelistreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_GetWhiteListRequest* Request::unsafe_arena_release_getwhitelistreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getWhiteListReq)
  _has_bits_[0] &= ~0x00000020u;
  ::aesm::message::Request_GetWhiteListRequest* temp = getwhitelistreq_;
  getwhitelistreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_GetWhiteListRequest* Request::_internal_mutable_getwhitelistreq() {
  _has_bits_[0] |= 0x00000020u;
  if (getwhitelistreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_GetWhiteListRequest>(GetArena());
    getwhitelistreq_ = p;
  }
  return getwhitelistreq_;
}
inline ::aesm::message::Request_GetWhiteListRequest* Request::mutable_getwhitelistreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getWhiteListReq)
  return _internal_mutable_getwhitelistreq();
}
inline void Request::set_allocated_getwhitelistreq(::aesm::message::Request_GetWhiteListRequest* getwhitelistreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getwhitelistreq_;
  }
  if (getwhitelistreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getwhitelistreq);
    if (message_arena != submessage_arena) {
      getwhitelistreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getwhitelistreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  getwhitelistreq_ = getwhitelistreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getWhiteListReq)
}

// optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
inline bool Request::_internal_has_sgxgetextendedepidgroupidreq() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || sgxgetextendedepidgroupidreq_ != nullptr);
  return value;
}
inline bool Request::has_sgxgetextendedepidgroupidreq() const {
  return _internal_has_sgxgetextendedepidgroupidreq();
}
inline void Request::clear_sgxgetextendedepidgroupidreq() {
  if (sgxgetextendedepidgroupidreq_ != nullptr) sgxgetextendedepidgroupidreq_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest& Request::_internal_sgxgetextendedepidgroupidreq() const {
  const ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* p = sgxgetextendedepidgroupidreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest*>(
      &::aesm::message::_Request_SGXGetExtendedEpidGroupIdRequest_default_instance_);
}
inline const ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest& Request::sgxgetextendedepidgroupidreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.sgxGetExtendedEpidGroupIdReq)
  return _internal_sgxgetextendedepidgroupidreq();
}
inline void Request::unsafe_arena_set_allocated_sgxgetextendedepidgroupidreq(
    ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* sgxgetextendedepidgroupidreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sgxgetextendedepidgroupidreq_);
  }
  sgxgetextendedepidgroupidreq_ = sgxgetextendedepidgroupidreq;
  if (sgxgetextendedepidgroupidreq) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.sgxGetExtendedEpidGroupIdReq)
}
inline ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* Request::release_sgxgetextendedepidgroupidreq() {
  auto temp = unsafe_arena_release_sgxgetextendedepidgroupidreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* Request::unsafe_arena_release_sgxgetextendedepidgroupidreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.sgxGetExtendedEpidGroupIdReq)
  _has_bits_[0] &= ~0x00000040u;
  ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* temp = sgxgetextendedepidgroupidreq_;
  sgxgetextendedepidgroupidreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* Request::_internal_mutable_sgxgetextendedepidgroupidreq() {
  _has_bits_[0] |= 0x00000040u;
  if (sgxgetextendedepidgroupidreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest>(GetArena());
    sgxgetextendedepidgroupidreq_ = p;
  }
  return sgxgetextendedepidgroupidreq_;
}
inline ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* Request::mutable_sgxgetextendedepidgroupidreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.sgxGetExtendedEpidGroupIdReq)
  return _internal_mutable_sgxgetextendedepidgroupidreq();
}
inline void Request::set_allocated_sgxgetextendedepidgroupidreq(::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* sgxgetextendedepidgroupidreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sgxgetextendedepidgroupidreq_;
  }
  if (sgxgetextendedepidgroupidreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sgxgetextendedepidgroupidreq);
    if (message_arena != submessage_arena) {
      sgxgetextendedepidgroupidreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sgxgetextendedepidgroupidreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  sgxgetextendedepidgroupidreq_ = sgxgetextendedepidgroupidreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.sgxGetExtendedEpidGroupIdReq)
}

// optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
inline bool Request::_internal_has_sgxswitchextendedepidgroupreq() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || sgxswitchextendedepidgroupreq_ != nullptr);
  return value;
}
inline bool Request::has_sgxswitchextendedepidgroupreq() const {
  return _internal_has_sgxswitchextendedepidgroupreq();
}
inline void Request::clear_sgxswitchextendedepidgroupreq() {
  if (sgxswitchextendedepidgroupreq_ != nullptr) sgxswitchextendedepidgroupreq_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest& Request::_internal_sgxswitchextendedepidgroupreq() const {
  const ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* p = sgxswitchextendedepidgroupreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest*>(
      &::aesm::message::_Request_SGXSwitchExtendedEpidGroupRequest_default_instance_);
}
inline const ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest& Request::sgxswitchextendedepidgroupreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.sgxSwitchExtendedEpidGroupReq)
  return _internal_sgxswitchextendedepidgroupreq();
}
inline void Request::unsafe_arena_set_allocated_sgxswitchextendedepidgroupreq(
    ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* sgxswitchextendedepidgroupreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sgxswitchextendedepidgroupreq_);
  }
  sgxswitchextendedepidgroupreq_ = sgxswitchextendedepidgroupreq;
  if (sgxswitchextendedepidgroupreq) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.sgxSwitchExtendedEpidGroupReq)
}
inline ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* Request::release_sgxswitchextendedepidgroupreq() {
  auto temp = unsafe_arena_release_sgxswitchextendedepidgroupreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* Request::unsafe_arena_release_sgxswitchextendedepidgroupreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.sgxSwitchExtendedEpidGroupReq)
  _has_bits_[0] &= ~0x00000080u;
  ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* temp = sgxswitchextendedepidgroupreq_;
  sgxswitchextendedepidgroupreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* Request::_internal_mutable_sgxswitchextendedepidgroupreq() {
  _has_bits_[0] |= 0x00000080u;
  if (sgxswitchextendedepidgroupreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest>(GetArena());
    sgxswitchextendedepidgroupreq_ = p;
  }
  return sgxswitchextendedepidgroupreq_;
}
inline ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* Request::mutable_sgxswitchextendedepidgroupreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.sgxSwitchExtendedEpidGroupReq)
  return _internal_mutable_sgxswitchextendedepidgroupreq();
}
inline void Request::set_allocated_sgxswitchextendedepidgroupreq(::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* sgxswitchextendedepidgroupreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sgxswitchextendedepidgroupreq_;
  }
  if (sgxswitchextendedepidgroupreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sgxswitchextendedepidgroupreq);
    if (message_arena != submessage_arena) {
      sgxswitchextendedepidgroupreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sgxswitchextendedepidgroupreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sgxswitchextendedepidgroupreq_ = sgxswitchextendedepidgroupreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.sgxSwitchExtendedEpidGroupReq)
}

// optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
inline bool Request::_internal_has_sgxregisterreq() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || sgxregisterreq_ != nullptr);
  return value;
}
inline bool Request::has_sgxregisterreq() const {
  return _internal_has_sgxregisterreq();
}
inline void Request::clear_sgxregisterreq() {
  if (sgxregisterreq_ != nullptr) sgxregisterreq_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::aesm::message::Request_SGXRegisterRequest& Request::_internal_sgxregisterreq() const {
  const ::aesm::message::Request_SGXRegisterRequest* p = sgxregisterreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_SGXRegisterRequest*>(
      &::aesm::message::_Request_SGXRegisterRequest_default_instance_);
}
inline const ::aesm::message::Request_SGXRegisterRequest& Request::sgxregisterreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.sgxRegisterReq)
  return _internal_sgxregisterreq();
}
inline void Request::unsafe_arena_set_allocated_sgxregisterreq(
    ::aesm::message::Request_SGXRegisterRequest* sgxregisterreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sgxregisterreq_);
  }
  sgxregisterreq_ = sgxregisterreq;
  if (sgxregisterreq) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.sgxRegisterReq)
}
inline ::aesm::message::Request_SGXRegisterRequest* Request::release_sgxregisterreq() {
  auto temp = unsafe_arena_release_sgxregisterreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_SGXRegisterRequest* Request::unsafe_arena_release_sgxregisterreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.sgxRegisterReq)
  _has_bits_[0] &= ~0x00000100u;
  ::aesm::message::Request_SGXRegisterRequest* temp = sgxregisterreq_;
  sgxregisterreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_SGXRegisterRequest* Request::_internal_mutable_sgxregisterreq() {
  _has_bits_[0] |= 0x00000100u;
  if (sgxregisterreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_SGXRegisterRequest>(GetArena());
    sgxregisterreq_ = p;
  }
  return sgxregisterreq_;
}
inline ::aesm::message::Request_SGXRegisterRequest* Request::mutable_sgxregisterreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.sgxRegisterReq)
  return _internal_mutable_sgxregisterreq();
}
inline void Request::set_allocated_sgxregisterreq(::aesm::message::Request_SGXRegisterRequest* sgxregisterreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sgxregisterreq_;
  }
  if (sgxregisterreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sgxregisterreq);
    if (message_arena != submessage_arena) {
      sgxregisterreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sgxregisterreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  sgxregisterreq_ = sgxregisterreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.sgxRegisterReq)
}

// optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
inline bool Request::_internal_has_initquoteexreq() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || initquoteexreq_ != nullptr);
  return value;
}
inline bool Request::has_initquoteexreq() const {
  return _internal_has_initquoteexreq();
}
inline void Request::clear_initquoteexreq() {
  if (initquoteexreq_ != nullptr) initquoteexreq_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::aesm::message::Request_InitQuoteExRequest& Request::_internal_initquoteexreq() const {
  const ::aesm::message::Request_InitQuoteExRequest* p = initquoteexreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_InitQuoteExRequest*>(
      &::aesm::message::_Request_InitQuoteExRequest_default_instance_);
}
inline const ::aesm::message::Request_InitQuoteExRequest& Request::initquoteexreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.initQuoteExReq)
  return _internal_initquoteexreq();
}
inline void Request::unsafe_arena_set_allocated_initquoteexreq(
    ::aesm::message::Request_InitQuoteExRequest* initquoteexreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initquoteexreq_);
  }
  initquoteexreq_ = initquoteexreq;
  if (initquoteexreq) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.initQuoteExReq)
}
inline ::aesm::message::Request_InitQuoteExRequest* Request::release_initquoteexreq() {
  auto temp = unsafe_arena_release_initquoteexreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_InitQuoteExRequest* Request::unsafe_arena_release_initquoteexreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.initQuoteExReq)
  _has_bits_[0] &= ~0x00000200u;
  ::aesm::message::Request_InitQuoteExRequest* temp = initquoteexreq_;
  initquoteexreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_InitQuoteExRequest* Request::_internal_mutable_initquoteexreq() {
  _has_bits_[0] |= 0x00000200u;
  if (initquoteexreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_InitQuoteExRequest>(GetArena());
    initquoteexreq_ = p;
  }
  return initquoteexreq_;
}
inline ::aesm::message::Request_InitQuoteExRequest* Request::mutable_initquoteexreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.initQuoteExReq)
  return _internal_mutable_initquoteexreq();
}
inline void Request::set_allocated_initquoteexreq(::aesm::message::Request_InitQuoteExRequest* initquoteexreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete initquoteexreq_;
  }
  if (initquoteexreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initquoteexreq);
    if (message_arena != submessage_arena) {
      initquoteexreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initquoteexreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  initquoteexreq_ = initquoteexreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.initQuoteExReq)
}

// optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
inline bool Request::_internal_has_getquotesizeexreq() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || getquotesizeexreq_ != nullptr);
  return value;
}
inline bool Request::has_getquotesizeexreq() const {
  return _internal_has_getquotesizeexreq();
}
inline void Request::clear_getquotesizeexreq() {
  if (getquotesizeexreq_ != nullptr) getquotesizeexreq_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::aesm::message::Request_GetQuoteSizeExRequest& Request::_internal_getquotesizeexreq() const {
  const ::aesm::message::Request_GetQuoteSizeExRequest* p = getquotesizeexreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_GetQuoteSizeExRequest*>(
      &::aesm::message::_Request_GetQuoteSizeExRequest_default_instance_);
}
inline const ::aesm::message::Request_GetQuoteSizeExRequest& Request::getquotesizeexreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getQuoteSizeExReq)
  return _internal_getquotesizeexreq();
}
inline void Request::unsafe_arena_set_allocated_getquotesizeexreq(
    ::aesm::message::Request_GetQuoteSizeExRequest* getquotesizeexreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getquotesizeexreq_);
  }
  getquotesizeexreq_ = getquotesizeexreq;
  if (getquotesizeexreq) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.getQuoteSizeExReq)
}
inline ::aesm::message::Request_GetQuoteSizeExRequest* Request::release_getquotesizeexreq() {
  auto temp = unsafe_arena_release_getquotesizeexreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_GetQuoteSizeExRequest* Request::unsafe_arena_release_getquotesizeexreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getQuoteSizeExReq)
  _has_bits_[0] &= ~0x00000400u;
  ::aesm::message::Request_GetQuoteSizeExRequest* temp = getquotesizeexreq_;
  getquotesizeexreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_GetQuoteSizeExRequest* Request::_internal_mutable_getquotesizeexreq() {
  _has_bits_[0] |= 0x00000400u;
  if (getquotesizeexreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_GetQuoteSizeExRequest>(GetArena());
    getquotesizeexreq_ = p;
  }
  return getquotesizeexreq_;
}
inline ::aesm::message::Request_GetQuoteSizeExRequest* Request::mutable_getquotesizeexreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getQuoteSizeExReq)
  return _internal_mutable_getquotesizeexreq();
}
inline void Request::set_allocated_getquotesizeexreq(::aesm::message::Request_GetQuoteSizeExRequest* getquotesizeexreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getquotesizeexreq_;
  }
  if (getquotesizeexreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getquotesizeexreq);
    if (message_arena != submessage_arena) {
      getquotesizeexreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getquotesizeexreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  getquotesizeexreq_ = getquotesizeexreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getQuoteSizeExReq)
}

// optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
inline bool Request::_internal_has_getquoteexreq() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || getquoteexreq_ != nullptr);
  return value;
}
inline bool Request::has_getquoteexreq() const {
  return _internal_has_getquoteexreq();
}
inline void Request::clear_getquoteexreq() {
  if (getquoteexreq_ != nullptr) getquoteexreq_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::aesm::message::Request_GetQuoteExRequest& Request::_internal_getquoteexreq() const {
  const ::aesm::message::Request_GetQuoteExRequest* p = getquoteexreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_GetQuoteExRequest*>(
      &::aesm::message::_Request_GetQuoteExRequest_default_instance_);
}
inline const ::aesm::message::Request_GetQuoteExRequest& Request::getquoteexreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getQuoteExReq)
  return _internal_getquoteexreq();
}
inline void Request::unsafe_arena_set_allocated_getquoteexreq(
    ::aesm::message::Request_GetQuoteExRequest* getquoteexreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getquoteexreq_);
  }
  getquoteexreq_ = getquoteexreq;
  if (getquoteexreq) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.getQuoteExReq)
}
inline ::aesm::message::Request_GetQuoteExRequest* Request::release_getquoteexreq() {
  auto temp = unsafe_arena_release_getquoteexreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_GetQuoteExRequest* Request::unsafe_arena_release_getquoteexreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getQuoteExReq)
  _has_bits_[0] &= ~0x00000800u;
  ::aesm::message::Request_GetQuoteExRequest* temp = getquoteexreq_;
  getquoteexreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_GetQuoteExRequest* Request::_internal_mutable_getquoteexreq() {
  _has_bits_[0] |= 0x00000800u;
  if (getquoteexreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_GetQuoteExRequest>(GetArena());
    getquoteexreq_ = p;
  }
  return getquoteexreq_;
}
inline ::aesm::message::Request_GetQuoteExRequest* Request::mutable_getquoteexreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getQuoteExReq)
  return _internal_mutable_getquoteexreq();
}
inline void Request::set_allocated_getquoteexreq(::aesm::message::Request_GetQuoteExRequest* getquoteexreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getquoteexreq_;
  }
  if (getquoteexreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getquoteexreq);
    if (message_arena != submessage_arena) {
      getquoteexreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getquoteexreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  getquoteexreq_ = getquoteexreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getQuoteExReq)
}

// optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
inline bool Request::_internal_has_checkupdatestatusreq() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || checkupdatestatusreq_ != nullptr);
  return value;
}
inline bool Request::has_checkupdatestatusreq() const {
  return _internal_has_checkupdatestatusreq();
}
inline void Request::clear_checkupdatestatusreq() {
  if (checkupdatestatusreq_ != nullptr) checkupdatestatusreq_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::aesm::message::Request_CheckUpdateStatusRequest& Request::_internal_checkupdatestatusreq() const {
  const ::aesm::message::Request_CheckUpdateStatusRequest* p = checkupdatestatusreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_CheckUpdateStatusRequest*>(
      &::aesm::message::_Request_CheckUpdateStatusRequest_default_instance_);
}
inline const ::aesm::message::Request_CheckUpdateStatusRequest& Request::checkupdatestatusreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.checkUpdateStatusReq)
  return _internal_checkupdatestatusreq();
}
inline void Request::unsafe_arena_set_allocated_checkupdatestatusreq(
    ::aesm::message::Request_CheckUpdateStatusRequest* checkupdatestatusreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkupdatestatusreq_);
  }
  checkupdatestatusreq_ = checkupdatestatusreq;
  if (checkupdatestatusreq) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.checkUpdateStatusReq)
}
inline ::aesm::message::Request_CheckUpdateStatusRequest* Request::release_checkupdatestatusreq() {
  auto temp = unsafe_arena_release_checkupdatestatusreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_CheckUpdateStatusRequest* Request::unsafe_arena_release_checkupdatestatusreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.checkUpdateStatusReq)
  _has_bits_[0] &= ~0x00001000u;
  ::aesm::message::Request_CheckUpdateStatusRequest* temp = checkupdatestatusreq_;
  checkupdatestatusreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_CheckUpdateStatusRequest* Request::_internal_mutable_checkupdatestatusreq() {
  _has_bits_[0] |= 0x00001000u;
  if (checkupdatestatusreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_CheckUpdateStatusRequest>(GetArena());
    checkupdatestatusreq_ = p;
  }
  return checkupdatestatusreq_;
}
inline ::aesm::message::Request_CheckUpdateStatusRequest* Request::mutable_checkupdatestatusreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.checkUpdateStatusReq)
  return _internal_mutable_checkupdatestatusreq();
}
inline void Request::set_allocated_checkupdatestatusreq(::aesm::message::Request_CheckUpdateStatusRequest* checkupdatestatusreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete checkupdatestatusreq_;
  }
  if (checkupdatestatusreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkupdatestatusreq);
    if (message_arena != submessage_arena) {
      checkupdatestatusreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkupdatestatusreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  checkupdatestatusreq_ = checkupdatestatusreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.checkUpdateStatusReq)
}

// optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
inline bool Request::_internal_has_selectattkeyidreq() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || selectattkeyidreq_ != nullptr);
  return value;
}
inline bool Request::has_selectattkeyidreq() const {
  return _internal_has_selectattkeyidreq();
}
inline void Request::clear_selectattkeyidreq() {
  if (selectattkeyidreq_ != nullptr) selectattkeyidreq_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::aesm::message::Request_SelectAttKeyIDRequest& Request::_internal_selectattkeyidreq() const {
  const ::aesm::message::Request_SelectAttKeyIDRequest* p = selectattkeyidreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_SelectAttKeyIDRequest*>(
      &::aesm::message::_Request_SelectAttKeyIDRequest_default_instance_);
}
inline const ::aesm::message::Request_SelectAttKeyIDRequest& Request::selectattkeyidreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.selectAttKeyIDReq)
  return _internal_selectattkeyidreq();
}
inline void Request::unsafe_arena_set_allocated_selectattkeyidreq(
    ::aesm::message::Request_SelectAttKeyIDRequest* selectattkeyidreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectattkeyidreq_);
  }
  selectattkeyidreq_ = selectattkeyidreq;
  if (selectattkeyidreq) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.selectAttKeyIDReq)
}
inline ::aesm::message::Request_SelectAttKeyIDRequest* Request::release_selectattkeyidreq() {
  auto temp = unsafe_arena_release_selectattkeyidreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_SelectAttKeyIDRequest* Request::unsafe_arena_release_selectattkeyidreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.selectAttKeyIDReq)
  _has_bits_[0] &= ~0x00002000u;
  ::aesm::message::Request_SelectAttKeyIDRequest* temp = selectattkeyidreq_;
  selectattkeyidreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_SelectAttKeyIDRequest* Request::_internal_mutable_selectattkeyidreq() {
  _has_bits_[0] |= 0x00002000u;
  if (selectattkeyidreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_SelectAttKeyIDRequest>(GetArena());
    selectattkeyidreq_ = p;
  }
  return selectattkeyidreq_;
}
inline ::aesm::message::Request_SelectAttKeyIDRequest* Request::mutable_selectattkeyidreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.selectAttKeyIDReq)
  return _internal_mutable_selectattkeyidreq();
}
inline void Request::set_allocated_selectattkeyidreq(::aesm::message::Request_SelectAttKeyIDRequest* selectattkeyidreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectattkeyidreq_;
  }
  if (selectattkeyidreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectattkeyidreq);
    if (message_arena != submessage_arena) {
      selectattkeyidreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectattkeyidreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  selectattkeyidreq_ = selectattkeyidreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.selectAttKeyIDReq)
}

// optional .aesm.message.Request.GetSupportedAttKeyIDNumRequest getSupportedAttKeyIDNumReq = 21;
inline bool Request::_internal_has_getsupportedattkeyidnumreq() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || getsupportedattkeyidnumreq_ != nullptr);
  return value;
}
inline bool Request::has_getsupportedattkeyidnumreq() const {
  return _internal_has_getsupportedattkeyidnumreq();
}
inline void Request::clear_getsupportedattkeyidnumreq() {
  if (getsupportedattkeyidnumreq_ != nullptr) getsupportedattkeyidnumreq_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::aesm::message::Request_GetSupportedAttKeyIDNumRequest& Request::_internal_getsupportedattkeyidnumreq() const {
  const ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* p = getsupportedattkeyidnumreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_GetSupportedAttKeyIDNumRequest*>(
      &::aesm::message::_Request_GetSupportedAttKeyIDNumRequest_default_instance_);
}
inline const ::aesm::message::Request_GetSupportedAttKeyIDNumRequest& Request::getsupportedattkeyidnumreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getSupportedAttKeyIDNumReq)
  return _internal_getsupportedattkeyidnumreq();
}
inline void Request::unsafe_arena_set_allocated_getsupportedattkeyidnumreq(
    ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* getsupportedattkeyidnumreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getsupportedattkeyidnumreq_);
  }
  getsupportedattkeyidnumreq_ = getsupportedattkeyidnumreq;
  if (getsupportedattkeyidnumreq) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.getSupportedAttKeyIDNumReq)
}
inline ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* Request::release_getsupportedattkeyidnumreq() {
  auto temp = unsafe_arena_release_getsupportedattkeyidnumreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* Request::unsafe_arena_release_getsupportedattkeyidnumreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getSupportedAttKeyIDNumReq)
  _has_bits_[0] &= ~0x00004000u;
  ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* temp = getsupportedattkeyidnumreq_;
  getsupportedattkeyidnumreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* Request::_internal_mutable_getsupportedattkeyidnumreq() {
  _has_bits_[0] |= 0x00004000u;
  if (getsupportedattkeyidnumreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_GetSupportedAttKeyIDNumRequest>(GetArena());
    getsupportedattkeyidnumreq_ = p;
  }
  return getsupportedattkeyidnumreq_;
}
inline ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* Request::mutable_getsupportedattkeyidnumreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getSupportedAttKeyIDNumReq)
  return _internal_mutable_getsupportedattkeyidnumreq();
}
inline void Request::set_allocated_getsupportedattkeyidnumreq(::aesm::message::Request_GetSupportedAttKeyIDNumRequest* getsupportedattkeyidnumreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getsupportedattkeyidnumreq_;
  }
  if (getsupportedattkeyidnumreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getsupportedattkeyidnumreq);
    if (message_arena != submessage_arena) {
      getsupportedattkeyidnumreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getsupportedattkeyidnumreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  getsupportedattkeyidnumreq_ = getsupportedattkeyidnumreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getSupportedAttKeyIDNumReq)
}

// optional .aesm.message.Request.GetSupportedAttKeyIDsRequest getSupportedAttKeyIDsReq = 22;
inline bool Request::_internal_has_getsupportedattkeyidsreq() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || getsupportedattkeyidsreq_ != nullptr);
  return value;
}
inline bool Request::has_getsupportedattkeyidsreq() const {
  return _internal_has_getsupportedattkeyidsreq();
}
inline void Request::clear_getsupportedattkeyidsreq() {
  if (getsupportedattkeyidsreq_ != nullptr) getsupportedattkeyidsreq_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::aesm::message::Request_GetSupportedAttKeyIDsRequest& Request::_internal_getsupportedattkeyidsreq() const {
  const ::aesm::message::Request_GetSupportedAttKeyIDsRequest* p = getsupportedattkeyidsreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Request_GetSupportedAttKeyIDsRequest*>(
      &::aesm::message::_Request_GetSupportedAttKeyIDsRequest_default_instance_);
}
inline const ::aesm::message::Request_GetSupportedAttKeyIDsRequest& Request::getsupportedattkeyidsreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getSupportedAttKeyIDsReq)
  return _internal_getsupportedattkeyidsreq();
}
inline void Request::unsafe_arena_set_allocated_getsupportedattkeyidsreq(
    ::aesm::message::Request_GetSupportedAttKeyIDsRequest* getsupportedattkeyidsreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getsupportedattkeyidsreq_);
  }
  getsupportedattkeyidsreq_ = getsupportedattkeyidsreq;
  if (getsupportedattkeyidsreq) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Request.getSupportedAttKeyIDsReq)
}
inline ::aesm::message::Request_GetSupportedAttKeyIDsRequest* Request::release_getsupportedattkeyidsreq() {
  auto temp = unsafe_arena_release_getsupportedattkeyidsreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Request_GetSupportedAttKeyIDsRequest* Request::unsafe_arena_release_getsupportedattkeyidsreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getSupportedAttKeyIDsReq)
  _has_bits_[0] &= ~0x00008000u;
  ::aesm::message::Request_GetSupportedAttKeyIDsRequest* temp = getsupportedattkeyidsreq_;
  getsupportedattkeyidsreq_ = nullptr;
  return temp;
}
inline ::aesm::message::Request_GetSupportedAttKeyIDsRequest* Request::_internal_mutable_getsupportedattkeyidsreq() {
  _has_bits_[0] |= 0x00008000u;
  if (getsupportedattkeyidsreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Request_GetSupportedAttKeyIDsRequest>(GetArena());
    getsupportedattkeyidsreq_ = p;
  }
  return getsupportedattkeyidsreq_;
}
inline ::aesm::message::Request_GetSupportedAttKeyIDsRequest* Request::mutable_getsupportedattkeyidsreq() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getSupportedAttKeyIDsReq)
  return _internal_mutable_getsupportedattkeyidsreq();
}
inline void Request::set_allocated_getsupportedattkeyidsreq(::aesm::message::Request_GetSupportedAttKeyIDsRequest* getsupportedattkeyidsreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getsupportedattkeyidsreq_;
  }
  if (getsupportedattkeyidsreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getsupportedattkeyidsreq);
    if (message_arena != submessage_arena) {
      getsupportedattkeyidsreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getsupportedattkeyidsreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  getsupportedattkeyidsreq_ = getsupportedattkeyidsreq;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getSupportedAttKeyIDsReq)
}

// -------------------------------------------------------------------

// Response_InitQuoteResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_InitQuoteResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Response_InitQuoteResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_InitQuoteResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_InitQuoteResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_InitQuoteResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InitQuoteResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_InitQuoteResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  errorcode_ = value;
}
inline void Response_InitQuoteResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.InitQuoteResponse.errorCode)
}

// optional bytes targetInfo = 2;
inline bool Response_InitQuoteResponse::_internal_has_targetinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_InitQuoteResponse::has_targetinfo() const {
  return _internal_has_targetinfo();
}
inline void Response_InitQuoteResponse::clear_targetinfo() {
  targetinfo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response_InitQuoteResponse::targetinfo() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InitQuoteResponse.targetInfo)
  return _internal_targetinfo();
}
inline void Response_InitQuoteResponse::set_targetinfo(const std::string& value) {
  _internal_set_targetinfo(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.InitQuoteResponse.targetInfo)
}
inline std::string* Response_InitQuoteResponse::mutable_targetinfo() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.InitQuoteResponse.targetInfo)
  return _internal_mutable_targetinfo();
}
inline const std::string& Response_InitQuoteResponse::_internal_targetinfo() const {
  return targetinfo_.Get();
}
inline void Response_InitQuoteResponse::_internal_set_targetinfo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  targetinfo_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_InitQuoteResponse::set_targetinfo(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  targetinfo_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.InitQuoteResponse.targetInfo)
}
inline void Response_InitQuoteResponse::set_targetinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  targetinfo_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.InitQuoteResponse.targetInfo)
}
inline void Response_InitQuoteResponse::set_targetinfo(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  targetinfo_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.InitQuoteResponse.targetInfo)
}
inline std::string* Response_InitQuoteResponse::_internal_mutable_targetinfo() {
  _has_bits_[0] |= 0x00000001u;
  return targetinfo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_InitQuoteResponse::release_targetinfo() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.InitQuoteResponse.targetInfo)
  if (!_internal_has_targetinfo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return targetinfo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_InitQuoteResponse::set_allocated_targetinfo(std::string* targetinfo) {
  if (targetinfo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  targetinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetinfo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.InitQuoteResponse.targetInfo)
}
inline std::string* Response_InitQuoteResponse::unsafe_arena_release_targetinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.InitQuoteResponse.targetInfo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return targetinfo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_InitQuoteResponse::unsafe_arena_set_allocated_targetinfo(
    std::string* targetinfo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (targetinfo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  targetinfo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      targetinfo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.InitQuoteResponse.targetInfo)
}

// optional bytes gid = 3;
inline bool Response_InitQuoteResponse::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_InitQuoteResponse::has_gid() const {
  return _internal_has_gid();
}
inline void Response_InitQuoteResponse::clear_gid() {
  gid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Response_InitQuoteResponse::gid() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InitQuoteResponse.gid)
  return _internal_gid();
}
inline void Response_InitQuoteResponse::set_gid(const std::string& value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.InitQuoteResponse.gid)
}
inline std::string* Response_InitQuoteResponse::mutable_gid() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.InitQuoteResponse.gid)
  return _internal_mutable_gid();
}
inline const std::string& Response_InitQuoteResponse::_internal_gid() const {
  return gid_.Get();
}
inline void Response_InitQuoteResponse::_internal_set_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_InitQuoteResponse::set_gid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  gid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.InitQuoteResponse.gid)
}
inline void Response_InitQuoteResponse::set_gid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  gid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.InitQuoteResponse.gid)
}
inline void Response_InitQuoteResponse::set_gid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  gid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.InitQuoteResponse.gid)
}
inline std::string* Response_InitQuoteResponse::_internal_mutable_gid() {
  _has_bits_[0] |= 0x00000002u;
  return gid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_InitQuoteResponse::release_gid() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.InitQuoteResponse.gid)
  if (!_internal_has_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return gid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_InitQuoteResponse::set_allocated_gid(std::string* gid) {
  if (gid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.InitQuoteResponse.gid)
}
inline std::string* Response_InitQuoteResponse::unsafe_arena_release_gid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.InitQuoteResponse.gid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return gid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_InitQuoteResponse::unsafe_arena_set_allocated_gid(
    std::string* gid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.InitQuoteResponse.gid)
}

// -------------------------------------------------------------------

// Response_GetQuoteResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_GetQuoteResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Response_GetQuoteResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_GetQuoteResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetQuoteResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetQuoteResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetQuoteResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_GetQuoteResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  errorcode_ = value;
}
inline void Response_GetQuoteResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetQuoteResponse.errorCode)
}

// optional bytes quote = 2;
inline bool Response_GetQuoteResponse::_internal_has_quote() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_GetQuoteResponse::has_quote() const {
  return _internal_has_quote();
}
inline void Response_GetQuoteResponse::clear_quote() {
  quote_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response_GetQuoteResponse::quote() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetQuoteResponse.quote)
  return _internal_quote();
}
inline void Response_GetQuoteResponse::set_quote(const std::string& value) {
  _internal_set_quote(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetQuoteResponse.quote)
}
inline std::string* Response_GetQuoteResponse::mutable_quote() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.GetQuoteResponse.quote)
  return _internal_mutable_quote();
}
inline const std::string& Response_GetQuoteResponse::_internal_quote() const {
  return quote_.Get();
}
inline void Response_GetQuoteResponse::_internal_set_quote(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  quote_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_GetQuoteResponse::set_quote(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  quote_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.GetQuoteResponse.quote)
}
inline void Response_GetQuoteResponse::set_quote(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  quote_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.GetQuoteResponse.quote)
}
inline void Response_GetQuoteResponse::set_quote(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  quote_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.GetQuoteResponse.quote)
}
inline std::string* Response_GetQuoteResponse::_internal_mutable_quote() {
  _has_bits_[0] |= 0x00000001u;
  return quote_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_GetQuoteResponse::release_quote() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.GetQuoteResponse.quote)
  if (!_internal_has_quote()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return quote_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_GetQuoteResponse::set_allocated_quote(std::string* quote) {
  if (quote != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  quote_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quote,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.GetQuoteResponse.quote)
}
inline std::string* Response_GetQuoteResponse::unsafe_arena_release_quote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.GetQuoteResponse.quote)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return quote_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_GetQuoteResponse::unsafe_arena_set_allocated_quote(
    std::string* quote) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (quote != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  quote_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      quote, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.GetQuoteResponse.quote)
}

// optional bytes qe_report = 3;
inline bool Response_GetQuoteResponse::_internal_has_qe_report() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_GetQuoteResponse::has_qe_report() const {
  return _internal_has_qe_report();
}
inline void Response_GetQuoteResponse::clear_qe_report() {
  qe_report_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Response_GetQuoteResponse::qe_report() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetQuoteResponse.qe_report)
  return _internal_qe_report();
}
inline void Response_GetQuoteResponse::set_qe_report(const std::string& value) {
  _internal_set_qe_report(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetQuoteResponse.qe_report)
}
inline std::string* Response_GetQuoteResponse::mutable_qe_report() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.GetQuoteResponse.qe_report)
  return _internal_mutable_qe_report();
}
inline const std::string& Response_GetQuoteResponse::_internal_qe_report() const {
  return qe_report_.Get();
}
inline void Response_GetQuoteResponse::_internal_set_qe_report(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  qe_report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_GetQuoteResponse::set_qe_report(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  qe_report_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.GetQuoteResponse.qe_report)
}
inline void Response_GetQuoteResponse::set_qe_report(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  qe_report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.GetQuoteResponse.qe_report)
}
inline void Response_GetQuoteResponse::set_qe_report(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  qe_report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.GetQuoteResponse.qe_report)
}
inline std::string* Response_GetQuoteResponse::_internal_mutable_qe_report() {
  _has_bits_[0] |= 0x00000002u;
  return qe_report_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_GetQuoteResponse::release_qe_report() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.GetQuoteResponse.qe_report)
  if (!_internal_has_qe_report()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return qe_report_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_GetQuoteResponse::set_allocated_qe_report(std::string* qe_report) {
  if (qe_report != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  qe_report_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qe_report,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.GetQuoteResponse.qe_report)
}
inline std::string* Response_GetQuoteResponse::unsafe_arena_release_qe_report() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.GetQuoteResponse.qe_report)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return qe_report_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_GetQuoteResponse::unsafe_arena_set_allocated_qe_report(
    std::string* qe_report) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (qe_report != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  qe_report_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      qe_report, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.GetQuoteResponse.qe_report)
}

// -------------------------------------------------------------------

// Response_GetLaunchTokenResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_GetLaunchTokenResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_GetLaunchTokenResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_GetLaunchTokenResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetLaunchTokenResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetLaunchTokenResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetLaunchTokenResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_GetLaunchTokenResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errorcode_ = value;
}
inline void Response_GetLaunchTokenResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetLaunchTokenResponse.errorCode)
}

// optional bytes token = 2;
inline bool Response_GetLaunchTokenResponse::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_GetLaunchTokenResponse::has_token() const {
  return _internal_has_token();
}
inline void Response_GetLaunchTokenResponse::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response_GetLaunchTokenResponse::token() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetLaunchTokenResponse.token)
  return _internal_token();
}
inline void Response_GetLaunchTokenResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetLaunchTokenResponse.token)
}
inline std::string* Response_GetLaunchTokenResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.GetLaunchTokenResponse.token)
  return _internal_mutable_token();
}
inline const std::string& Response_GetLaunchTokenResponse::_internal_token() const {
  return token_.Get();
}
inline void Response_GetLaunchTokenResponse::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_GetLaunchTokenResponse::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.GetLaunchTokenResponse.token)
}
inline void Response_GetLaunchTokenResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.GetLaunchTokenResponse.token)
}
inline void Response_GetLaunchTokenResponse::set_token(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.GetLaunchTokenResponse.token)
}
inline std::string* Response_GetLaunchTokenResponse::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_GetLaunchTokenResponse::release_token() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.GetLaunchTokenResponse.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_GetLaunchTokenResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.GetLaunchTokenResponse.token)
}
inline std::string* Response_GetLaunchTokenResponse::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.GetLaunchTokenResponse.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_GetLaunchTokenResponse::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.GetLaunchTokenResponse.token)
}

// -------------------------------------------------------------------

// Response_ReportAttestationErrorResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_ReportAttestationErrorResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_ReportAttestationErrorResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_ReportAttestationErrorResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_ReportAttestationErrorResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_ReportAttestationErrorResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.ReportAttestationErrorResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_ReportAttestationErrorResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errorcode_ = value;
}
inline void Response_ReportAttestationErrorResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.ReportAttestationErrorResponse.errorCode)
}

// optional bytes platform_update_info = 2;
inline bool Response_ReportAttestationErrorResponse::_internal_has_platform_update_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_ReportAttestationErrorResponse::has_platform_update_info() const {
  return _internal_has_platform_update_info();
}
inline void Response_ReportAttestationErrorResponse::clear_platform_update_info() {
  platform_update_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response_ReportAttestationErrorResponse::platform_update_info() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
  return _internal_platform_update_info();
}
inline void Response_ReportAttestationErrorResponse::set_platform_update_info(const std::string& value) {
  _internal_set_platform_update_info(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
}
inline std::string* Response_ReportAttestationErrorResponse::mutable_platform_update_info() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
  return _internal_mutable_platform_update_info();
}
inline const std::string& Response_ReportAttestationErrorResponse::_internal_platform_update_info() const {
  return platform_update_info_.Get();
}
inline void Response_ReportAttestationErrorResponse::_internal_set_platform_update_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  platform_update_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_ReportAttestationErrorResponse::set_platform_update_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  platform_update_info_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
}
inline void Response_ReportAttestationErrorResponse::set_platform_update_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  platform_update_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
}
inline void Response_ReportAttestationErrorResponse::set_platform_update_info(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  platform_update_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
}
inline std::string* Response_ReportAttestationErrorResponse::_internal_mutable_platform_update_info() {
  _has_bits_[0] |= 0x00000001u;
  return platform_update_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_ReportAttestationErrorResponse::release_platform_update_info() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
  if (!_internal_has_platform_update_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return platform_update_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_ReportAttestationErrorResponse::set_allocated_platform_update_info(std::string* platform_update_info) {
  if (platform_update_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  platform_update_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform_update_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
}
inline std::string* Response_ReportAttestationErrorResponse::unsafe_arena_release_platform_update_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return platform_update_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_ReportAttestationErrorResponse::unsafe_arena_set_allocated_platform_update_info(
    std::string* platform_update_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (platform_update_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  platform_update_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      platform_update_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
}

// -------------------------------------------------------------------

// Response_CheckUpdateStatusResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_CheckUpdateStatusResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Response_CheckUpdateStatusResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_CheckUpdateStatusResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_CheckUpdateStatusResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_CheckUpdateStatusResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.CheckUpdateStatusResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_CheckUpdateStatusResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  errorcode_ = value;
}
inline void Response_CheckUpdateStatusResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.CheckUpdateStatusResponse.errorCode)
}

// optional bytes platform_update_info = 2;
inline bool Response_CheckUpdateStatusResponse::_internal_has_platform_update_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_CheckUpdateStatusResponse::has_platform_update_info() const {
  return _internal_has_platform_update_info();
}
inline void Response_CheckUpdateStatusResponse::clear_platform_update_info() {
  platform_update_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response_CheckUpdateStatusResponse::platform_update_info() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.CheckUpdateStatusResponse.platform_update_info)
  return _internal_platform_update_info();
}
inline void Response_CheckUpdateStatusResponse::set_platform_update_info(const std::string& value) {
  _internal_set_platform_update_info(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.CheckUpdateStatusResponse.platform_update_info)
}
inline std::string* Response_CheckUpdateStatusResponse::mutable_platform_update_info() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.CheckUpdateStatusResponse.platform_update_info)
  return _internal_mutable_platform_update_info();
}
inline const std::string& Response_CheckUpdateStatusResponse::_internal_platform_update_info() const {
  return platform_update_info_.Get();
}
inline void Response_CheckUpdateStatusResponse::_internal_set_platform_update_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  platform_update_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_CheckUpdateStatusResponse::set_platform_update_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  platform_update_info_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.CheckUpdateStatusResponse.platform_update_info)
}
inline void Response_CheckUpdateStatusResponse::set_platform_update_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  platform_update_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.CheckUpdateStatusResponse.platform_update_info)
}
inline void Response_CheckUpdateStatusResponse::set_platform_update_info(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  platform_update_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.CheckUpdateStatusResponse.platform_update_info)
}
inline std::string* Response_CheckUpdateStatusResponse::_internal_mutable_platform_update_info() {
  _has_bits_[0] |= 0x00000001u;
  return platform_update_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_CheckUpdateStatusResponse::release_platform_update_info() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.CheckUpdateStatusResponse.platform_update_info)
  if (!_internal_has_platform_update_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return platform_update_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_CheckUpdateStatusResponse::set_allocated_platform_update_info(std::string* platform_update_info) {
  if (platform_update_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  platform_update_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform_update_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.CheckUpdateStatusResponse.platform_update_info)
}
inline std::string* Response_CheckUpdateStatusResponse::unsafe_arena_release_platform_update_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.CheckUpdateStatusResponse.platform_update_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return platform_update_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_CheckUpdateStatusResponse::unsafe_arena_set_allocated_platform_update_info(
    std::string* platform_update_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (platform_update_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  platform_update_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      platform_update_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.CheckUpdateStatusResponse.platform_update_info)
}

// optional uint32 status = 3;
inline bool Response_CheckUpdateStatusResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_CheckUpdateStatusResponse::has_status() const {
  return _internal_has_status();
}
inline void Response_CheckUpdateStatusResponse::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_CheckUpdateStatusResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_CheckUpdateStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.CheckUpdateStatusResponse.status)
  return _internal_status();
}
inline void Response_CheckUpdateStatusResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void Response_CheckUpdateStatusResponse::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.CheckUpdateStatusResponse.status)
}

// -------------------------------------------------------------------

// Response_GetWhiteListSizeResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_GetWhiteListSizeResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_GetWhiteListSizeResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_GetWhiteListSizeResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetWhiteListSizeResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetWhiteListSizeResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetWhiteListSizeResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_GetWhiteListSizeResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errorcode_ = value;
}
inline void Response_GetWhiteListSizeResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetWhiteListSizeResponse.errorCode)
}

// optional uint32 white_list_size = 2;
inline bool Response_GetWhiteListSizeResponse::_internal_has_white_list_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_GetWhiteListSizeResponse::has_white_list_size() const {
  return _internal_has_white_list_size();
}
inline void Response_GetWhiteListSizeResponse::clear_white_list_size() {
  white_list_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetWhiteListSizeResponse::_internal_white_list_size() const {
  return white_list_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetWhiteListSizeResponse::white_list_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetWhiteListSizeResponse.white_list_size)
  return _internal_white_list_size();
}
inline void Response_GetWhiteListSizeResponse::_internal_set_white_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  white_list_size_ = value;
}
inline void Response_GetWhiteListSizeResponse::set_white_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_white_list_size(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetWhiteListSizeResponse.white_list_size)
}

// -------------------------------------------------------------------

// Response_GetWhiteListResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_GetWhiteListResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_GetWhiteListResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_GetWhiteListResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetWhiteListResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetWhiteListResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetWhiteListResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_GetWhiteListResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errorcode_ = value;
}
inline void Response_GetWhiteListResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetWhiteListResponse.errorCode)
}

// optional bytes white_list = 2;
inline bool Response_GetWhiteListResponse::_internal_has_white_list() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_GetWhiteListResponse::has_white_list() const {
  return _internal_has_white_list();
}
inline void Response_GetWhiteListResponse::clear_white_list() {
  white_list_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response_GetWhiteListResponse::white_list() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetWhiteListResponse.white_list)
  return _internal_white_list();
}
inline void Response_GetWhiteListResponse::set_white_list(const std::string& value) {
  _internal_set_white_list(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetWhiteListResponse.white_list)
}
inline std::string* Response_GetWhiteListResponse::mutable_white_list() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.GetWhiteListResponse.white_list)
  return _internal_mutable_white_list();
}
inline const std::string& Response_GetWhiteListResponse::_internal_white_list() const {
  return white_list_.Get();
}
inline void Response_GetWhiteListResponse::_internal_set_white_list(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  white_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_GetWhiteListResponse::set_white_list(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  white_list_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.GetWhiteListResponse.white_list)
}
inline void Response_GetWhiteListResponse::set_white_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  white_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.GetWhiteListResponse.white_list)
}
inline void Response_GetWhiteListResponse::set_white_list(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  white_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.GetWhiteListResponse.white_list)
}
inline std::string* Response_GetWhiteListResponse::_internal_mutable_white_list() {
  _has_bits_[0] |= 0x00000001u;
  return white_list_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_GetWhiteListResponse::release_white_list() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.GetWhiteListResponse.white_list)
  if (!_internal_has_white_list()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return white_list_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_GetWhiteListResponse::set_allocated_white_list(std::string* white_list) {
  if (white_list != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  white_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), white_list,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.GetWhiteListResponse.white_list)
}
inline std::string* Response_GetWhiteListResponse::unsafe_arena_release_white_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.GetWhiteListResponse.white_list)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return white_list_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_GetWhiteListResponse::unsafe_arena_set_allocated_white_list(
    std::string* white_list) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (white_list != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  white_list_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      white_list, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.GetWhiteListResponse.white_list)
}

// -------------------------------------------------------------------

// Response_SGXGetExtendedEpidGroupIdResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_SGXGetExtendedEpidGroupIdResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_SGXGetExtendedEpidGroupIdResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_SGXGetExtendedEpidGroupIdResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_SGXGetExtendedEpidGroupIdResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_SGXGetExtendedEpidGroupIdResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_SGXGetExtendedEpidGroupIdResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errorcode_ = value;
}
inline void Response_SGXGetExtendedEpidGroupIdResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse.errorCode)
}

// optional uint32 x_group_id = 2;
inline bool Response_SGXGetExtendedEpidGroupIdResponse::_internal_has_x_group_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_SGXGetExtendedEpidGroupIdResponse::has_x_group_id() const {
  return _internal_has_x_group_id();
}
inline void Response_SGXGetExtendedEpidGroupIdResponse::clear_x_group_id() {
  x_group_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_SGXGetExtendedEpidGroupIdResponse::_internal_x_group_id() const {
  return x_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_SGXGetExtendedEpidGroupIdResponse::x_group_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse.x_group_id)
  return _internal_x_group_id();
}
inline void Response_SGXGetExtendedEpidGroupIdResponse::_internal_set_x_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_group_id_ = value;
}
inline void Response_SGXGetExtendedEpidGroupIdResponse::set_x_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x_group_id(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse.x_group_id)
}

// -------------------------------------------------------------------

// Response_SGXSwitchExtendedEpidGroupResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_SGXSwitchExtendedEpidGroupResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_SGXSwitchExtendedEpidGroupResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_SGXSwitchExtendedEpidGroupResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_SGXSwitchExtendedEpidGroupResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_SGXSwitchExtendedEpidGroupResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_SGXSwitchExtendedEpidGroupResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  errorcode_ = value;
}
inline void Response_SGXSwitchExtendedEpidGroupResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse.errorCode)
}

// -------------------------------------------------------------------

// Response_SGXRegisterResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_SGXRegisterResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_SGXRegisterResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_SGXRegisterResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_SGXRegisterResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_SGXRegisterResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.SGXRegisterResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_SGXRegisterResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  errorcode_ = value;
}
inline void Response_SGXRegisterResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.SGXRegisterResponse.errorCode)
}

// -------------------------------------------------------------------

// Response_SelectAttKeyIDResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_SelectAttKeyIDResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_SelectAttKeyIDResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_SelectAttKeyIDResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_SelectAttKeyIDResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_SelectAttKeyIDResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.SelectAttKeyIDResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_SelectAttKeyIDResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errorcode_ = value;
}
inline void Response_SelectAttKeyIDResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.SelectAttKeyIDResponse.errorCode)
}

// optional bytes selected_att_key_id = 2;
inline bool Response_SelectAttKeyIDResponse::_internal_has_selected_att_key_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_SelectAttKeyIDResponse::has_selected_att_key_id() const {
  return _internal_has_selected_att_key_id();
}
inline void Response_SelectAttKeyIDResponse::clear_selected_att_key_id() {
  selected_att_key_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response_SelectAttKeyIDResponse::selected_att_key_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.SelectAttKeyIDResponse.selected_att_key_id)
  return _internal_selected_att_key_id();
}
inline void Response_SelectAttKeyIDResponse::set_selected_att_key_id(const std::string& value) {
  _internal_set_selected_att_key_id(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.SelectAttKeyIDResponse.selected_att_key_id)
}
inline std::string* Response_SelectAttKeyIDResponse::mutable_selected_att_key_id() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.SelectAttKeyIDResponse.selected_att_key_id)
  return _internal_mutable_selected_att_key_id();
}
inline const std::string& Response_SelectAttKeyIDResponse::_internal_selected_att_key_id() const {
  return selected_att_key_id_.Get();
}
inline void Response_SelectAttKeyIDResponse::_internal_set_selected_att_key_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  selected_att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_SelectAttKeyIDResponse::set_selected_att_key_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  selected_att_key_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.SelectAttKeyIDResponse.selected_att_key_id)
}
inline void Response_SelectAttKeyIDResponse::set_selected_att_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  selected_att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.SelectAttKeyIDResponse.selected_att_key_id)
}
inline void Response_SelectAttKeyIDResponse::set_selected_att_key_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  selected_att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.SelectAttKeyIDResponse.selected_att_key_id)
}
inline std::string* Response_SelectAttKeyIDResponse::_internal_mutable_selected_att_key_id() {
  _has_bits_[0] |= 0x00000001u;
  return selected_att_key_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_SelectAttKeyIDResponse::release_selected_att_key_id() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.SelectAttKeyIDResponse.selected_att_key_id)
  if (!_internal_has_selected_att_key_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return selected_att_key_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_SelectAttKeyIDResponse::set_allocated_selected_att_key_id(std::string* selected_att_key_id) {
  if (selected_att_key_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selected_att_key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selected_att_key_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.SelectAttKeyIDResponse.selected_att_key_id)
}
inline std::string* Response_SelectAttKeyIDResponse::unsafe_arena_release_selected_att_key_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.SelectAttKeyIDResponse.selected_att_key_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return selected_att_key_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_SelectAttKeyIDResponse::unsafe_arena_set_allocated_selected_att_key_id(
    std::string* selected_att_key_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (selected_att_key_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selected_att_key_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      selected_att_key_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.SelectAttKeyIDResponse.selected_att_key_id)
}

// -------------------------------------------------------------------

// Response_InitQuoteExResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_InitQuoteExResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Response_InitQuoteExResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_InitQuoteExResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_InitQuoteExResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_InitQuoteExResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InitQuoteExResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_InitQuoteExResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  errorcode_ = value;
}
inline void Response_InitQuoteExResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.InitQuoteExResponse.errorCode)
}

// optional bytes target_info = 2;
inline bool Response_InitQuoteExResponse::_internal_has_target_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_InitQuoteExResponse::has_target_info() const {
  return _internal_has_target_info();
}
inline void Response_InitQuoteExResponse::clear_target_info() {
  target_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response_InitQuoteExResponse::target_info() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InitQuoteExResponse.target_info)
  return _internal_target_info();
}
inline void Response_InitQuoteExResponse::set_target_info(const std::string& value) {
  _internal_set_target_info(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.InitQuoteExResponse.target_info)
}
inline std::string* Response_InitQuoteExResponse::mutable_target_info() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.InitQuoteExResponse.target_info)
  return _internal_mutable_target_info();
}
inline const std::string& Response_InitQuoteExResponse::_internal_target_info() const {
  return target_info_.Get();
}
inline void Response_InitQuoteExResponse::_internal_set_target_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  target_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_InitQuoteExResponse::set_target_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  target_info_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.InitQuoteExResponse.target_info)
}
inline void Response_InitQuoteExResponse::set_target_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  target_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.InitQuoteExResponse.target_info)
}
inline void Response_InitQuoteExResponse::set_target_info(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  target_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.InitQuoteExResponse.target_info)
}
inline std::string* Response_InitQuoteExResponse::_internal_mutable_target_info() {
  _has_bits_[0] |= 0x00000001u;
  return target_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_InitQuoteExResponse::release_target_info() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.InitQuoteExResponse.target_info)
  if (!_internal_has_target_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return target_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_InitQuoteExResponse::set_allocated_target_info(std::string* target_info) {
  if (target_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.InitQuoteExResponse.target_info)
}
inline std::string* Response_InitQuoteExResponse::unsafe_arena_release_target_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.InitQuoteExResponse.target_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return target_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_InitQuoteExResponse::unsafe_arena_set_allocated_target_info(
    std::string* target_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.InitQuoteExResponse.target_info)
}

// optional uint64 pub_key_id_size = 3;
inline bool Response_InitQuoteExResponse::_internal_has_pub_key_id_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Response_InitQuoteExResponse::has_pub_key_id_size() const {
  return _internal_has_pub_key_id_size();
}
inline void Response_InitQuoteExResponse::clear_pub_key_id_size() {
  pub_key_id_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Response_InitQuoteExResponse::_internal_pub_key_id_size() const {
  return pub_key_id_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Response_InitQuoteExResponse::pub_key_id_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InitQuoteExResponse.pub_key_id_size)
  return _internal_pub_key_id_size();
}
inline void Response_InitQuoteExResponse::_internal_set_pub_key_id_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pub_key_id_size_ = value;
}
inline void Response_InitQuoteExResponse::set_pub_key_id_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pub_key_id_size(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.InitQuoteExResponse.pub_key_id_size)
}

// optional bytes pub_key_id = 4;
inline bool Response_InitQuoteExResponse::_internal_has_pub_key_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_InitQuoteExResponse::has_pub_key_id() const {
  return _internal_has_pub_key_id();
}
inline void Response_InitQuoteExResponse::clear_pub_key_id() {
  pub_key_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Response_InitQuoteExResponse::pub_key_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InitQuoteExResponse.pub_key_id)
  return _internal_pub_key_id();
}
inline void Response_InitQuoteExResponse::set_pub_key_id(const std::string& value) {
  _internal_set_pub_key_id(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.InitQuoteExResponse.pub_key_id)
}
inline std::string* Response_InitQuoteExResponse::mutable_pub_key_id() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.InitQuoteExResponse.pub_key_id)
  return _internal_mutable_pub_key_id();
}
inline const std::string& Response_InitQuoteExResponse::_internal_pub_key_id() const {
  return pub_key_id_.Get();
}
inline void Response_InitQuoteExResponse::_internal_set_pub_key_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pub_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_InitQuoteExResponse::set_pub_key_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pub_key_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.InitQuoteExResponse.pub_key_id)
}
inline void Response_InitQuoteExResponse::set_pub_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pub_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.InitQuoteExResponse.pub_key_id)
}
inline void Response_InitQuoteExResponse::set_pub_key_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pub_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.InitQuoteExResponse.pub_key_id)
}
inline std::string* Response_InitQuoteExResponse::_internal_mutable_pub_key_id() {
  _has_bits_[0] |= 0x00000002u;
  return pub_key_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_InitQuoteExResponse::release_pub_key_id() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.InitQuoteExResponse.pub_key_id)
  if (!_internal_has_pub_key_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pub_key_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_InitQuoteExResponse::set_allocated_pub_key_id(std::string* pub_key_id) {
  if (pub_key_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pub_key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.InitQuoteExResponse.pub_key_id)
}
inline std::string* Response_InitQuoteExResponse::unsafe_arena_release_pub_key_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.InitQuoteExResponse.pub_key_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return pub_key_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_InitQuoteExResponse::unsafe_arena_set_allocated_pub_key_id(
    std::string* pub_key_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pub_key_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pub_key_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pub_key_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.InitQuoteExResponse.pub_key_id)
}

// -------------------------------------------------------------------

// Response_GetQuoteSizeExResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_GetQuoteSizeExResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_GetQuoteSizeExResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_GetQuoteSizeExResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetQuoteSizeExResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetQuoteSizeExResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetQuoteSizeExResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_GetQuoteSizeExResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errorcode_ = value;
}
inline void Response_GetQuoteSizeExResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetQuoteSizeExResponse.errorCode)
}

// optional uint32 quote_size = 2;
inline bool Response_GetQuoteSizeExResponse::_internal_has_quote_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_GetQuoteSizeExResponse::has_quote_size() const {
  return _internal_has_quote_size();
}
inline void Response_GetQuoteSizeExResponse::clear_quote_size() {
  quote_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetQuoteSizeExResponse::_internal_quote_size() const {
  return quote_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetQuoteSizeExResponse::quote_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetQuoteSizeExResponse.quote_size)
  return _internal_quote_size();
}
inline void Response_GetQuoteSizeExResponse::_internal_set_quote_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  quote_size_ = value;
}
inline void Response_GetQuoteSizeExResponse::set_quote_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quote_size(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetQuoteSizeExResponse.quote_size)
}

// -------------------------------------------------------------------

// Response_GetQuoteExResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_GetQuoteExResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Response_GetQuoteExResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_GetQuoteExResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetQuoteExResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetQuoteExResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetQuoteExResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_GetQuoteExResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  errorcode_ = value;
}
inline void Response_GetQuoteExResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetQuoteExResponse.errorCode)
}

// optional bytes quote = 2;
inline bool Response_GetQuoteExResponse::_internal_has_quote() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_GetQuoteExResponse::has_quote() const {
  return _internal_has_quote();
}
inline void Response_GetQuoteExResponse::clear_quote() {
  quote_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response_GetQuoteExResponse::quote() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetQuoteExResponse.quote)
  return _internal_quote();
}
inline void Response_GetQuoteExResponse::set_quote(const std::string& value) {
  _internal_set_quote(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetQuoteExResponse.quote)
}
inline std::string* Response_GetQuoteExResponse::mutable_quote() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.GetQuoteExResponse.quote)
  return _internal_mutable_quote();
}
inline const std::string& Response_GetQuoteExResponse::_internal_quote() const {
  return quote_.Get();
}
inline void Response_GetQuoteExResponse::_internal_set_quote(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  quote_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_GetQuoteExResponse::set_quote(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  quote_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.GetQuoteExResponse.quote)
}
inline void Response_GetQuoteExResponse::set_quote(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  quote_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.GetQuoteExResponse.quote)
}
inline void Response_GetQuoteExResponse::set_quote(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  quote_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.GetQuoteExResponse.quote)
}
inline std::string* Response_GetQuoteExResponse::_internal_mutable_quote() {
  _has_bits_[0] |= 0x00000001u;
  return quote_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_GetQuoteExResponse::release_quote() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.GetQuoteExResponse.quote)
  if (!_internal_has_quote()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return quote_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_GetQuoteExResponse::set_allocated_quote(std::string* quote) {
  if (quote != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  quote_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quote,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.GetQuoteExResponse.quote)
}
inline std::string* Response_GetQuoteExResponse::unsafe_arena_release_quote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.GetQuoteExResponse.quote)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return quote_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_GetQuoteExResponse::unsafe_arena_set_allocated_quote(
    std::string* quote) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (quote != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  quote_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      quote, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.GetQuoteExResponse.quote)
}

// optional bytes qe_report_info = 3;
inline bool Response_GetQuoteExResponse::_internal_has_qe_report_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_GetQuoteExResponse::has_qe_report_info() const {
  return _internal_has_qe_report_info();
}
inline void Response_GetQuoteExResponse::clear_qe_report_info() {
  qe_report_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Response_GetQuoteExResponse::qe_report_info() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetQuoteExResponse.qe_report_info)
  return _internal_qe_report_info();
}
inline void Response_GetQuoteExResponse::set_qe_report_info(const std::string& value) {
  _internal_set_qe_report_info(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetQuoteExResponse.qe_report_info)
}
inline std::string* Response_GetQuoteExResponse::mutable_qe_report_info() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.GetQuoteExResponse.qe_report_info)
  return _internal_mutable_qe_report_info();
}
inline const std::string& Response_GetQuoteExResponse::_internal_qe_report_info() const {
  return qe_report_info_.Get();
}
inline void Response_GetQuoteExResponse::_internal_set_qe_report_info(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  qe_report_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_GetQuoteExResponse::set_qe_report_info(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  qe_report_info_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.GetQuoteExResponse.qe_report_info)
}
inline void Response_GetQuoteExResponse::set_qe_report_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  qe_report_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.GetQuoteExResponse.qe_report_info)
}
inline void Response_GetQuoteExResponse::set_qe_report_info(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  qe_report_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.GetQuoteExResponse.qe_report_info)
}
inline std::string* Response_GetQuoteExResponse::_internal_mutable_qe_report_info() {
  _has_bits_[0] |= 0x00000002u;
  return qe_report_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_GetQuoteExResponse::release_qe_report_info() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.GetQuoteExResponse.qe_report_info)
  if (!_internal_has_qe_report_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return qe_report_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_GetQuoteExResponse::set_allocated_qe_report_info(std::string* qe_report_info) {
  if (qe_report_info != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  qe_report_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qe_report_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.GetQuoteExResponse.qe_report_info)
}
inline std::string* Response_GetQuoteExResponse::unsafe_arena_release_qe_report_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.GetQuoteExResponse.qe_report_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return qe_report_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_GetQuoteExResponse::unsafe_arena_set_allocated_qe_report_info(
    std::string* qe_report_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (qe_report_info != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  qe_report_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      qe_report_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.GetQuoteExResponse.qe_report_info)
}

// -------------------------------------------------------------------

// Response_UnsupportedRequestResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_UnsupportedRequestResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_UnsupportedRequestResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_UnsupportedRequestResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_UnsupportedRequestResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_UnsupportedRequestResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.UnsupportedRequestResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_UnsupportedRequestResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  errorcode_ = value;
}
inline void Response_UnsupportedRequestResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.UnsupportedRequestResponse.errorCode)
}

// -------------------------------------------------------------------

// Response_GetSupportedAttKeyIDNumResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_GetSupportedAttKeyIDNumResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_GetSupportedAttKeyIDNumResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_GetSupportedAttKeyIDNumResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetSupportedAttKeyIDNumResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetSupportedAttKeyIDNumResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetSupportedAttKeyIDNumResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_GetSupportedAttKeyIDNumResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errorcode_ = value;
}
inline void Response_GetSupportedAttKeyIDNumResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetSupportedAttKeyIDNumResponse.errorCode)
}

// optional uint32 att_key_id_num = 2;
inline bool Response_GetSupportedAttKeyIDNumResponse::_internal_has_att_key_id_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_GetSupportedAttKeyIDNumResponse::has_att_key_id_num() const {
  return _internal_has_att_key_id_num();
}
inline void Response_GetSupportedAttKeyIDNumResponse::clear_att_key_id_num() {
  att_key_id_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetSupportedAttKeyIDNumResponse::_internal_att_key_id_num() const {
  return att_key_id_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetSupportedAttKeyIDNumResponse::att_key_id_num() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetSupportedAttKeyIDNumResponse.att_key_id_num)
  return _internal_att_key_id_num();
}
inline void Response_GetSupportedAttKeyIDNumResponse::_internal_set_att_key_id_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  att_key_id_num_ = value;
}
inline void Response_GetSupportedAttKeyIDNumResponse::set_att_key_id_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_att_key_id_num(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetSupportedAttKeyIDNumResponse.att_key_id_num)
}

// -------------------------------------------------------------------

// Response_GetSupportedAttKeyIDsResponse

// required uint32 errorCode = 1 [default = 1];
inline bool Response_GetSupportedAttKeyIDsResponse::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_GetSupportedAttKeyIDsResponse::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Response_GetSupportedAttKeyIDsResponse::clear_errorcode() {
  errorcode_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetSupportedAttKeyIDsResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_GetSupportedAttKeyIDsResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetSupportedAttKeyIDsResponse.errorCode)
  return _internal_errorcode();
}
inline void Response_GetSupportedAttKeyIDsResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errorcode_ = value;
}
inline void Response_GetSupportedAttKeyIDsResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetSupportedAttKeyIDsResponse.errorCode)
}

// optional bytes att_key_ids = 2;
inline bool Response_GetSupportedAttKeyIDsResponse::_internal_has_att_key_ids() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_GetSupportedAttKeyIDsResponse::has_att_key_ids() const {
  return _internal_has_att_key_ids();
}
inline void Response_GetSupportedAttKeyIDsResponse::clear_att_key_ids() {
  att_key_ids_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response_GetSupportedAttKeyIDsResponse::att_key_ids() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetSupportedAttKeyIDsResponse.att_key_ids)
  return _internal_att_key_ids();
}
inline void Response_GetSupportedAttKeyIDsResponse::set_att_key_ids(const std::string& value) {
  _internal_set_att_key_ids(value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetSupportedAttKeyIDsResponse.att_key_ids)
}
inline std::string* Response_GetSupportedAttKeyIDsResponse::mutable_att_key_ids() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.GetSupportedAttKeyIDsResponse.att_key_ids)
  return _internal_mutable_att_key_ids();
}
inline const std::string& Response_GetSupportedAttKeyIDsResponse::_internal_att_key_ids() const {
  return att_key_ids_.Get();
}
inline void Response_GetSupportedAttKeyIDsResponse::_internal_set_att_key_ids(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  att_key_ids_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_GetSupportedAttKeyIDsResponse::set_att_key_ids(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  att_key_ids_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:aesm.message.Response.GetSupportedAttKeyIDsResponse.att_key_ids)
}
inline void Response_GetSupportedAttKeyIDsResponse::set_att_key_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  att_key_ids_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.GetSupportedAttKeyIDsResponse.att_key_ids)
}
inline void Response_GetSupportedAttKeyIDsResponse::set_att_key_ids(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  att_key_ids_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.GetSupportedAttKeyIDsResponse.att_key_ids)
}
inline std::string* Response_GetSupportedAttKeyIDsResponse::_internal_mutable_att_key_ids() {
  _has_bits_[0] |= 0x00000001u;
  return att_key_ids_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_GetSupportedAttKeyIDsResponse::release_att_key_ids() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.GetSupportedAttKeyIDsResponse.att_key_ids)
  if (!_internal_has_att_key_ids()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return att_key_ids_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_GetSupportedAttKeyIDsResponse::set_allocated_att_key_ids(std::string* att_key_ids) {
  if (att_key_ids != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  att_key_ids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), att_key_ids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.GetSupportedAttKeyIDsResponse.att_key_ids)
}
inline std::string* Response_GetSupportedAttKeyIDsResponse::unsafe_arena_release_att_key_ids() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aesm.message.Response.GetSupportedAttKeyIDsResponse.att_key_ids)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return att_key_ids_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_GetSupportedAttKeyIDsResponse::unsafe_arena_set_allocated_att_key_ids(
    std::string* att_key_ids) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (att_key_ids != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  att_key_ids_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      att_key_ids, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.GetSupportedAttKeyIDsResponse.att_key_ids)
}

// -------------------------------------------------------------------

// Response

// optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
inline bool Response::_internal_has_initquoteres() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || initquoteres_ != nullptr);
  return value;
}
inline bool Response::has_initquoteres() const {
  return _internal_has_initquoteres();
}
inline void Response::clear_initquoteres() {
  if (initquoteres_ != nullptr) initquoteres_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::aesm::message::Response_InitQuoteResponse& Response::_internal_initquoteres() const {
  const ::aesm::message::Response_InitQuoteResponse* p = initquoteres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_InitQuoteResponse*>(
      &::aesm::message::_Response_InitQuoteResponse_default_instance_);
}
inline const ::aesm::message::Response_InitQuoteResponse& Response::initquoteres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.initQuoteRes)
  return _internal_initquoteres();
}
inline void Response::unsafe_arena_set_allocated_initquoteres(
    ::aesm::message::Response_InitQuoteResponse* initquoteres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initquoteres_);
  }
  initquoteres_ = initquoteres;
  if (initquoteres) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.initQuoteRes)
}
inline ::aesm::message::Response_InitQuoteResponse* Response::release_initquoteres() {
  auto temp = unsafe_arena_release_initquoteres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_InitQuoteResponse* Response::unsafe_arena_release_initquoteres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.initQuoteRes)
  _has_bits_[0] &= ~0x00000001u;
  ::aesm::message::Response_InitQuoteResponse* temp = initquoteres_;
  initquoteres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_InitQuoteResponse* Response::_internal_mutable_initquoteres() {
  _has_bits_[0] |= 0x00000001u;
  if (initquoteres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_InitQuoteResponse>(GetArena());
    initquoteres_ = p;
  }
  return initquoteres_;
}
inline ::aesm::message::Response_InitQuoteResponse* Response::mutable_initquoteres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.initQuoteRes)
  return _internal_mutable_initquoteres();
}
inline void Response::set_allocated_initquoteres(::aesm::message::Response_InitQuoteResponse* initquoteres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete initquoteres_;
  }
  if (initquoteres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initquoteres);
    if (message_arena != submessage_arena) {
      initquoteres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initquoteres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  initquoteres_ = initquoteres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.initQuoteRes)
}

// optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
inline bool Response::_internal_has_getquoteres() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || getquoteres_ != nullptr);
  return value;
}
inline bool Response::has_getquoteres() const {
  return _internal_has_getquoteres();
}
inline void Response::clear_getquoteres() {
  if (getquoteres_ != nullptr) getquoteres_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::aesm::message::Response_GetQuoteResponse& Response::_internal_getquoteres() const {
  const ::aesm::message::Response_GetQuoteResponse* p = getquoteres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_GetQuoteResponse*>(
      &::aesm::message::_Response_GetQuoteResponse_default_instance_);
}
inline const ::aesm::message::Response_GetQuoteResponse& Response::getquoteres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getQuoteRes)
  return _internal_getquoteres();
}
inline void Response::unsafe_arena_set_allocated_getquoteres(
    ::aesm::message::Response_GetQuoteResponse* getquoteres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getquoteres_);
  }
  getquoteres_ = getquoteres;
  if (getquoteres) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.getQuoteRes)
}
inline ::aesm::message::Response_GetQuoteResponse* Response::release_getquoteres() {
  auto temp = unsafe_arena_release_getquoteres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_GetQuoteResponse* Response::unsafe_arena_release_getquoteres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getQuoteRes)
  _has_bits_[0] &= ~0x00000002u;
  ::aesm::message::Response_GetQuoteResponse* temp = getquoteres_;
  getquoteres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_GetQuoteResponse* Response::_internal_mutable_getquoteres() {
  _has_bits_[0] |= 0x00000002u;
  if (getquoteres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_GetQuoteResponse>(GetArena());
    getquoteres_ = p;
  }
  return getquoteres_;
}
inline ::aesm::message::Response_GetQuoteResponse* Response::mutable_getquoteres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getQuoteRes)
  return _internal_mutable_getquoteres();
}
inline void Response::set_allocated_getquoteres(::aesm::message::Response_GetQuoteResponse* getquoteres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getquoteres_;
  }
  if (getquoteres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getquoteres);
    if (message_arena != submessage_arena) {
      getquoteres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getquoteres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  getquoteres_ = getquoteres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getQuoteRes)
}

// optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
inline bool Response::_internal_has_getlictokenres() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || getlictokenres_ != nullptr);
  return value;
}
inline bool Response::has_getlictokenres() const {
  return _internal_has_getlictokenres();
}
inline void Response::clear_getlictokenres() {
  if (getlictokenres_ != nullptr) getlictokenres_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::aesm::message::Response_GetLaunchTokenResponse& Response::_internal_getlictokenres() const {
  const ::aesm::message::Response_GetLaunchTokenResponse* p = getlictokenres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_GetLaunchTokenResponse*>(
      &::aesm::message::_Response_GetLaunchTokenResponse_default_instance_);
}
inline const ::aesm::message::Response_GetLaunchTokenResponse& Response::getlictokenres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getLicTokenRes)
  return _internal_getlictokenres();
}
inline void Response::unsafe_arena_set_allocated_getlictokenres(
    ::aesm::message::Response_GetLaunchTokenResponse* getlictokenres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getlictokenres_);
  }
  getlictokenres_ = getlictokenres;
  if (getlictokenres) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.getLicTokenRes)
}
inline ::aesm::message::Response_GetLaunchTokenResponse* Response::release_getlictokenres() {
  auto temp = unsafe_arena_release_getlictokenres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_GetLaunchTokenResponse* Response::unsafe_arena_release_getlictokenres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getLicTokenRes)
  _has_bits_[0] &= ~0x00000004u;
  ::aesm::message::Response_GetLaunchTokenResponse* temp = getlictokenres_;
  getlictokenres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_GetLaunchTokenResponse* Response::_internal_mutable_getlictokenres() {
  _has_bits_[0] |= 0x00000004u;
  if (getlictokenres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_GetLaunchTokenResponse>(GetArena());
    getlictokenres_ = p;
  }
  return getlictokenres_;
}
inline ::aesm::message::Response_GetLaunchTokenResponse* Response::mutable_getlictokenres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getLicTokenRes)
  return _internal_mutable_getlictokenres();
}
inline void Response::set_allocated_getlictokenres(::aesm::message::Response_GetLaunchTokenResponse* getlictokenres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getlictokenres_;
  }
  if (getlictokenres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getlictokenres);
    if (message_arena != submessage_arena) {
      getlictokenres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getlictokenres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  getlictokenres_ = getlictokenres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getLicTokenRes)
}

// optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
inline bool Response::_internal_has_reporterrres() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || reporterrres_ != nullptr);
  return value;
}
inline bool Response::has_reporterrres() const {
  return _internal_has_reporterrres();
}
inline void Response::clear_reporterrres() {
  if (reporterrres_ != nullptr) reporterrres_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::aesm::message::Response_ReportAttestationErrorResponse& Response::_internal_reporterrres() const {
  const ::aesm::message::Response_ReportAttestationErrorResponse* p = reporterrres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_ReportAttestationErrorResponse*>(
      &::aesm::message::_Response_ReportAttestationErrorResponse_default_instance_);
}
inline const ::aesm::message::Response_ReportAttestationErrorResponse& Response::reporterrres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.reportErrRes)
  return _internal_reporterrres();
}
inline void Response::unsafe_arena_set_allocated_reporterrres(
    ::aesm::message::Response_ReportAttestationErrorResponse* reporterrres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reporterrres_);
  }
  reporterrres_ = reporterrres;
  if (reporterrres) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.reportErrRes)
}
inline ::aesm::message::Response_ReportAttestationErrorResponse* Response::release_reporterrres() {
  auto temp = unsafe_arena_release_reporterrres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_ReportAttestationErrorResponse* Response::unsafe_arena_release_reporterrres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.reportErrRes)
  _has_bits_[0] &= ~0x00000008u;
  ::aesm::message::Response_ReportAttestationErrorResponse* temp = reporterrres_;
  reporterrres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_ReportAttestationErrorResponse* Response::_internal_mutable_reporterrres() {
  _has_bits_[0] |= 0x00000008u;
  if (reporterrres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_ReportAttestationErrorResponse>(GetArena());
    reporterrres_ = p;
  }
  return reporterrres_;
}
inline ::aesm::message::Response_ReportAttestationErrorResponse* Response::mutable_reporterrres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.reportErrRes)
  return _internal_mutable_reporterrres();
}
inline void Response::set_allocated_reporterrres(::aesm::message::Response_ReportAttestationErrorResponse* reporterrres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reporterrres_;
  }
  if (reporterrres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reporterrres);
    if (message_arena != submessage_arena) {
      reporterrres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reporterrres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  reporterrres_ = reporterrres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.reportErrRes)
}

// optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
inline bool Response::_internal_has_getwhitelistsizeres() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || getwhitelistsizeres_ != nullptr);
  return value;
}
inline bool Response::has_getwhitelistsizeres() const {
  return _internal_has_getwhitelistsizeres();
}
inline void Response::clear_getwhitelistsizeres() {
  if (getwhitelistsizeres_ != nullptr) getwhitelistsizeres_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::aesm::message::Response_GetWhiteListSizeResponse& Response::_internal_getwhitelistsizeres() const {
  const ::aesm::message::Response_GetWhiteListSizeResponse* p = getwhitelistsizeres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_GetWhiteListSizeResponse*>(
      &::aesm::message::_Response_GetWhiteListSizeResponse_default_instance_);
}
inline const ::aesm::message::Response_GetWhiteListSizeResponse& Response::getwhitelistsizeres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getWhiteListSizeRes)
  return _internal_getwhitelistsizeres();
}
inline void Response::unsafe_arena_set_allocated_getwhitelistsizeres(
    ::aesm::message::Response_GetWhiteListSizeResponse* getwhitelistsizeres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getwhitelistsizeres_);
  }
  getwhitelistsizeres_ = getwhitelistsizeres;
  if (getwhitelistsizeres) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.getWhiteListSizeRes)
}
inline ::aesm::message::Response_GetWhiteListSizeResponse* Response::release_getwhitelistsizeres() {
  auto temp = unsafe_arena_release_getwhitelistsizeres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_GetWhiteListSizeResponse* Response::unsafe_arena_release_getwhitelistsizeres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getWhiteListSizeRes)
  _has_bits_[0] &= ~0x00000010u;
  ::aesm::message::Response_GetWhiteListSizeResponse* temp = getwhitelistsizeres_;
  getwhitelistsizeres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_GetWhiteListSizeResponse* Response::_internal_mutable_getwhitelistsizeres() {
  _has_bits_[0] |= 0x00000010u;
  if (getwhitelistsizeres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_GetWhiteListSizeResponse>(GetArena());
    getwhitelistsizeres_ = p;
  }
  return getwhitelistsizeres_;
}
inline ::aesm::message::Response_GetWhiteListSizeResponse* Response::mutable_getwhitelistsizeres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getWhiteListSizeRes)
  return _internal_mutable_getwhitelistsizeres();
}
inline void Response::set_allocated_getwhitelistsizeres(::aesm::message::Response_GetWhiteListSizeResponse* getwhitelistsizeres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getwhitelistsizeres_;
  }
  if (getwhitelistsizeres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getwhitelistsizeres);
    if (message_arena != submessage_arena) {
      getwhitelistsizeres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getwhitelistsizeres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  getwhitelistsizeres_ = getwhitelistsizeres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getWhiteListSizeRes)
}

// optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
inline bool Response::_internal_has_getwhitelistres() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || getwhitelistres_ != nullptr);
  return value;
}
inline bool Response::has_getwhitelistres() const {
  return _internal_has_getwhitelistres();
}
inline void Response::clear_getwhitelistres() {
  if (getwhitelistres_ != nullptr) getwhitelistres_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::aesm::message::Response_GetWhiteListResponse& Response::_internal_getwhitelistres() const {
  const ::aesm::message::Response_GetWhiteListResponse* p = getwhitelistres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_GetWhiteListResponse*>(
      &::aesm::message::_Response_GetWhiteListResponse_default_instance_);
}
inline const ::aesm::message::Response_GetWhiteListResponse& Response::getwhitelistres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getWhiteListRes)
  return _internal_getwhitelistres();
}
inline void Response::unsafe_arena_set_allocated_getwhitelistres(
    ::aesm::message::Response_GetWhiteListResponse* getwhitelistres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getwhitelistres_);
  }
  getwhitelistres_ = getwhitelistres;
  if (getwhitelistres) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.getWhiteListRes)
}
inline ::aesm::message::Response_GetWhiteListResponse* Response::release_getwhitelistres() {
  auto temp = unsafe_arena_release_getwhitelistres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_GetWhiteListResponse* Response::unsafe_arena_release_getwhitelistres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getWhiteListRes)
  _has_bits_[0] &= ~0x00000020u;
  ::aesm::message::Response_GetWhiteListResponse* temp = getwhitelistres_;
  getwhitelistres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_GetWhiteListResponse* Response::_internal_mutable_getwhitelistres() {
  _has_bits_[0] |= 0x00000020u;
  if (getwhitelistres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_GetWhiteListResponse>(GetArena());
    getwhitelistres_ = p;
  }
  return getwhitelistres_;
}
inline ::aesm::message::Response_GetWhiteListResponse* Response::mutable_getwhitelistres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getWhiteListRes)
  return _internal_mutable_getwhitelistres();
}
inline void Response::set_allocated_getwhitelistres(::aesm::message::Response_GetWhiteListResponse* getwhitelistres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getwhitelistres_;
  }
  if (getwhitelistres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getwhitelistres);
    if (message_arena != submessage_arena) {
      getwhitelistres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getwhitelistres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  getwhitelistres_ = getwhitelistres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getWhiteListRes)
}

// optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
inline bool Response::_internal_has_sgxgetextendedepidgroupidres() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || sgxgetextendedepidgroupidres_ != nullptr);
  return value;
}
inline bool Response::has_sgxgetextendedepidgroupidres() const {
  return _internal_has_sgxgetextendedepidgroupidres();
}
inline void Response::clear_sgxgetextendedepidgroupidres() {
  if (sgxgetextendedepidgroupidres_ != nullptr) sgxgetextendedepidgroupidres_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse& Response::_internal_sgxgetextendedepidgroupidres() const {
  const ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* p = sgxgetextendedepidgroupidres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse*>(
      &::aesm::message::_Response_SGXGetExtendedEpidGroupIdResponse_default_instance_);
}
inline const ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse& Response::sgxgetextendedepidgroupidres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.sgxGetExtendedEpidGroupIdRes)
  return _internal_sgxgetextendedepidgroupidres();
}
inline void Response::unsafe_arena_set_allocated_sgxgetextendedepidgroupidres(
    ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* sgxgetextendedepidgroupidres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sgxgetextendedepidgroupidres_);
  }
  sgxgetextendedepidgroupidres_ = sgxgetextendedepidgroupidres;
  if (sgxgetextendedepidgroupidres) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.sgxGetExtendedEpidGroupIdRes)
}
inline ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* Response::release_sgxgetextendedepidgroupidres() {
  auto temp = unsafe_arena_release_sgxgetextendedepidgroupidres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* Response::unsafe_arena_release_sgxgetextendedepidgroupidres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.sgxGetExtendedEpidGroupIdRes)
  _has_bits_[0] &= ~0x00000040u;
  ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* temp = sgxgetextendedepidgroupidres_;
  sgxgetextendedepidgroupidres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* Response::_internal_mutable_sgxgetextendedepidgroupidres() {
  _has_bits_[0] |= 0x00000040u;
  if (sgxgetextendedepidgroupidres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse>(GetArena());
    sgxgetextendedepidgroupidres_ = p;
  }
  return sgxgetextendedepidgroupidres_;
}
inline ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* Response::mutable_sgxgetextendedepidgroupidres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.sgxGetExtendedEpidGroupIdRes)
  return _internal_mutable_sgxgetextendedepidgroupidres();
}
inline void Response::set_allocated_sgxgetextendedepidgroupidres(::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* sgxgetextendedepidgroupidres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sgxgetextendedepidgroupidres_;
  }
  if (sgxgetextendedepidgroupidres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sgxgetextendedepidgroupidres);
    if (message_arena != submessage_arena) {
      sgxgetextendedepidgroupidres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sgxgetextendedepidgroupidres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  sgxgetextendedepidgroupidres_ = sgxgetextendedepidgroupidres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.sgxGetExtendedEpidGroupIdRes)
}

// optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
inline bool Response::_internal_has_sgxswitchextendedepidgroupres() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || sgxswitchextendedepidgroupres_ != nullptr);
  return value;
}
inline bool Response::has_sgxswitchextendedepidgroupres() const {
  return _internal_has_sgxswitchextendedepidgroupres();
}
inline void Response::clear_sgxswitchextendedepidgroupres() {
  if (sgxswitchextendedepidgroupres_ != nullptr) sgxswitchextendedepidgroupres_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse& Response::_internal_sgxswitchextendedepidgroupres() const {
  const ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* p = sgxswitchextendedepidgroupres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse*>(
      &::aesm::message::_Response_SGXSwitchExtendedEpidGroupResponse_default_instance_);
}
inline const ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse& Response::sgxswitchextendedepidgroupres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.sgxSwitchExtendedEpidGroupRes)
  return _internal_sgxswitchextendedepidgroupres();
}
inline void Response::unsafe_arena_set_allocated_sgxswitchextendedepidgroupres(
    ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* sgxswitchextendedepidgroupres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sgxswitchextendedepidgroupres_);
  }
  sgxswitchextendedepidgroupres_ = sgxswitchextendedepidgroupres;
  if (sgxswitchextendedepidgroupres) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.sgxSwitchExtendedEpidGroupRes)
}
inline ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* Response::release_sgxswitchextendedepidgroupres() {
  auto temp = unsafe_arena_release_sgxswitchextendedepidgroupres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* Response::unsafe_arena_release_sgxswitchextendedepidgroupres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.sgxSwitchExtendedEpidGroupRes)
  _has_bits_[0] &= ~0x00000080u;
  ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* temp = sgxswitchextendedepidgroupres_;
  sgxswitchextendedepidgroupres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* Response::_internal_mutable_sgxswitchextendedepidgroupres() {
  _has_bits_[0] |= 0x00000080u;
  if (sgxswitchextendedepidgroupres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse>(GetArena());
    sgxswitchextendedepidgroupres_ = p;
  }
  return sgxswitchextendedepidgroupres_;
}
inline ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* Response::mutable_sgxswitchextendedepidgroupres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.sgxSwitchExtendedEpidGroupRes)
  return _internal_mutable_sgxswitchextendedepidgroupres();
}
inline void Response::set_allocated_sgxswitchextendedepidgroupres(::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* sgxswitchextendedepidgroupres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sgxswitchextendedepidgroupres_;
  }
  if (sgxswitchextendedepidgroupres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sgxswitchextendedepidgroupres);
    if (message_arena != submessage_arena) {
      sgxswitchextendedepidgroupres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sgxswitchextendedepidgroupres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sgxswitchextendedepidgroupres_ = sgxswitchextendedepidgroupres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.sgxSwitchExtendedEpidGroupRes)
}

// optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
inline bool Response::_internal_has_sgxregisterres() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || sgxregisterres_ != nullptr);
  return value;
}
inline bool Response::has_sgxregisterres() const {
  return _internal_has_sgxregisterres();
}
inline void Response::clear_sgxregisterres() {
  if (sgxregisterres_ != nullptr) sgxregisterres_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::aesm::message::Response_SGXRegisterResponse& Response::_internal_sgxregisterres() const {
  const ::aesm::message::Response_SGXRegisterResponse* p = sgxregisterres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_SGXRegisterResponse*>(
      &::aesm::message::_Response_SGXRegisterResponse_default_instance_);
}
inline const ::aesm::message::Response_SGXRegisterResponse& Response::sgxregisterres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.sgxRegisterRes)
  return _internal_sgxregisterres();
}
inline void Response::unsafe_arena_set_allocated_sgxregisterres(
    ::aesm::message::Response_SGXRegisterResponse* sgxregisterres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sgxregisterres_);
  }
  sgxregisterres_ = sgxregisterres;
  if (sgxregisterres) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.sgxRegisterRes)
}
inline ::aesm::message::Response_SGXRegisterResponse* Response::release_sgxregisterres() {
  auto temp = unsafe_arena_release_sgxregisterres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_SGXRegisterResponse* Response::unsafe_arena_release_sgxregisterres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.sgxRegisterRes)
  _has_bits_[0] &= ~0x00000100u;
  ::aesm::message::Response_SGXRegisterResponse* temp = sgxregisterres_;
  sgxregisterres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_SGXRegisterResponse* Response::_internal_mutable_sgxregisterres() {
  _has_bits_[0] |= 0x00000100u;
  if (sgxregisterres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_SGXRegisterResponse>(GetArena());
    sgxregisterres_ = p;
  }
  return sgxregisterres_;
}
inline ::aesm::message::Response_SGXRegisterResponse* Response::mutable_sgxregisterres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.sgxRegisterRes)
  return _internal_mutable_sgxregisterres();
}
inline void Response::set_allocated_sgxregisterres(::aesm::message::Response_SGXRegisterResponse* sgxregisterres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sgxregisterres_;
  }
  if (sgxregisterres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sgxregisterres);
    if (message_arena != submessage_arena) {
      sgxregisterres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sgxregisterres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  sgxregisterres_ = sgxregisterres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.sgxRegisterRes)
}

// optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
inline bool Response::_internal_has_initquoteexres() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || initquoteexres_ != nullptr);
  return value;
}
inline bool Response::has_initquoteexres() const {
  return _internal_has_initquoteexres();
}
inline void Response::clear_initquoteexres() {
  if (initquoteexres_ != nullptr) initquoteexres_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::aesm::message::Response_InitQuoteExResponse& Response::_internal_initquoteexres() const {
  const ::aesm::message::Response_InitQuoteExResponse* p = initquoteexres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_InitQuoteExResponse*>(
      &::aesm::message::_Response_InitQuoteExResponse_default_instance_);
}
inline const ::aesm::message::Response_InitQuoteExResponse& Response::initquoteexres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.initQuoteExRes)
  return _internal_initquoteexres();
}
inline void Response::unsafe_arena_set_allocated_initquoteexres(
    ::aesm::message::Response_InitQuoteExResponse* initquoteexres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initquoteexres_);
  }
  initquoteexres_ = initquoteexres;
  if (initquoteexres) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.initQuoteExRes)
}
inline ::aesm::message::Response_InitQuoteExResponse* Response::release_initquoteexres() {
  auto temp = unsafe_arena_release_initquoteexres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_InitQuoteExResponse* Response::unsafe_arena_release_initquoteexres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.initQuoteExRes)
  _has_bits_[0] &= ~0x00000200u;
  ::aesm::message::Response_InitQuoteExResponse* temp = initquoteexres_;
  initquoteexres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_InitQuoteExResponse* Response::_internal_mutable_initquoteexres() {
  _has_bits_[0] |= 0x00000200u;
  if (initquoteexres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_InitQuoteExResponse>(GetArena());
    initquoteexres_ = p;
  }
  return initquoteexres_;
}
inline ::aesm::message::Response_InitQuoteExResponse* Response::mutable_initquoteexres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.initQuoteExRes)
  return _internal_mutable_initquoteexres();
}
inline void Response::set_allocated_initquoteexres(::aesm::message::Response_InitQuoteExResponse* initquoteexres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete initquoteexres_;
  }
  if (initquoteexres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initquoteexres);
    if (message_arena != submessage_arena) {
      initquoteexres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initquoteexres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  initquoteexres_ = initquoteexres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.initQuoteExRes)
}

// optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
inline bool Response::_internal_has_getquotesizeexres() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || getquotesizeexres_ != nullptr);
  return value;
}
inline bool Response::has_getquotesizeexres() const {
  return _internal_has_getquotesizeexres();
}
inline void Response::clear_getquotesizeexres() {
  if (getquotesizeexres_ != nullptr) getquotesizeexres_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::aesm::message::Response_GetQuoteSizeExResponse& Response::_internal_getquotesizeexres() const {
  const ::aesm::message::Response_GetQuoteSizeExResponse* p = getquotesizeexres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_GetQuoteSizeExResponse*>(
      &::aesm::message::_Response_GetQuoteSizeExResponse_default_instance_);
}
inline const ::aesm::message::Response_GetQuoteSizeExResponse& Response::getquotesizeexres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getQuoteSizeExRes)
  return _internal_getquotesizeexres();
}
inline void Response::unsafe_arena_set_allocated_getquotesizeexres(
    ::aesm::message::Response_GetQuoteSizeExResponse* getquotesizeexres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getquotesizeexres_);
  }
  getquotesizeexres_ = getquotesizeexres;
  if (getquotesizeexres) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.getQuoteSizeExRes)
}
inline ::aesm::message::Response_GetQuoteSizeExResponse* Response::release_getquotesizeexres() {
  auto temp = unsafe_arena_release_getquotesizeexres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_GetQuoteSizeExResponse* Response::unsafe_arena_release_getquotesizeexres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getQuoteSizeExRes)
  _has_bits_[0] &= ~0x00000400u;
  ::aesm::message::Response_GetQuoteSizeExResponse* temp = getquotesizeexres_;
  getquotesizeexres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_GetQuoteSizeExResponse* Response::_internal_mutable_getquotesizeexres() {
  _has_bits_[0] |= 0x00000400u;
  if (getquotesizeexres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_GetQuoteSizeExResponse>(GetArena());
    getquotesizeexres_ = p;
  }
  return getquotesizeexres_;
}
inline ::aesm::message::Response_GetQuoteSizeExResponse* Response::mutable_getquotesizeexres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getQuoteSizeExRes)
  return _internal_mutable_getquotesizeexres();
}
inline void Response::set_allocated_getquotesizeexres(::aesm::message::Response_GetQuoteSizeExResponse* getquotesizeexres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getquotesizeexres_;
  }
  if (getquotesizeexres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getquotesizeexres);
    if (message_arena != submessage_arena) {
      getquotesizeexres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getquotesizeexres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  getquotesizeexres_ = getquotesizeexres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getQuoteSizeExRes)
}

// optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
inline bool Response::_internal_has_getquoteexres() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || getquoteexres_ != nullptr);
  return value;
}
inline bool Response::has_getquoteexres() const {
  return _internal_has_getquoteexres();
}
inline void Response::clear_getquoteexres() {
  if (getquoteexres_ != nullptr) getquoteexres_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::aesm::message::Response_GetQuoteExResponse& Response::_internal_getquoteexres() const {
  const ::aesm::message::Response_GetQuoteExResponse* p = getquoteexres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_GetQuoteExResponse*>(
      &::aesm::message::_Response_GetQuoteExResponse_default_instance_);
}
inline const ::aesm::message::Response_GetQuoteExResponse& Response::getquoteexres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getQuoteExRes)
  return _internal_getquoteexres();
}
inline void Response::unsafe_arena_set_allocated_getquoteexres(
    ::aesm::message::Response_GetQuoteExResponse* getquoteexres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getquoteexres_);
  }
  getquoteexres_ = getquoteexres;
  if (getquoteexres) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.getQuoteExRes)
}
inline ::aesm::message::Response_GetQuoteExResponse* Response::release_getquoteexres() {
  auto temp = unsafe_arena_release_getquoteexres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_GetQuoteExResponse* Response::unsafe_arena_release_getquoteexres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getQuoteExRes)
  _has_bits_[0] &= ~0x00000800u;
  ::aesm::message::Response_GetQuoteExResponse* temp = getquoteexres_;
  getquoteexres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_GetQuoteExResponse* Response::_internal_mutable_getquoteexres() {
  _has_bits_[0] |= 0x00000800u;
  if (getquoteexres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_GetQuoteExResponse>(GetArena());
    getquoteexres_ = p;
  }
  return getquoteexres_;
}
inline ::aesm::message::Response_GetQuoteExResponse* Response::mutable_getquoteexres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getQuoteExRes)
  return _internal_mutable_getquoteexres();
}
inline void Response::set_allocated_getquoteexres(::aesm::message::Response_GetQuoteExResponse* getquoteexres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getquoteexres_;
  }
  if (getquoteexres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getquoteexres);
    if (message_arena != submessage_arena) {
      getquoteexres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getquoteexres, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  getquoteexres_ = getquoteexres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getQuoteExRes)
}

// optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
inline bool Response::_internal_has_checkupdatestatusres() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || checkupdatestatusres_ != nullptr);
  return value;
}
inline bool Response::has_checkupdatestatusres() const {
  return _internal_has_checkupdatestatusres();
}
inline void Response::clear_checkupdatestatusres() {
  if (checkupdatestatusres_ != nullptr) checkupdatestatusres_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::aesm::message::Response_CheckUpdateStatusResponse& Response::_internal_checkupdatestatusres() const {
  const ::aesm::message::Response_CheckUpdateStatusResponse* p = checkupdatestatusres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_CheckUpdateStatusResponse*>(
      &::aesm::message::_Response_CheckUpdateStatusResponse_default_instance_);
}
inline const ::aesm::message::Response_CheckUpdateStatusResponse& Response::checkupdatestatusres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.checkUpdateStatusRes)
  return _internal_checkupdatestatusres();
}
inline void Response::unsafe_arena_set_allocated_checkupdatestatusres(
    ::aesm::message::Response_CheckUpdateStatusResponse* checkupdatestatusres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkupdatestatusres_);
  }
  checkupdatestatusres_ = checkupdatestatusres;
  if (checkupdatestatusres) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.checkUpdateStatusRes)
}
inline ::aesm::message::Response_CheckUpdateStatusResponse* Response::release_checkupdatestatusres() {
  auto temp = unsafe_arena_release_checkupdatestatusres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_CheckUpdateStatusResponse* Response::unsafe_arena_release_checkupdatestatusres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.checkUpdateStatusRes)
  _has_bits_[0] &= ~0x00001000u;
  ::aesm::message::Response_CheckUpdateStatusResponse* temp = checkupdatestatusres_;
  checkupdatestatusres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_CheckUpdateStatusResponse* Response::_internal_mutable_checkupdatestatusres() {
  _has_bits_[0] |= 0x00001000u;
  if (checkupdatestatusres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_CheckUpdateStatusResponse>(GetArena());
    checkupdatestatusres_ = p;
  }
  return checkupdatestatusres_;
}
inline ::aesm::message::Response_CheckUpdateStatusResponse* Response::mutable_checkupdatestatusres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.checkUpdateStatusRes)
  return _internal_mutable_checkupdatestatusres();
}
inline void Response::set_allocated_checkupdatestatusres(::aesm::message::Response_CheckUpdateStatusResponse* checkupdatestatusres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete checkupdatestatusres_;
  }
  if (checkupdatestatusres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkupdatestatusres);
    if (message_arena != submessage_arena) {
      checkupdatestatusres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkupdatestatusres, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  checkupdatestatusres_ = checkupdatestatusres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.checkUpdateStatusRes)
}

// optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
inline bool Response::_internal_has_selectattkeyidres() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || selectattkeyidres_ != nullptr);
  return value;
}
inline bool Response::has_selectattkeyidres() const {
  return _internal_has_selectattkeyidres();
}
inline void Response::clear_selectattkeyidres() {
  if (selectattkeyidres_ != nullptr) selectattkeyidres_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::aesm::message::Response_SelectAttKeyIDResponse& Response::_internal_selectattkeyidres() const {
  const ::aesm::message::Response_SelectAttKeyIDResponse* p = selectattkeyidres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_SelectAttKeyIDResponse*>(
      &::aesm::message::_Response_SelectAttKeyIDResponse_default_instance_);
}
inline const ::aesm::message::Response_SelectAttKeyIDResponse& Response::selectattkeyidres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.selectAttKeyIDRes)
  return _internal_selectattkeyidres();
}
inline void Response::unsafe_arena_set_allocated_selectattkeyidres(
    ::aesm::message::Response_SelectAttKeyIDResponse* selectattkeyidres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectattkeyidres_);
  }
  selectattkeyidres_ = selectattkeyidres;
  if (selectattkeyidres) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.selectAttKeyIDRes)
}
inline ::aesm::message::Response_SelectAttKeyIDResponse* Response::release_selectattkeyidres() {
  auto temp = unsafe_arena_release_selectattkeyidres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_SelectAttKeyIDResponse* Response::unsafe_arena_release_selectattkeyidres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.selectAttKeyIDRes)
  _has_bits_[0] &= ~0x00002000u;
  ::aesm::message::Response_SelectAttKeyIDResponse* temp = selectattkeyidres_;
  selectattkeyidres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_SelectAttKeyIDResponse* Response::_internal_mutable_selectattkeyidres() {
  _has_bits_[0] |= 0x00002000u;
  if (selectattkeyidres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_SelectAttKeyIDResponse>(GetArena());
    selectattkeyidres_ = p;
  }
  return selectattkeyidres_;
}
inline ::aesm::message::Response_SelectAttKeyIDResponse* Response::mutable_selectattkeyidres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.selectAttKeyIDRes)
  return _internal_mutable_selectattkeyidres();
}
inline void Response::set_allocated_selectattkeyidres(::aesm::message::Response_SelectAttKeyIDResponse* selectattkeyidres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectattkeyidres_;
  }
  if (selectattkeyidres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectattkeyidres);
    if (message_arena != submessage_arena) {
      selectattkeyidres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectattkeyidres, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  selectattkeyidres_ = selectattkeyidres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.selectAttKeyIDRes)
}

// optional .aesm.message.Response.UnsupportedRequestResponse unsupportedRequestResponse = 20;
inline bool Response::_internal_has_unsupportedrequestresponse() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || unsupportedrequestresponse_ != nullptr);
  return value;
}
inline bool Response::has_unsupportedrequestresponse() const {
  return _internal_has_unsupportedrequestresponse();
}
inline void Response::clear_unsupportedrequestresponse() {
  if (unsupportedrequestresponse_ != nullptr) unsupportedrequestresponse_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::aesm::message::Response_UnsupportedRequestResponse& Response::_internal_unsupportedrequestresponse() const {
  const ::aesm::message::Response_UnsupportedRequestResponse* p = unsupportedrequestresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_UnsupportedRequestResponse*>(
      &::aesm::message::_Response_UnsupportedRequestResponse_default_instance_);
}
inline const ::aesm::message::Response_UnsupportedRequestResponse& Response::unsupportedrequestresponse() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.unsupportedRequestResponse)
  return _internal_unsupportedrequestresponse();
}
inline void Response::unsafe_arena_set_allocated_unsupportedrequestresponse(
    ::aesm::message::Response_UnsupportedRequestResponse* unsupportedrequestresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsupportedrequestresponse_);
  }
  unsupportedrequestresponse_ = unsupportedrequestresponse;
  if (unsupportedrequestresponse) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.unsupportedRequestResponse)
}
inline ::aesm::message::Response_UnsupportedRequestResponse* Response::release_unsupportedrequestresponse() {
  auto temp = unsafe_arena_release_unsupportedrequestresponse();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_UnsupportedRequestResponse* Response::unsafe_arena_release_unsupportedrequestresponse() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.unsupportedRequestResponse)
  _has_bits_[0] &= ~0x00004000u;
  ::aesm::message::Response_UnsupportedRequestResponse* temp = unsupportedrequestresponse_;
  unsupportedrequestresponse_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_UnsupportedRequestResponse* Response::_internal_mutable_unsupportedrequestresponse() {
  _has_bits_[0] |= 0x00004000u;
  if (unsupportedrequestresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_UnsupportedRequestResponse>(GetArena());
    unsupportedrequestresponse_ = p;
  }
  return unsupportedrequestresponse_;
}
inline ::aesm::message::Response_UnsupportedRequestResponse* Response::mutable_unsupportedrequestresponse() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.unsupportedRequestResponse)
  return _internal_mutable_unsupportedrequestresponse();
}
inline void Response::set_allocated_unsupportedrequestresponse(::aesm::message::Response_UnsupportedRequestResponse* unsupportedrequestresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete unsupportedrequestresponse_;
  }
  if (unsupportedrequestresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unsupportedrequestresponse);
    if (message_arena != submessage_arena) {
      unsupportedrequestresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsupportedrequestresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  unsupportedrequestresponse_ = unsupportedrequestresponse;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.unsupportedRequestResponse)
}

// optional .aesm.message.Response.GetSupportedAttKeyIDNumResponse getSupportedAttKeyIDNumRes = 21;
inline bool Response::_internal_has_getsupportedattkeyidnumres() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || getsupportedattkeyidnumres_ != nullptr);
  return value;
}
inline bool Response::has_getsupportedattkeyidnumres() const {
  return _internal_has_getsupportedattkeyidnumres();
}
inline void Response::clear_getsupportedattkeyidnumres() {
  if (getsupportedattkeyidnumres_ != nullptr) getsupportedattkeyidnumres_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::aesm::message::Response_GetSupportedAttKeyIDNumResponse& Response::_internal_getsupportedattkeyidnumres() const {
  const ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* p = getsupportedattkeyidnumres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_GetSupportedAttKeyIDNumResponse*>(
      &::aesm::message::_Response_GetSupportedAttKeyIDNumResponse_default_instance_);
}
inline const ::aesm::message::Response_GetSupportedAttKeyIDNumResponse& Response::getsupportedattkeyidnumres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getSupportedAttKeyIDNumRes)
  return _internal_getsupportedattkeyidnumres();
}
inline void Response::unsafe_arena_set_allocated_getsupportedattkeyidnumres(
    ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* getsupportedattkeyidnumres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getsupportedattkeyidnumres_);
  }
  getsupportedattkeyidnumres_ = getsupportedattkeyidnumres;
  if (getsupportedattkeyidnumres) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.getSupportedAttKeyIDNumRes)
}
inline ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* Response::release_getsupportedattkeyidnumres() {
  auto temp = unsafe_arena_release_getsupportedattkeyidnumres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* Response::unsafe_arena_release_getsupportedattkeyidnumres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getSupportedAttKeyIDNumRes)
  _has_bits_[0] &= ~0x00008000u;
  ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* temp = getsupportedattkeyidnumres_;
  getsupportedattkeyidnumres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* Response::_internal_mutable_getsupportedattkeyidnumres() {
  _has_bits_[0] |= 0x00008000u;
  if (getsupportedattkeyidnumres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_GetSupportedAttKeyIDNumResponse>(GetArena());
    getsupportedattkeyidnumres_ = p;
  }
  return getsupportedattkeyidnumres_;
}
inline ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* Response::mutable_getsupportedattkeyidnumres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getSupportedAttKeyIDNumRes)
  return _internal_mutable_getsupportedattkeyidnumres();
}
inline void Response::set_allocated_getsupportedattkeyidnumres(::aesm::message::Response_GetSupportedAttKeyIDNumResponse* getsupportedattkeyidnumres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getsupportedattkeyidnumres_;
  }
  if (getsupportedattkeyidnumres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getsupportedattkeyidnumres);
    if (message_arena != submessage_arena) {
      getsupportedattkeyidnumres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getsupportedattkeyidnumres, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  getsupportedattkeyidnumres_ = getsupportedattkeyidnumres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getSupportedAttKeyIDNumRes)
}

// optional .aesm.message.Response.GetSupportedAttKeyIDsResponse getSupportedAttKeyIDsRes = 22;
inline bool Response::_internal_has_getsupportedattkeyidsres() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || getsupportedattkeyidsres_ != nullptr);
  return value;
}
inline bool Response::has_getsupportedattkeyidsres() const {
  return _internal_has_getsupportedattkeyidsres();
}
inline void Response::clear_getsupportedattkeyidsres() {
  if (getsupportedattkeyidsres_ != nullptr) getsupportedattkeyidsres_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::aesm::message::Response_GetSupportedAttKeyIDsResponse& Response::_internal_getsupportedattkeyidsres() const {
  const ::aesm::message::Response_GetSupportedAttKeyIDsResponse* p = getsupportedattkeyidsres_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aesm::message::Response_GetSupportedAttKeyIDsResponse*>(
      &::aesm::message::_Response_GetSupportedAttKeyIDsResponse_default_instance_);
}
inline const ::aesm::message::Response_GetSupportedAttKeyIDsResponse& Response::getsupportedattkeyidsres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getSupportedAttKeyIDsRes)
  return _internal_getsupportedattkeyidsres();
}
inline void Response::unsafe_arena_set_allocated_getsupportedattkeyidsres(
    ::aesm::message::Response_GetSupportedAttKeyIDsResponse* getsupportedattkeyidsres) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getsupportedattkeyidsres_);
  }
  getsupportedattkeyidsres_ = getsupportedattkeyidsres;
  if (getsupportedattkeyidsres) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aesm.message.Response.getSupportedAttKeyIDsRes)
}
inline ::aesm::message::Response_GetSupportedAttKeyIDsResponse* Response::release_getsupportedattkeyidsres() {
  auto temp = unsafe_arena_release_getsupportedattkeyidsres();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aesm::message::Response_GetSupportedAttKeyIDsResponse* Response::unsafe_arena_release_getsupportedattkeyidsres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getSupportedAttKeyIDsRes)
  _has_bits_[0] &= ~0x00010000u;
  ::aesm::message::Response_GetSupportedAttKeyIDsResponse* temp = getsupportedattkeyidsres_;
  getsupportedattkeyidsres_ = nullptr;
  return temp;
}
inline ::aesm::message::Response_GetSupportedAttKeyIDsResponse* Response::_internal_mutable_getsupportedattkeyidsres() {
  _has_bits_[0] |= 0x00010000u;
  if (getsupportedattkeyidsres_ == nullptr) {
    auto* p = CreateMaybeMessage<::aesm::message::Response_GetSupportedAttKeyIDsResponse>(GetArena());
    getsupportedattkeyidsres_ = p;
  }
  return getsupportedattkeyidsres_;
}
inline ::aesm::message::Response_GetSupportedAttKeyIDsResponse* Response::mutable_getsupportedattkeyidsres() {
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getSupportedAttKeyIDsRes)
  return _internal_mutable_getsupportedattkeyidsres();
}
inline void Response::set_allocated_getsupportedattkeyidsres(::aesm::message::Response_GetSupportedAttKeyIDsResponse* getsupportedattkeyidsres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getsupportedattkeyidsres_;
  }
  if (getsupportedattkeyidsres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getsupportedattkeyidsres);
    if (message_arena != submessage_arena) {
      getsupportedattkeyidsres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getsupportedattkeyidsres, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  getsupportedattkeyidsres_ = getsupportedattkeyidsres;
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getSupportedAttKeyIDsRes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace aesm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
