// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_CheckUpdateStatusRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetLaunchTokenRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetQuoteExRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetQuoteRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetQuoteSizeExRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetSupportedAttKeyIDNumRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetSupportedAttKeyIDsRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetWhiteListRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetWhiteListSizeRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_InitQuoteExRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_InitQuoteRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_ReportAttestationErrorRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_SGXGetExtendedEpidGroupIdRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_SGXRegisterRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_SGXSwitchExtendedEpidGroupRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_SelectAttKeyIDRequest_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_CheckUpdateStatusResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetLaunchTokenResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetQuoteExResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetQuoteResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetQuoteSizeExResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetSupportedAttKeyIDNumResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetSupportedAttKeyIDsResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetWhiteListResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetWhiteListSizeResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_InitQuoteExResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_InitQuoteResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_ReportAttestationErrorResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_SGXGetExtendedEpidGroupIdResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_SGXRegisterResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_SGXSwitchExtendedEpidGroupResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_SelectAttKeyIDResponse_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_UnsupportedRequestResponse_messages_2eproto;
namespace aesm {
namespace message {
class Request_InitQuoteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_InitQuoteRequest> _instance;
} _Request_InitQuoteRequest_default_instance_;
class Request_GetQuoteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_GetQuoteRequest> _instance;
} _Request_GetQuoteRequest_default_instance_;
class Request_GetLaunchTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_GetLaunchTokenRequest> _instance;
} _Request_GetLaunchTokenRequest_default_instance_;
class Request_ReportAttestationErrorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_ReportAttestationErrorRequest> _instance;
} _Request_ReportAttestationErrorRequest_default_instance_;
class Request_CheckUpdateStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_CheckUpdateStatusRequest> _instance;
} _Request_CheckUpdateStatusRequest_default_instance_;
class Request_GetWhiteListSizeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_GetWhiteListSizeRequest> _instance;
} _Request_GetWhiteListSizeRequest_default_instance_;
class Request_GetWhiteListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_GetWhiteListRequest> _instance;
} _Request_GetWhiteListRequest_default_instance_;
class Request_SGXGetExtendedEpidGroupIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_SGXGetExtendedEpidGroupIdRequest> _instance;
} _Request_SGXGetExtendedEpidGroupIdRequest_default_instance_;
class Request_SGXSwitchExtendedEpidGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_SGXSwitchExtendedEpidGroupRequest> _instance;
} _Request_SGXSwitchExtendedEpidGroupRequest_default_instance_;
class Request_SGXRegisterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_SGXRegisterRequest> _instance;
} _Request_SGXRegisterRequest_default_instance_;
class Request_InitQuoteExRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_InitQuoteExRequest> _instance;
} _Request_InitQuoteExRequest_default_instance_;
class Request_SelectAttKeyIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_SelectAttKeyIDRequest> _instance;
} _Request_SelectAttKeyIDRequest_default_instance_;
class Request_GetQuoteSizeExRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_GetQuoteSizeExRequest> _instance;
} _Request_GetQuoteSizeExRequest_default_instance_;
class Request_GetQuoteExRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_GetQuoteExRequest> _instance;
} _Request_GetQuoteExRequest_default_instance_;
class Request_GetSupportedAttKeyIDNumRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_GetSupportedAttKeyIDNumRequest> _instance;
} _Request_GetSupportedAttKeyIDNumRequest_default_instance_;
class Request_GetSupportedAttKeyIDsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_GetSupportedAttKeyIDsRequest> _instance;
} _Request_GetSupportedAttKeyIDsRequest_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class Response_InitQuoteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_InitQuoteResponse> _instance;
} _Response_InitQuoteResponse_default_instance_;
class Response_GetQuoteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_GetQuoteResponse> _instance;
} _Response_GetQuoteResponse_default_instance_;
class Response_GetLaunchTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_GetLaunchTokenResponse> _instance;
} _Response_GetLaunchTokenResponse_default_instance_;
class Response_ReportAttestationErrorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_ReportAttestationErrorResponse> _instance;
} _Response_ReportAttestationErrorResponse_default_instance_;
class Response_CheckUpdateStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_CheckUpdateStatusResponse> _instance;
} _Response_CheckUpdateStatusResponse_default_instance_;
class Response_GetWhiteListSizeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_GetWhiteListSizeResponse> _instance;
} _Response_GetWhiteListSizeResponse_default_instance_;
class Response_GetWhiteListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_GetWhiteListResponse> _instance;
} _Response_GetWhiteListResponse_default_instance_;
class Response_SGXGetExtendedEpidGroupIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_SGXGetExtendedEpidGroupIdResponse> _instance;
} _Response_SGXGetExtendedEpidGroupIdResponse_default_instance_;
class Response_SGXSwitchExtendedEpidGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_SGXSwitchExtendedEpidGroupResponse> _instance;
} _Response_SGXSwitchExtendedEpidGroupResponse_default_instance_;
class Response_SGXRegisterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_SGXRegisterResponse> _instance;
} _Response_SGXRegisterResponse_default_instance_;
class Response_SelectAttKeyIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_SelectAttKeyIDResponse> _instance;
} _Response_SelectAttKeyIDResponse_default_instance_;
class Response_InitQuoteExResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_InitQuoteExResponse> _instance;
} _Response_InitQuoteExResponse_default_instance_;
class Response_GetQuoteSizeExResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_GetQuoteSizeExResponse> _instance;
} _Response_GetQuoteSizeExResponse_default_instance_;
class Response_GetQuoteExResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_GetQuoteExResponse> _instance;
} _Response_GetQuoteExResponse_default_instance_;
class Response_UnsupportedRequestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_UnsupportedRequestResponse> _instance;
} _Response_UnsupportedRequestResponse_default_instance_;
class Response_GetSupportedAttKeyIDNumResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_GetSupportedAttKeyIDNumResponse> _instance;
} _Response_GetSupportedAttKeyIDNumResponse_default_instance_;
class Response_GetSupportedAttKeyIDsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response_GetSupportedAttKeyIDsResponse> _instance;
} _Response_GetSupportedAttKeyIDsResponse_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
}  // namespace message
}  // namespace aesm
static void InitDefaultsscc_info_Request_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_default_instance_;
    new (ptr) ::aesm::message::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_Request_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 16, 0, InitDefaultsscc_info_Request_messages_2eproto}, {
      &scc_info_Request_InitQuoteRequest_messages_2eproto.base,
      &scc_info_Request_GetQuoteRequest_messages_2eproto.base,
      &scc_info_Request_GetLaunchTokenRequest_messages_2eproto.base,
      &scc_info_Request_ReportAttestationErrorRequest_messages_2eproto.base,
      &scc_info_Request_GetWhiteListSizeRequest_messages_2eproto.base,
      &scc_info_Request_GetWhiteListRequest_messages_2eproto.base,
      &scc_info_Request_SGXGetExtendedEpidGroupIdRequest_messages_2eproto.base,
      &scc_info_Request_SGXSwitchExtendedEpidGroupRequest_messages_2eproto.base,
      &scc_info_Request_SGXRegisterRequest_messages_2eproto.base,
      &scc_info_Request_InitQuoteExRequest_messages_2eproto.base,
      &scc_info_Request_GetQuoteSizeExRequest_messages_2eproto.base,
      &scc_info_Request_GetQuoteExRequest_messages_2eproto.base,
      &scc_info_Request_CheckUpdateStatusRequest_messages_2eproto.base,
      &scc_info_Request_SelectAttKeyIDRequest_messages_2eproto.base,
      &scc_info_Request_GetSupportedAttKeyIDNumRequest_messages_2eproto.base,
      &scc_info_Request_GetSupportedAttKeyIDsRequest_messages_2eproto.base,}};

static void InitDefaultsscc_info_Request_CheckUpdateStatusRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_CheckUpdateStatusRequest_default_instance_;
    new (ptr) ::aesm::message::Request_CheckUpdateStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_CheckUpdateStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_CheckUpdateStatusRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_CheckUpdateStatusRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_GetLaunchTokenRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetLaunchTokenRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetLaunchTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetLaunchTokenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetLaunchTokenRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_GetLaunchTokenRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_GetQuoteExRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetQuoteExRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetQuoteExRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetQuoteExRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetQuoteExRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_GetQuoteExRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_GetQuoteRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetQuoteRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetQuoteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetQuoteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetQuoteRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_GetQuoteRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_GetQuoteSizeExRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetQuoteSizeExRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetQuoteSizeExRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetQuoteSizeExRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetQuoteSizeExRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_GetQuoteSizeExRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_GetSupportedAttKeyIDNumRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetSupportedAttKeyIDNumRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetSupportedAttKeyIDNumRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetSupportedAttKeyIDNumRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetSupportedAttKeyIDNumRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_GetSupportedAttKeyIDNumRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_GetSupportedAttKeyIDsRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetSupportedAttKeyIDsRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetSupportedAttKeyIDsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetSupportedAttKeyIDsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetSupportedAttKeyIDsRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_GetSupportedAttKeyIDsRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_GetWhiteListRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetWhiteListRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetWhiteListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetWhiteListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetWhiteListRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_GetWhiteListRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_GetWhiteListSizeRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetWhiteListSizeRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetWhiteListSizeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetWhiteListSizeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_GetWhiteListSizeRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_GetWhiteListSizeRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_InitQuoteExRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_InitQuoteExRequest_default_instance_;
    new (ptr) ::aesm::message::Request_InitQuoteExRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_InitQuoteExRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_InitQuoteExRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_InitQuoteExRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_InitQuoteRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_InitQuoteRequest_default_instance_;
    new (ptr) ::aesm::message::Request_InitQuoteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_InitQuoteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_InitQuoteRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_InitQuoteRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_ReportAttestationErrorRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_ReportAttestationErrorRequest_default_instance_;
    new (ptr) ::aesm::message::Request_ReportAttestationErrorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_ReportAttestationErrorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_ReportAttestationErrorRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_ReportAttestationErrorRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_SGXGetExtendedEpidGroupIdRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_SGXGetExtendedEpidGroupIdRequest_default_instance_;
    new (ptr) ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_SGXGetExtendedEpidGroupIdRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_SGXGetExtendedEpidGroupIdRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_SGXRegisterRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_SGXRegisterRequest_default_instance_;
    new (ptr) ::aesm::message::Request_SGXRegisterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_SGXRegisterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_SGXRegisterRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_SGXRegisterRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_SGXSwitchExtendedEpidGroupRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_SGXSwitchExtendedEpidGroupRequest_default_instance_;
    new (ptr) ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_SGXSwitchExtendedEpidGroupRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_SGXSwitchExtendedEpidGroupRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Request_SelectAttKeyIDRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_SelectAttKeyIDRequest_default_instance_;
    new (ptr) ::aesm::message::Request_SelectAttKeyIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_SelectAttKeyIDRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_SelectAttKeyIDRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_SelectAttKeyIDRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_default_instance_;
    new (ptr) ::aesm::message::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_Response_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 17, 0, InitDefaultsscc_info_Response_messages_2eproto}, {
      &scc_info_Response_InitQuoteResponse_messages_2eproto.base,
      &scc_info_Response_GetQuoteResponse_messages_2eproto.base,
      &scc_info_Response_GetLaunchTokenResponse_messages_2eproto.base,
      &scc_info_Response_ReportAttestationErrorResponse_messages_2eproto.base,
      &scc_info_Response_GetWhiteListSizeResponse_messages_2eproto.base,
      &scc_info_Response_GetWhiteListResponse_messages_2eproto.base,
      &scc_info_Response_SGXGetExtendedEpidGroupIdResponse_messages_2eproto.base,
      &scc_info_Response_SGXSwitchExtendedEpidGroupResponse_messages_2eproto.base,
      &scc_info_Response_SGXRegisterResponse_messages_2eproto.base,
      &scc_info_Response_InitQuoteExResponse_messages_2eproto.base,
      &scc_info_Response_GetQuoteSizeExResponse_messages_2eproto.base,
      &scc_info_Response_GetQuoteExResponse_messages_2eproto.base,
      &scc_info_Response_CheckUpdateStatusResponse_messages_2eproto.base,
      &scc_info_Response_SelectAttKeyIDResponse_messages_2eproto.base,
      &scc_info_Response_UnsupportedRequestResponse_messages_2eproto.base,
      &scc_info_Response_GetSupportedAttKeyIDNumResponse_messages_2eproto.base,
      &scc_info_Response_GetSupportedAttKeyIDsResponse_messages_2eproto.base,}};

static void InitDefaultsscc_info_Response_CheckUpdateStatusResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_CheckUpdateStatusResponse_default_instance_;
    new (ptr) ::aesm::message::Response_CheckUpdateStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_CheckUpdateStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_CheckUpdateStatusResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_CheckUpdateStatusResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_GetLaunchTokenResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetLaunchTokenResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetLaunchTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetLaunchTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetLaunchTokenResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_GetLaunchTokenResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_GetQuoteExResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetQuoteExResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetQuoteExResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetQuoteExResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetQuoteExResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_GetQuoteExResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_GetQuoteResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetQuoteResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetQuoteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetQuoteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetQuoteResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_GetQuoteResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_GetQuoteSizeExResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetQuoteSizeExResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetQuoteSizeExResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetQuoteSizeExResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetQuoteSizeExResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_GetQuoteSizeExResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_GetSupportedAttKeyIDNumResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetSupportedAttKeyIDNumResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetSupportedAttKeyIDNumResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetSupportedAttKeyIDNumResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetSupportedAttKeyIDNumResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_GetSupportedAttKeyIDNumResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_GetSupportedAttKeyIDsResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetSupportedAttKeyIDsResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetSupportedAttKeyIDsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetSupportedAttKeyIDsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetSupportedAttKeyIDsResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_GetSupportedAttKeyIDsResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_GetWhiteListResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetWhiteListResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetWhiteListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetWhiteListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetWhiteListResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_GetWhiteListResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_GetWhiteListSizeResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetWhiteListSizeResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetWhiteListSizeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetWhiteListSizeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_GetWhiteListSizeResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_GetWhiteListSizeResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_InitQuoteExResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_InitQuoteExResponse_default_instance_;
    new (ptr) ::aesm::message::Response_InitQuoteExResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_InitQuoteExResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_InitQuoteExResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_InitQuoteExResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_InitQuoteResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_InitQuoteResponse_default_instance_;
    new (ptr) ::aesm::message::Response_InitQuoteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_InitQuoteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_InitQuoteResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_InitQuoteResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_ReportAttestationErrorResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_ReportAttestationErrorResponse_default_instance_;
    new (ptr) ::aesm::message::Response_ReportAttestationErrorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_ReportAttestationErrorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_ReportAttestationErrorResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_ReportAttestationErrorResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_SGXGetExtendedEpidGroupIdResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_SGXGetExtendedEpidGroupIdResponse_default_instance_;
    new (ptr) ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_SGXGetExtendedEpidGroupIdResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_SGXGetExtendedEpidGroupIdResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_SGXRegisterResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_SGXRegisterResponse_default_instance_;
    new (ptr) ::aesm::message::Response_SGXRegisterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_SGXRegisterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_SGXRegisterResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_SGXRegisterResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_SGXSwitchExtendedEpidGroupResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_SGXSwitchExtendedEpidGroupResponse_default_instance_;
    new (ptr) ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_SGXSwitchExtendedEpidGroupResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_SGXSwitchExtendedEpidGroupResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_SelectAttKeyIDResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_SelectAttKeyIDResponse_default_instance_;
    new (ptr) ::aesm::message::Response_SelectAttKeyIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_SelectAttKeyIDResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_SelectAttKeyIDResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_SelectAttKeyIDResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_Response_UnsupportedRequestResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_UnsupportedRequestResponse_default_instance_;
    new (ptr) ::aesm::message::Response_UnsupportedRequestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_UnsupportedRequestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_UnsupportedRequestResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_UnsupportedRequestResponse_messages_2eproto}, {}};

namespace aesm {
namespace message {

// ===================================================================

void Request_InitQuoteRequest::InitAsDefaultInstance() {
}
class Request_InitQuoteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_InitQuoteRequest>()._has_bits_);
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Request_InitQuoteRequest::Request_InitQuoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.InitQuoteRequest)
}
Request_InitQuoteRequest::Request_InitQuoteRequest(const Request_InitQuoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.InitQuoteRequest)
}

void Request_InitQuoteRequest::SharedCtor() {
  timeout_ = 0u;
}

Request_InitQuoteRequest::~Request_InitQuoteRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.InitQuoteRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_InitQuoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Request_InitQuoteRequest::ArenaDtor(void* object) {
  Request_InitQuoteRequest* _this = reinterpret_cast< Request_InitQuoteRequest* >(object);
  (void)_this;
}
void Request_InitQuoteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_InitQuoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_InitQuoteRequest& Request_InitQuoteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_InitQuoteRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_InitQuoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.InitQuoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_InitQuoteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_InitQuoteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.InitQuoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.InitQuoteRequest)
  return target;
}

size_t Request_InitQuoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.InitQuoteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timeout = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_InitQuoteRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_InitQuoteRequest*>(
      &from));
}

void Request_InitQuoteRequest::MergeFrom(const Request_InitQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.InitQuoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timeout()) {
    _internal_set_timeout(from._internal_timeout());
  }
}

void Request_InitQuoteRequest::CopyFrom(const Request_InitQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.InitQuoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_InitQuoteRequest::IsInitialized() const {
  return true;
}

void Request_InitQuoteRequest::InternalSwap(Request_InitQuoteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timeout_, other->timeout_);
}

std::string Request_InitQuoteRequest::GetTypeName() const {
  return "aesm.message.Request.InitQuoteRequest";
}


// ===================================================================

void Request_GetQuoteRequest::InitAsDefaultInstance() {
}
class Request_GetQuoteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_GetQuoteRequest>()._has_bits_);
  static void set_has_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quote_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_spid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sig_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buf_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_qe_report(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000033) ^ 0x00000033) != 0;
  }
};

Request_GetQuoteRequest::Request_GetQuoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.GetQuoteRequest)
}
Request_GetQuoteRequest::Request_GetQuoteRequest(const Request_GetQuoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_report()) {
    report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_report(),
      GetArena());
  }
  spid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_spid()) {
    spid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_spid(),
      GetArena());
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nonce()) {
    nonce_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nonce(),
      GetArena());
  }
  sig_rl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sig_rl()) {
    sig_rl_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sig_rl(),
      GetArena());
  }
  ::memcpy(&quote_type_, &from.quote_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&quote_type_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetQuoteRequest)
}

void Request_GetQuoteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_GetQuoteRequest_messages_2eproto.base);
  report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_rl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&quote_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&quote_type_)) + sizeof(timeout_));
}

Request_GetQuoteRequest::~Request_GetQuoteRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetQuoteRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_GetQuoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_rl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request_GetQuoteRequest::ArenaDtor(void* object) {
  Request_GetQuoteRequest* _this = reinterpret_cast< Request_GetQuoteRequest* >(object);
  (void)_this;
}
void Request_GetQuoteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_GetQuoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetQuoteRequest& Request_GetQuoteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_GetQuoteRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_GetQuoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetQuoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      report_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      spid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      nonce_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      sig_rl_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&quote_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&quote_type_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_GetQuoteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_report();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 quote_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quote_type(&has_bits);
          quote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes spid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_spid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes nonce = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sig_rl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sig_rl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 buf_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_buf_size(&has_bits);
          buf_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool qe_report = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_qe_report(&has_bits);
          qe_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_GetQuoteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetQuoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes report = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_report(), target);
  }

  // required uint32 quote_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quote_type(), target);
  }

  // required bytes spid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_spid(), target);
  }

  // optional bytes nonce = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_nonce(), target);
  }

  // optional bytes sig_rl = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sig_rl(), target);
  }

  // required uint32 buf_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_buf_size(), target);
  }

  // optional bool qe_report = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_qe_report(), target);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetQuoteRequest)
  return target;
}

size_t Request_GetQuoteRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.GetQuoteRequest)
  size_t total_size = 0;

  if (_internal_has_report()) {
    // required bytes report = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_report());
  }

  if (_internal_has_spid()) {
    // required bytes spid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_spid());
  }

  if (_internal_has_quote_type()) {
    // required uint32 quote_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_quote_type());
  }

  if (_internal_has_buf_size()) {
    // required uint32 buf_size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buf_size());
  }

  return total_size;
}
size_t Request_GetQuoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetQuoteRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000033) ^ 0x00000033) == 0) {  // All required fields are present.
    // required bytes report = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_report());

    // required bytes spid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_spid());

    // required uint32 quote_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_quote_type());

    // required uint32 buf_size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buf_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional bytes nonce = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_nonce());
    }

    // optional bytes sig_rl = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sig_rl());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional bool qe_report = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 timeout = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timeout());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetQuoteRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_GetQuoteRequest*>(
      &from));
}

void Request_GetQuoteRequest::MergeFrom(const Request_GetQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetQuoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_report(from._internal_report());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_spid(from._internal_spid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_nonce(from._internal_nonce());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_sig_rl(from._internal_sig_rl());
    }
    if (cached_has_bits & 0x00000010u) {
      quote_type_ = from.quote_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      buf_size_ = from.buf_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      qe_report_ = from.qe_report_;
    }
    if (cached_has_bits & 0x00000080u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetQuoteRequest::CopyFrom(const Request_GetQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetQuoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetQuoteRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Request_GetQuoteRequest::InternalSwap(Request_GetQuoteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  report_.Swap(&other->report_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spid_.Swap(&other->spid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sig_rl_.Swap(&other->sig_rl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request_GetQuoteRequest, timeout_)
      + sizeof(Request_GetQuoteRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(Request_GetQuoteRequest, quote_type_)>(
          reinterpret_cast<char*>(&quote_type_),
          reinterpret_cast<char*>(&other->quote_type_));
}

std::string Request_GetQuoteRequest::GetTypeName() const {
  return "aesm.message.Request.GetQuoteRequest";
}


// ===================================================================

void Request_GetLaunchTokenRequest::InitAsDefaultInstance() {
}
class Request_GetLaunchTokenRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_GetLaunchTokenRequest>()._has_bits_);
  static void set_has_mr_enclave(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mr_signer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_se_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Request_GetLaunchTokenRequest::Request_GetLaunchTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.GetLaunchTokenRequest)
}
Request_GetLaunchTokenRequest::Request_GetLaunchTokenRequest(const Request_GetLaunchTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  mr_enclave_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mr_enclave()) {
    mr_enclave_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mr_enclave(),
      GetArena());
  }
  mr_signer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mr_signer()) {
    mr_signer_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mr_signer(),
      GetArena());
  }
  se_attributes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_se_attributes()) {
    se_attributes_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_se_attributes(),
      GetArena());
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetLaunchTokenRequest)
}

void Request_GetLaunchTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_GetLaunchTokenRequest_messages_2eproto.base);
  mr_enclave_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mr_signer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  se_attributes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
}

Request_GetLaunchTokenRequest::~Request_GetLaunchTokenRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetLaunchTokenRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_GetLaunchTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mr_enclave_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mr_signer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  se_attributes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request_GetLaunchTokenRequest::ArenaDtor(void* object) {
  Request_GetLaunchTokenRequest* _this = reinterpret_cast< Request_GetLaunchTokenRequest* >(object);
  (void)_this;
}
void Request_GetLaunchTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_GetLaunchTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetLaunchTokenRequest& Request_GetLaunchTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_GetLaunchTokenRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_GetLaunchTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetLaunchTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mr_enclave_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mr_signer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      se_attributes_.ClearNonDefaultToEmpty();
    }
  }
  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_GetLaunchTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes mr_enclave = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mr_enclave();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes mr_signer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mr_signer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes se_attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_se_attributes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_GetLaunchTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetLaunchTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes mr_enclave = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mr_enclave(), target);
  }

  // required bytes mr_signer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mr_signer(), target);
  }

  // required bytes se_attributes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_se_attributes(), target);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetLaunchTokenRequest)
  return target;
}

size_t Request_GetLaunchTokenRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.GetLaunchTokenRequest)
  size_t total_size = 0;

  if (_internal_has_mr_enclave()) {
    // required bytes mr_enclave = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mr_enclave());
  }

  if (_internal_has_mr_signer()) {
    // required bytes mr_signer = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mr_signer());
  }

  if (_internal_has_se_attributes()) {
    // required bytes se_attributes = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_se_attributes());
  }

  return total_size;
}
size_t Request_GetLaunchTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetLaunchTokenRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes mr_enclave = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mr_enclave());

    // required bytes mr_signer = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mr_signer());

    // required bytes se_attributes = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_se_attributes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timeout = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetLaunchTokenRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_GetLaunchTokenRequest*>(
      &from));
}

void Request_GetLaunchTokenRequest::MergeFrom(const Request_GetLaunchTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetLaunchTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mr_enclave(from._internal_mr_enclave());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mr_signer(from._internal_mr_signer());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_se_attributes(from._internal_se_attributes());
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetLaunchTokenRequest::CopyFrom(const Request_GetLaunchTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetLaunchTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetLaunchTokenRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Request_GetLaunchTokenRequest::InternalSwap(Request_GetLaunchTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mr_enclave_.Swap(&other->mr_enclave_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mr_signer_.Swap(&other->mr_signer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  se_attributes_.Swap(&other->se_attributes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timeout_, other->timeout_);
}

std::string Request_GetLaunchTokenRequest::GetTypeName() const {
  return "aesm.message.Request.GetLaunchTokenRequest";
}


// ===================================================================

void Request_ReportAttestationErrorRequest::InitAsDefaultInstance() {
}
class Request_ReportAttestationErrorRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_ReportAttestationErrorRequest>()._has_bits_);
  static void set_has_platform_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attestation_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_update_info_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Request_ReportAttestationErrorRequest::Request_ReportAttestationErrorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.ReportAttestationErrorRequest)
}
Request_ReportAttestationErrorRequest::Request_ReportAttestationErrorRequest(const Request_ReportAttestationErrorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  platform_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform_info()) {
    platform_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform_info(),
      GetArena());
  }
  ::memcpy(&attestation_error_code_, &from.attestation_error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&attestation_error_code_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.ReportAttestationErrorRequest)
}

void Request_ReportAttestationErrorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_ReportAttestationErrorRequest_messages_2eproto.base);
  platform_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attestation_error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&attestation_error_code_)) + sizeof(timeout_));
}

Request_ReportAttestationErrorRequest::~Request_ReportAttestationErrorRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.ReportAttestationErrorRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_ReportAttestationErrorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  platform_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request_ReportAttestationErrorRequest::ArenaDtor(void* object) {
  Request_ReportAttestationErrorRequest* _this = reinterpret_cast< Request_ReportAttestationErrorRequest* >(object);
  (void)_this;
}
void Request_ReportAttestationErrorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_ReportAttestationErrorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_ReportAttestationErrorRequest& Request_ReportAttestationErrorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_ReportAttestationErrorRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_ReportAttestationErrorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.ReportAttestationErrorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    platform_info_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&attestation_error_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&attestation_error_code_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_ReportAttestationErrorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes platform_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_platform_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 attestation_error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attestation_error_code(&has_bits);
          attestation_error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 update_info_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_update_info_size(&has_bits);
          update_info_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_ReportAttestationErrorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.ReportAttestationErrorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes platform_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_platform_info(), target);
  }

  // required uint32 attestation_error_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attestation_error_code(), target);
  }

  // required uint32 update_info_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_update_info_size(), target);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.ReportAttestationErrorRequest)
  return target;
}

size_t Request_ReportAttestationErrorRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.ReportAttestationErrorRequest)
  size_t total_size = 0;

  if (_internal_has_platform_info()) {
    // required bytes platform_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_platform_info());
  }

  if (_internal_has_attestation_error_code()) {
    // required uint32 attestation_error_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attestation_error_code());
  }

  if (_internal_has_update_info_size()) {
    // required uint32 update_info_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_update_info_size());
  }

  return total_size;
}
size_t Request_ReportAttestationErrorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.ReportAttestationErrorRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes platform_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_platform_info());

    // required uint32 attestation_error_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attestation_error_code());

    // required uint32 update_info_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_update_info_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timeout = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_ReportAttestationErrorRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_ReportAttestationErrorRequest*>(
      &from));
}

void Request_ReportAttestationErrorRequest::MergeFrom(const Request_ReportAttestationErrorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.ReportAttestationErrorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_platform_info(from._internal_platform_info());
    }
    if (cached_has_bits & 0x00000002u) {
      attestation_error_code_ = from.attestation_error_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      update_info_size_ = from.update_info_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_ReportAttestationErrorRequest::CopyFrom(const Request_ReportAttestationErrorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.ReportAttestationErrorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_ReportAttestationErrorRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Request_ReportAttestationErrorRequest::InternalSwap(Request_ReportAttestationErrorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  platform_info_.Swap(&other->platform_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request_ReportAttestationErrorRequest, timeout_)
      + sizeof(Request_ReportAttestationErrorRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(Request_ReportAttestationErrorRequest, attestation_error_code_)>(
          reinterpret_cast<char*>(&attestation_error_code_),
          reinterpret_cast<char*>(&other->attestation_error_code_));
}

std::string Request_ReportAttestationErrorRequest::GetTypeName() const {
  return "aesm.message.Request.ReportAttestationErrorRequest";
}


// ===================================================================

void Request_CheckUpdateStatusRequest::InitAsDefaultInstance() {
}
class Request_CheckUpdateStatusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_CheckUpdateStatusRequest>()._has_bits_);
  static void set_has_platform_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_update_info_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

Request_CheckUpdateStatusRequest::Request_CheckUpdateStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.CheckUpdateStatusRequest)
}
Request_CheckUpdateStatusRequest::Request_CheckUpdateStatusRequest(const Request_CheckUpdateStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  platform_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform_info()) {
    platform_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform_info(),
      GetArena());
  }
  ::memcpy(&update_info_size_, &from.update_info_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&update_info_size_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.CheckUpdateStatusRequest)
}

void Request_CheckUpdateStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_CheckUpdateStatusRequest_messages_2eproto.base);
  platform_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&update_info_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&update_info_size_)) + sizeof(timeout_));
}

Request_CheckUpdateStatusRequest::~Request_CheckUpdateStatusRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.CheckUpdateStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_CheckUpdateStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  platform_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request_CheckUpdateStatusRequest::ArenaDtor(void* object) {
  Request_CheckUpdateStatusRequest* _this = reinterpret_cast< Request_CheckUpdateStatusRequest* >(object);
  (void)_this;
}
void Request_CheckUpdateStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_CheckUpdateStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_CheckUpdateStatusRequest& Request_CheckUpdateStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_CheckUpdateStatusRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_CheckUpdateStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.CheckUpdateStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    platform_info_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&update_info_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&update_info_size_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_CheckUpdateStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes platform_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_platform_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 update_info_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_update_info_size(&has_bits);
          update_info_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_config(&has_bits);
          config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_CheckUpdateStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.CheckUpdateStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes platform_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_platform_info(), target);
  }

  // required uint32 update_info_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_update_info_size(), target);
  }

  // required uint32 config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_config(), target);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.CheckUpdateStatusRequest)
  return target;
}

size_t Request_CheckUpdateStatusRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.CheckUpdateStatusRequest)
  size_t total_size = 0;

  if (_internal_has_update_info_size()) {
    // required uint32 update_info_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_update_info_size());
  }

  if (_internal_has_config()) {
    // required uint32 config = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_config());
  }

  return total_size;
}
size_t Request_CheckUpdateStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.CheckUpdateStatusRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 update_info_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_update_info_size());

    // required uint32 config = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_config());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes platform_info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_platform_info());
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_CheckUpdateStatusRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_CheckUpdateStatusRequest*>(
      &from));
}

void Request_CheckUpdateStatusRequest::MergeFrom(const Request_CheckUpdateStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.CheckUpdateStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_platform_info(from._internal_platform_info());
    }
    if (cached_has_bits & 0x00000002u) {
      update_info_size_ = from.update_info_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      config_ = from.config_;
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_CheckUpdateStatusRequest::CopyFrom(const Request_CheckUpdateStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.CheckUpdateStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_CheckUpdateStatusRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Request_CheckUpdateStatusRequest::InternalSwap(Request_CheckUpdateStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  platform_info_.Swap(&other->platform_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request_CheckUpdateStatusRequest, timeout_)
      + sizeof(Request_CheckUpdateStatusRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(Request_CheckUpdateStatusRequest, update_info_size_)>(
          reinterpret_cast<char*>(&update_info_size_),
          reinterpret_cast<char*>(&other->update_info_size_));
}

std::string Request_CheckUpdateStatusRequest::GetTypeName() const {
  return "aesm.message.Request.CheckUpdateStatusRequest";
}


// ===================================================================

void Request_GetWhiteListSizeRequest::InitAsDefaultInstance() {
}
class Request_GetWhiteListSizeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_GetWhiteListSizeRequest>()._has_bits_);
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Request_GetWhiteListSizeRequest::Request_GetWhiteListSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.GetWhiteListSizeRequest)
}
Request_GetWhiteListSizeRequest::Request_GetWhiteListSizeRequest(const Request_GetWhiteListSizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetWhiteListSizeRequest)
}

void Request_GetWhiteListSizeRequest::SharedCtor() {
  timeout_ = 0u;
}

Request_GetWhiteListSizeRequest::~Request_GetWhiteListSizeRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetWhiteListSizeRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_GetWhiteListSizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Request_GetWhiteListSizeRequest::ArenaDtor(void* object) {
  Request_GetWhiteListSizeRequest* _this = reinterpret_cast< Request_GetWhiteListSizeRequest* >(object);
  (void)_this;
}
void Request_GetWhiteListSizeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_GetWhiteListSizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetWhiteListSizeRequest& Request_GetWhiteListSizeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_GetWhiteListSizeRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_GetWhiteListSizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetWhiteListSizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_GetWhiteListSizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_GetWhiteListSizeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetWhiteListSizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetWhiteListSizeRequest)
  return target;
}

size_t Request_GetWhiteListSizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetWhiteListSizeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timeout = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetWhiteListSizeRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_GetWhiteListSizeRequest*>(
      &from));
}

void Request_GetWhiteListSizeRequest::MergeFrom(const Request_GetWhiteListSizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetWhiteListSizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timeout()) {
    _internal_set_timeout(from._internal_timeout());
  }
}

void Request_GetWhiteListSizeRequest::CopyFrom(const Request_GetWhiteListSizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetWhiteListSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetWhiteListSizeRequest::IsInitialized() const {
  return true;
}

void Request_GetWhiteListSizeRequest::InternalSwap(Request_GetWhiteListSizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timeout_, other->timeout_);
}

std::string Request_GetWhiteListSizeRequest::GetTypeName() const {
  return "aesm.message.Request.GetWhiteListSizeRequest";
}


// ===================================================================

void Request_GetWhiteListRequest::InitAsDefaultInstance() {
}
class Request_GetWhiteListRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_GetWhiteListRequest>()._has_bits_);
  static void set_has_white_list_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Request_GetWhiteListRequest::Request_GetWhiteListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.GetWhiteListRequest)
}
Request_GetWhiteListRequest::Request_GetWhiteListRequest(const Request_GetWhiteListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&white_list_size_, &from.white_list_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&white_list_size_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetWhiteListRequest)
}

void Request_GetWhiteListRequest::SharedCtor() {
  ::memset(&white_list_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&white_list_size_)) + sizeof(timeout_));
}

Request_GetWhiteListRequest::~Request_GetWhiteListRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetWhiteListRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_GetWhiteListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Request_GetWhiteListRequest::ArenaDtor(void* object) {
  Request_GetWhiteListRequest* _this = reinterpret_cast< Request_GetWhiteListRequest* >(object);
  (void)_this;
}
void Request_GetWhiteListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_GetWhiteListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetWhiteListRequest& Request_GetWhiteListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_GetWhiteListRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_GetWhiteListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetWhiteListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&white_list_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&white_list_size_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_GetWhiteListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 white_list_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_white_list_size(&has_bits);
          white_list_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_GetWhiteListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetWhiteListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 white_list_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_white_list_size(), target);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetWhiteListRequest)
  return target;
}

size_t Request_GetWhiteListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetWhiteListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 white_list_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_white_list_size());
    }

    // optional uint32 timeout = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timeout());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetWhiteListRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_GetWhiteListRequest*>(
      &from));
}

void Request_GetWhiteListRequest::MergeFrom(const Request_GetWhiteListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetWhiteListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      white_list_size_ = from.white_list_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetWhiteListRequest::CopyFrom(const Request_GetWhiteListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetWhiteListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetWhiteListRequest::IsInitialized() const {
  return true;
}

void Request_GetWhiteListRequest::InternalSwap(Request_GetWhiteListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request_GetWhiteListRequest, timeout_)
      + sizeof(Request_GetWhiteListRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(Request_GetWhiteListRequest, white_list_size_)>(
          reinterpret_cast<char*>(&white_list_size_),
          reinterpret_cast<char*>(&other->white_list_size_));
}

std::string Request_GetWhiteListRequest::GetTypeName() const {
  return "aesm.message.Request.GetWhiteListRequest";
}


// ===================================================================

void Request_SGXGetExtendedEpidGroupIdRequest::InitAsDefaultInstance() {
}
class Request_SGXGetExtendedEpidGroupIdRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_SGXGetExtendedEpidGroupIdRequest>()._has_bits_);
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Request_SGXGetExtendedEpidGroupIdRequest::Request_SGXGetExtendedEpidGroupIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
}
Request_SGXGetExtendedEpidGroupIdRequest::Request_SGXGetExtendedEpidGroupIdRequest(const Request_SGXGetExtendedEpidGroupIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
}

void Request_SGXGetExtendedEpidGroupIdRequest::SharedCtor() {
  timeout_ = 0u;
}

Request_SGXGetExtendedEpidGroupIdRequest::~Request_SGXGetExtendedEpidGroupIdRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_SGXGetExtendedEpidGroupIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Request_SGXGetExtendedEpidGroupIdRequest::ArenaDtor(void* object) {
  Request_SGXGetExtendedEpidGroupIdRequest* _this = reinterpret_cast< Request_SGXGetExtendedEpidGroupIdRequest* >(object);
  (void)_this;
}
void Request_SGXGetExtendedEpidGroupIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_SGXGetExtendedEpidGroupIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_SGXGetExtendedEpidGroupIdRequest& Request_SGXGetExtendedEpidGroupIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_SGXGetExtendedEpidGroupIdRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_SGXGetExtendedEpidGroupIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_SGXGetExtendedEpidGroupIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_SGXGetExtendedEpidGroupIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  return target;
}

size_t Request_SGXGetExtendedEpidGroupIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timeout = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_SGXGetExtendedEpidGroupIdRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_SGXGetExtendedEpidGroupIdRequest*>(
      &from));
}

void Request_SGXGetExtendedEpidGroupIdRequest::MergeFrom(const Request_SGXGetExtendedEpidGroupIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timeout()) {
    _internal_set_timeout(from._internal_timeout());
  }
}

void Request_SGXGetExtendedEpidGroupIdRequest::CopyFrom(const Request_SGXGetExtendedEpidGroupIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXGetExtendedEpidGroupIdRequest::IsInitialized() const {
  return true;
}

void Request_SGXGetExtendedEpidGroupIdRequest::InternalSwap(Request_SGXGetExtendedEpidGroupIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timeout_, other->timeout_);
}

std::string Request_SGXGetExtendedEpidGroupIdRequest::GetTypeName() const {
  return "aesm.message.Request.SGXGetExtendedEpidGroupIdRequest";
}


// ===================================================================

void Request_SGXSwitchExtendedEpidGroupRequest::InitAsDefaultInstance() {
}
class Request_SGXSwitchExtendedEpidGroupRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_SGXSwitchExtendedEpidGroupRequest>()._has_bits_);
  static void set_has_x_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Request_SGXSwitchExtendedEpidGroupRequest::Request_SGXSwitchExtendedEpidGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
}
Request_SGXSwitchExtendedEpidGroupRequest::Request_SGXSwitchExtendedEpidGroupRequest(const Request_SGXSwitchExtendedEpidGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&x_group_id_, &from.x_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&x_group_id_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
}

void Request_SGXSwitchExtendedEpidGroupRequest::SharedCtor() {
  ::memset(&x_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&x_group_id_)) + sizeof(timeout_));
}

Request_SGXSwitchExtendedEpidGroupRequest::~Request_SGXSwitchExtendedEpidGroupRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_SGXSwitchExtendedEpidGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Request_SGXSwitchExtendedEpidGroupRequest::ArenaDtor(void* object) {
  Request_SGXSwitchExtendedEpidGroupRequest* _this = reinterpret_cast< Request_SGXSwitchExtendedEpidGroupRequest* >(object);
  (void)_this;
}
void Request_SGXSwitchExtendedEpidGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_SGXSwitchExtendedEpidGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_SGXSwitchExtendedEpidGroupRequest& Request_SGXSwitchExtendedEpidGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_SGXSwitchExtendedEpidGroupRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_SGXSwitchExtendedEpidGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&x_group_id_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_SGXSwitchExtendedEpidGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 x_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x_group_id(&has_bits);
          x_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_SGXSwitchExtendedEpidGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x_group_id(), target);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  return target;
}

size_t Request_SGXSwitchExtendedEpidGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 x_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x_group_id());
    }

    // optional uint32 timeout = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timeout());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_SGXSwitchExtendedEpidGroupRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_SGXSwitchExtendedEpidGroupRequest*>(
      &from));
}

void Request_SGXSwitchExtendedEpidGroupRequest::MergeFrom(const Request_SGXSwitchExtendedEpidGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_group_id_ = from.x_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_SGXSwitchExtendedEpidGroupRequest::CopyFrom(const Request_SGXSwitchExtendedEpidGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXSwitchExtendedEpidGroupRequest::IsInitialized() const {
  return true;
}

void Request_SGXSwitchExtendedEpidGroupRequest::InternalSwap(Request_SGXSwitchExtendedEpidGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request_SGXSwitchExtendedEpidGroupRequest, timeout_)
      + sizeof(Request_SGXSwitchExtendedEpidGroupRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(Request_SGXSwitchExtendedEpidGroupRequest, x_group_id_)>(
          reinterpret_cast<char*>(&x_group_id_),
          reinterpret_cast<char*>(&other->x_group_id_));
}

std::string Request_SGXSwitchExtendedEpidGroupRequest::GetTypeName() const {
  return "aesm.message.Request.SGXSwitchExtendedEpidGroupRequest";
}


// ===================================================================

void Request_SGXRegisterRequest::InitAsDefaultInstance() {
}
class Request_SGXRegisterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_SGXRegisterRequest>()._has_bits_);
  static void set_has_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Request_SGXRegisterRequest::Request_SGXRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.SGXRegisterRequest)
}
Request_SGXRegisterRequest::Request_SGXRegisterRequest(const Request_SGXRegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_buf()) {
    buf_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_buf(),
      GetArena());
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXRegisterRequest)
}

void Request_SGXRegisterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_SGXRegisterRequest_messages_2eproto.base);
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(timeout_));
}

Request_SGXRegisterRequest::~Request_SGXRegisterRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXRegisterRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_SGXRegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request_SGXRegisterRequest::ArenaDtor(void* object) {
  Request_SGXRegisterRequest* _this = reinterpret_cast< Request_SGXRegisterRequest* >(object);
  (void)_this;
}
void Request_SGXRegisterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_SGXRegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_SGXRegisterRequest& Request_SGXRegisterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_SGXRegisterRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_SGXRegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.SGXRegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buf_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&data_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&data_type_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_SGXRegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes buf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_data_type(&has_bits);
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_SGXRegisterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.SGXRegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes buf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buf(), target);
  }

  // required uint32 data_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_type(), target);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.SGXRegisterRequest)
  return target;
}

size_t Request_SGXRegisterRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.SGXRegisterRequest)
  size_t total_size = 0;

  if (_internal_has_buf()) {
    // required bytes buf = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buf());
  }

  if (_internal_has_data_type()) {
    // required uint32 data_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_type());
  }

  return total_size;
}
size_t Request_SGXRegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.SGXRegisterRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes buf = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buf());

    // required uint32 data_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timeout = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_SGXRegisterRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_SGXRegisterRequest*>(
      &from));
}

void Request_SGXRegisterRequest::MergeFrom(const Request_SGXRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.SGXRegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_buf(from._internal_buf());
    }
    if (cached_has_bits & 0x00000002u) {
      data_type_ = from.data_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_SGXRegisterRequest::CopyFrom(const Request_SGXRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.SGXRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXRegisterRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Request_SGXRegisterRequest::InternalSwap(Request_SGXRegisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buf_.Swap(&other->buf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request_SGXRegisterRequest, timeout_)
      + sizeof(Request_SGXRegisterRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(Request_SGXRegisterRequest, data_type_)>(
          reinterpret_cast<char*>(&data_type_),
          reinterpret_cast<char*>(&other->data_type_));
}

std::string Request_SGXRegisterRequest::GetTypeName() const {
  return "aesm.message.Request.SGXRegisterRequest";
}


// ===================================================================

void Request_InitQuoteExRequest::InitAsDefaultInstance() {
}
class Request_InitQuoteExRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_InitQuoteExRequest>()._has_bits_);
  static void set_has_att_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_b_pub_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buf_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

Request_InitQuoteExRequest::Request_InitQuoteExRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.InitQuoteExRequest)
}
Request_InitQuoteExRequest::Request_InitQuoteExRequest(const Request_InitQuoteExRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  att_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_att_key_id()) {
    att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_att_key_id(),
      GetArena());
  }
  ::memcpy(&buf_size_, &from.buf_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.InitQuoteExRequest)
}

void Request_InitQuoteExRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_InitQuoteExRequest_messages_2eproto.base);
  att_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&buf_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
}

Request_InitQuoteExRequest::~Request_InitQuoteExRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.InitQuoteExRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_InitQuoteExRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  att_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request_InitQuoteExRequest::ArenaDtor(void* object) {
  Request_InitQuoteExRequest* _this = reinterpret_cast< Request_InitQuoteExRequest* >(object);
  (void)_this;
}
void Request_InitQuoteExRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_InitQuoteExRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_InitQuoteExRequest& Request_InitQuoteExRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_InitQuoteExRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_InitQuoteExRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.InitQuoteExRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    att_key_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&buf_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_InitQuoteExRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes att_key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_att_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool b_pub_key_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_b_pub_key_id(&has_bits);
          b_pub_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 buf_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_buf_size(&has_bits);
          buf_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_InitQuoteExRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.InitQuoteExRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes att_key_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_att_key_id(), target);
  }

  // required bool b_pub_key_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_b_pub_key_id(), target);
  }

  // optional uint64 buf_size = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_buf_size(), target);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.InitQuoteExRequest)
  return target;
}

size_t Request_InitQuoteExRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.InitQuoteExRequest)
  size_t total_size = 0;

  // required bool b_pub_key_id = 3;
  if (_internal_has_b_pub_key_id()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes att_key_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_att_key_id());
    }

    // optional uint64 buf_size = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_buf_size());
    }

  }
  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_InitQuoteExRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_InitQuoteExRequest*>(
      &from));
}

void Request_InitQuoteExRequest::MergeFrom(const Request_InitQuoteExRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.InitQuoteExRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_att_key_id(from._internal_att_key_id());
    }
    if (cached_has_bits & 0x00000002u) {
      buf_size_ = from.buf_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_pub_key_id_ = from.b_pub_key_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_InitQuoteExRequest::CopyFrom(const Request_InitQuoteExRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.InitQuoteExRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_InitQuoteExRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Request_InitQuoteExRequest::InternalSwap(Request_InitQuoteExRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  att_key_id_.Swap(&other->att_key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request_InitQuoteExRequest, timeout_)
      + sizeof(Request_InitQuoteExRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(Request_InitQuoteExRequest, buf_size_)>(
          reinterpret_cast<char*>(&buf_size_),
          reinterpret_cast<char*>(&other->buf_size_));
}

std::string Request_InitQuoteExRequest::GetTypeName() const {
  return "aesm.message.Request.InitQuoteExRequest";
}


// ===================================================================

void Request_SelectAttKeyIDRequest::InitAsDefaultInstance() {
}
class Request_SelectAttKeyIDRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_SelectAttKeyIDRequest>()._has_bits_);
  static void set_has_att_key_id_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Request_SelectAttKeyIDRequest::Request_SelectAttKeyIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.SelectAttKeyIDRequest)
}
Request_SelectAttKeyIDRequest::Request_SelectAttKeyIDRequest(const Request_SelectAttKeyIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  att_key_id_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_att_key_id_list()) {
    att_key_id_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_att_key_id_list(),
      GetArena());
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SelectAttKeyIDRequest)
}

void Request_SelectAttKeyIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_SelectAttKeyIDRequest_messages_2eproto.base);
  att_key_id_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
}

Request_SelectAttKeyIDRequest::~Request_SelectAttKeyIDRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SelectAttKeyIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_SelectAttKeyIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  att_key_id_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request_SelectAttKeyIDRequest::ArenaDtor(void* object) {
  Request_SelectAttKeyIDRequest* _this = reinterpret_cast< Request_SelectAttKeyIDRequest* >(object);
  (void)_this;
}
void Request_SelectAttKeyIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_SelectAttKeyIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_SelectAttKeyIDRequest& Request_SelectAttKeyIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_SelectAttKeyIDRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_SelectAttKeyIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.SelectAttKeyIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    att_key_id_list_.ClearNonDefaultToEmpty();
  }
  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_SelectAttKeyIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes att_key_id_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_att_key_id_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_SelectAttKeyIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.SelectAttKeyIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes att_key_id_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_att_key_id_list(), target);
  }

  // optional uint32 timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.SelectAttKeyIDRequest)
  return target;
}

size_t Request_SelectAttKeyIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.SelectAttKeyIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes att_key_id_list = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_att_key_id_list());
    }

    // optional uint32 timeout = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timeout());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_SelectAttKeyIDRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_SelectAttKeyIDRequest*>(
      &from));
}

void Request_SelectAttKeyIDRequest::MergeFrom(const Request_SelectAttKeyIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.SelectAttKeyIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_att_key_id_list(from._internal_att_key_id_list());
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_SelectAttKeyIDRequest::CopyFrom(const Request_SelectAttKeyIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.SelectAttKeyIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SelectAttKeyIDRequest::IsInitialized() const {
  return true;
}

void Request_SelectAttKeyIDRequest::InternalSwap(Request_SelectAttKeyIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  att_key_id_list_.Swap(&other->att_key_id_list_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timeout_, other->timeout_);
}

std::string Request_SelectAttKeyIDRequest::GetTypeName() const {
  return "aesm.message.Request.SelectAttKeyIDRequest";
}


// ===================================================================

void Request_GetQuoteSizeExRequest::InitAsDefaultInstance() {
}
class Request_GetQuoteSizeExRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_GetQuoteSizeExRequest>()._has_bits_);
  static void set_has_att_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Request_GetQuoteSizeExRequest::Request_GetQuoteSizeExRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.GetQuoteSizeExRequest)
}
Request_GetQuoteSizeExRequest::Request_GetQuoteSizeExRequest(const Request_GetQuoteSizeExRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  att_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_att_key_id()) {
    att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_att_key_id(),
      GetArena());
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetQuoteSizeExRequest)
}

void Request_GetQuoteSizeExRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_GetQuoteSizeExRequest_messages_2eproto.base);
  att_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
}

Request_GetQuoteSizeExRequest::~Request_GetQuoteSizeExRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetQuoteSizeExRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_GetQuoteSizeExRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  att_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request_GetQuoteSizeExRequest::ArenaDtor(void* object) {
  Request_GetQuoteSizeExRequest* _this = reinterpret_cast< Request_GetQuoteSizeExRequest* >(object);
  (void)_this;
}
void Request_GetQuoteSizeExRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_GetQuoteSizeExRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetQuoteSizeExRequest& Request_GetQuoteSizeExRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_GetQuoteSizeExRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_GetQuoteSizeExRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetQuoteSizeExRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    att_key_id_.ClearNonDefaultToEmpty();
  }
  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_GetQuoteSizeExRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes att_key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_att_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_GetQuoteSizeExRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetQuoteSizeExRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes att_key_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_att_key_id(), target);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetQuoteSizeExRequest)
  return target;
}

size_t Request_GetQuoteSizeExRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetQuoteSizeExRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes att_key_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_att_key_id());
    }

    // optional uint32 timeout = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timeout());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetQuoteSizeExRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_GetQuoteSizeExRequest*>(
      &from));
}

void Request_GetQuoteSizeExRequest::MergeFrom(const Request_GetQuoteSizeExRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetQuoteSizeExRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_att_key_id(from._internal_att_key_id());
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetQuoteSizeExRequest::CopyFrom(const Request_GetQuoteSizeExRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetQuoteSizeExRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetQuoteSizeExRequest::IsInitialized() const {
  return true;
}

void Request_GetQuoteSizeExRequest::InternalSwap(Request_GetQuoteSizeExRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  att_key_id_.Swap(&other->att_key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timeout_, other->timeout_);
}

std::string Request_GetQuoteSizeExRequest::GetTypeName() const {
  return "aesm.message.Request.GetQuoteSizeExRequest";
}


// ===================================================================

void Request_GetQuoteExRequest::InitAsDefaultInstance() {
}
class Request_GetQuoteExRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_GetQuoteExRequest>()._has_bits_);
  static void set_has_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_att_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_qe_report_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buf_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

Request_GetQuoteExRequest::Request_GetQuoteExRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.GetQuoteExRequest)
}
Request_GetQuoteExRequest::Request_GetQuoteExRequest(const Request_GetQuoteExRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_report()) {
    report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_report(),
      GetArena());
  }
  att_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_att_key_id()) {
    att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_att_key_id(),
      GetArena());
  }
  qe_report_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_qe_report_info()) {
    qe_report_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_qe_report_info(),
      GetArena());
  }
  ::memcpy(&buf_size_, &from.buf_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetQuoteExRequest)
}

void Request_GetQuoteExRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_GetQuoteExRequest_messages_2eproto.base);
  report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  att_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qe_report_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&buf_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
}

Request_GetQuoteExRequest::~Request_GetQuoteExRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetQuoteExRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_GetQuoteExRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  att_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qe_report_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request_GetQuoteExRequest::ArenaDtor(void* object) {
  Request_GetQuoteExRequest* _this = reinterpret_cast< Request_GetQuoteExRequest* >(object);
  (void)_this;
}
void Request_GetQuoteExRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_GetQuoteExRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetQuoteExRequest& Request_GetQuoteExRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_GetQuoteExRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_GetQuoteExRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetQuoteExRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      report_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      att_key_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      qe_report_info_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&buf_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_GetQuoteExRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_report();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes att_key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_att_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes qe_report_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_qe_report_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 buf_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_buf_size(&has_bits);
          buf_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_GetQuoteExRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetQuoteExRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes report = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_report(), target);
  }

  // optional bytes att_key_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_att_key_id(), target);
  }

  // optional bytes qe_report_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_qe_report_info(), target);
  }

  // required uint32 buf_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_buf_size(), target);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetQuoteExRequest)
  return target;
}

size_t Request_GetQuoteExRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.GetQuoteExRequest)
  size_t total_size = 0;

  if (_internal_has_report()) {
    // required bytes report = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_report());
  }

  if (_internal_has_buf_size()) {
    // required uint32 buf_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buf_size());
  }

  return total_size;
}
size_t Request_GetQuoteExRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetQuoteExRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required bytes report = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_report());

    // required uint32 buf_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buf_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bytes att_key_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_att_key_id());
    }

    // optional bytes qe_report_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_qe_report_info());
    }

  }
  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetQuoteExRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_GetQuoteExRequest*>(
      &from));
}

void Request_GetQuoteExRequest::MergeFrom(const Request_GetQuoteExRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetQuoteExRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_report(from._internal_report());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_att_key_id(from._internal_att_key_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_qe_report_info(from._internal_qe_report_info());
    }
    if (cached_has_bits & 0x00000008u) {
      buf_size_ = from.buf_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetQuoteExRequest::CopyFrom(const Request_GetQuoteExRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetQuoteExRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetQuoteExRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Request_GetQuoteExRequest::InternalSwap(Request_GetQuoteExRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  report_.Swap(&other->report_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  att_key_id_.Swap(&other->att_key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  qe_report_info_.Swap(&other->qe_report_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request_GetQuoteExRequest, timeout_)
      + sizeof(Request_GetQuoteExRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(Request_GetQuoteExRequest, buf_size_)>(
          reinterpret_cast<char*>(&buf_size_),
          reinterpret_cast<char*>(&other->buf_size_));
}

std::string Request_GetQuoteExRequest::GetTypeName() const {
  return "aesm.message.Request.GetQuoteExRequest";
}


// ===================================================================

void Request_GetSupportedAttKeyIDNumRequest::InitAsDefaultInstance() {
}
class Request_GetSupportedAttKeyIDNumRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_GetSupportedAttKeyIDNumRequest>()._has_bits_);
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Request_GetSupportedAttKeyIDNumRequest::Request_GetSupportedAttKeyIDNumRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
}
Request_GetSupportedAttKeyIDNumRequest::Request_GetSupportedAttKeyIDNumRequest(const Request_GetSupportedAttKeyIDNumRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
}

void Request_GetSupportedAttKeyIDNumRequest::SharedCtor() {
  timeout_ = 0u;
}

Request_GetSupportedAttKeyIDNumRequest::~Request_GetSupportedAttKeyIDNumRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_GetSupportedAttKeyIDNumRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Request_GetSupportedAttKeyIDNumRequest::ArenaDtor(void* object) {
  Request_GetSupportedAttKeyIDNumRequest* _this = reinterpret_cast< Request_GetSupportedAttKeyIDNumRequest* >(object);
  (void)_this;
}
void Request_GetSupportedAttKeyIDNumRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_GetSupportedAttKeyIDNumRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetSupportedAttKeyIDNumRequest& Request_GetSupportedAttKeyIDNumRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_GetSupportedAttKeyIDNumRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_GetSupportedAttKeyIDNumRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_GetSupportedAttKeyIDNumRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_GetSupportedAttKeyIDNumRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  return target;
}

size_t Request_GetSupportedAttKeyIDNumRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timeout = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetSupportedAttKeyIDNumRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_GetSupportedAttKeyIDNumRequest*>(
      &from));
}

void Request_GetSupportedAttKeyIDNumRequest::MergeFrom(const Request_GetSupportedAttKeyIDNumRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timeout()) {
    _internal_set_timeout(from._internal_timeout());
  }
}

void Request_GetSupportedAttKeyIDNumRequest::CopyFrom(const Request_GetSupportedAttKeyIDNumRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetSupportedAttKeyIDNumRequest::IsInitialized() const {
  return true;
}

void Request_GetSupportedAttKeyIDNumRequest::InternalSwap(Request_GetSupportedAttKeyIDNumRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timeout_, other->timeout_);
}

std::string Request_GetSupportedAttKeyIDNumRequest::GetTypeName() const {
  return "aesm.message.Request.GetSupportedAttKeyIDNumRequest";
}


// ===================================================================

void Request_GetSupportedAttKeyIDsRequest::InitAsDefaultInstance() {
}
class Request_GetSupportedAttKeyIDsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_GetSupportedAttKeyIDsRequest>()._has_bits_);
  static void set_has_buf_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Request_GetSupportedAttKeyIDsRequest::Request_GetSupportedAttKeyIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request.GetSupportedAttKeyIDsRequest)
}
Request_GetSupportedAttKeyIDsRequest::Request_GetSupportedAttKeyIDsRequest(const Request_GetSupportedAttKeyIDsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&buf_size_, &from.buf_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetSupportedAttKeyIDsRequest)
}

void Request_GetSupportedAttKeyIDsRequest::SharedCtor() {
  ::memset(&buf_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
}

Request_GetSupportedAttKeyIDsRequest::~Request_GetSupportedAttKeyIDsRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request_GetSupportedAttKeyIDsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Request_GetSupportedAttKeyIDsRequest::ArenaDtor(void* object) {
  Request_GetSupportedAttKeyIDsRequest* _this = reinterpret_cast< Request_GetSupportedAttKeyIDsRequest* >(object);
  (void)_this;
}
void Request_GetSupportedAttKeyIDsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_GetSupportedAttKeyIDsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetSupportedAttKeyIDsRequest& Request_GetSupportedAttKeyIDsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_GetSupportedAttKeyIDsRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void Request_GetSupportedAttKeyIDsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&buf_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request_GetSupportedAttKeyIDsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 buf_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_buf_size(&has_bits);
          buf_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_GetSupportedAttKeyIDsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 buf_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_buf_size(), target);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  return target;
}

size_t Request_GetSupportedAttKeyIDsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  size_t total_size = 0;

  // required uint32 buf_size = 1;
  if (_internal_has_buf_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buf_size());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timeout = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetSupportedAttKeyIDsRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request_GetSupportedAttKeyIDsRequest*>(
      &from));
}

void Request_GetSupportedAttKeyIDsRequest::MergeFrom(const Request_GetSupportedAttKeyIDsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      buf_size_ = from.buf_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetSupportedAttKeyIDsRequest::CopyFrom(const Request_GetSupportedAttKeyIDsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetSupportedAttKeyIDsRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Request_GetSupportedAttKeyIDsRequest::InternalSwap(Request_GetSupportedAttKeyIDsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request_GetSupportedAttKeyIDsRequest, timeout_)
      + sizeof(Request_GetSupportedAttKeyIDsRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(Request_GetSupportedAttKeyIDsRequest, buf_size_)>(
          reinterpret_cast<char*>(&buf_size_),
          reinterpret_cast<char*>(&other->buf_size_));
}

std::string Request_GetSupportedAttKeyIDsRequest::GetTypeName() const {
  return "aesm.message.Request.GetSupportedAttKeyIDsRequest";
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->initquotereq_ = const_cast< ::aesm::message::Request_InitQuoteRequest*>(
      ::aesm::message::Request_InitQuoteRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getquotereq_ = const_cast< ::aesm::message::Request_GetQuoteRequest*>(
      ::aesm::message::Request_GetQuoteRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getlictokenreq_ = const_cast< ::aesm::message::Request_GetLaunchTokenRequest*>(
      ::aesm::message::Request_GetLaunchTokenRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->reporterrreq_ = const_cast< ::aesm::message::Request_ReportAttestationErrorRequest*>(
      ::aesm::message::Request_ReportAttestationErrorRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getwhitelistsizereq_ = const_cast< ::aesm::message::Request_GetWhiteListSizeRequest*>(
      ::aesm::message::Request_GetWhiteListSizeRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getwhitelistreq_ = const_cast< ::aesm::message::Request_GetWhiteListRequest*>(
      ::aesm::message::Request_GetWhiteListRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->sgxgetextendedepidgroupidreq_ = const_cast< ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest*>(
      ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->sgxswitchextendedepidgroupreq_ = const_cast< ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest*>(
      ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->sgxregisterreq_ = const_cast< ::aesm::message::Request_SGXRegisterRequest*>(
      ::aesm::message::Request_SGXRegisterRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->initquoteexreq_ = const_cast< ::aesm::message::Request_InitQuoteExRequest*>(
      ::aesm::message::Request_InitQuoteExRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getquotesizeexreq_ = const_cast< ::aesm::message::Request_GetQuoteSizeExRequest*>(
      ::aesm::message::Request_GetQuoteSizeExRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getquoteexreq_ = const_cast< ::aesm::message::Request_GetQuoteExRequest*>(
      ::aesm::message::Request_GetQuoteExRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->checkupdatestatusreq_ = const_cast< ::aesm::message::Request_CheckUpdateStatusRequest*>(
      ::aesm::message::Request_CheckUpdateStatusRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->selectattkeyidreq_ = const_cast< ::aesm::message::Request_SelectAttKeyIDRequest*>(
      ::aesm::message::Request_SelectAttKeyIDRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getsupportedattkeyidnumreq_ = const_cast< ::aesm::message::Request_GetSupportedAttKeyIDNumRequest*>(
      ::aesm::message::Request_GetSupportedAttKeyIDNumRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getsupportedattkeyidsreq_ = const_cast< ::aesm::message::Request_GetSupportedAttKeyIDsRequest*>(
      ::aesm::message::Request_GetSupportedAttKeyIDsRequest::internal_default_instance());
}
class Request::_Internal {
 public:
  using HasBits = decltype(std::declval<Request>()._has_bits_);
  static const ::aesm::message::Request_InitQuoteRequest& initquotereq(const Request* msg);
  static void set_has_initquotereq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aesm::message::Request_GetQuoteRequest& getquotereq(const Request* msg);
  static void set_has_getquotereq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aesm::message::Request_GetLaunchTokenRequest& getlictokenreq(const Request* msg);
  static void set_has_getlictokenreq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aesm::message::Request_ReportAttestationErrorRequest& reporterrreq(const Request* msg);
  static void set_has_reporterrreq(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aesm::message::Request_GetWhiteListSizeRequest& getwhitelistsizereq(const Request* msg);
  static void set_has_getwhitelistsizereq(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::aesm::message::Request_GetWhiteListRequest& getwhitelistreq(const Request* msg);
  static void set_has_getwhitelistreq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest& sgxgetextendedepidgroupidreq(const Request* msg);
  static void set_has_sgxgetextendedepidgroupidreq(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest& sgxswitchextendedepidgroupreq(const Request* msg);
  static void set_has_sgxswitchextendedepidgroupreq(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::aesm::message::Request_SGXRegisterRequest& sgxregisterreq(const Request* msg);
  static void set_has_sgxregisterreq(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::aesm::message::Request_InitQuoteExRequest& initquoteexreq(const Request* msg);
  static void set_has_initquoteexreq(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::aesm::message::Request_GetQuoteSizeExRequest& getquotesizeexreq(const Request* msg);
  static void set_has_getquotesizeexreq(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::aesm::message::Request_GetQuoteExRequest& getquoteexreq(const Request* msg);
  static void set_has_getquoteexreq(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::aesm::message::Request_CheckUpdateStatusRequest& checkupdatestatusreq(const Request* msg);
  static void set_has_checkupdatestatusreq(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::aesm::message::Request_SelectAttKeyIDRequest& selectattkeyidreq(const Request* msg);
  static void set_has_selectattkeyidreq(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::aesm::message::Request_GetSupportedAttKeyIDNumRequest& getsupportedattkeyidnumreq(const Request* msg);
  static void set_has_getsupportedattkeyidnumreq(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::aesm::message::Request_GetSupportedAttKeyIDsRequest& getsupportedattkeyidsreq(const Request* msg);
  static void set_has_getsupportedattkeyidsreq(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::aesm::message::Request_InitQuoteRequest&
Request::_Internal::initquotereq(const Request* msg) {
  return *msg->initquotereq_;
}
const ::aesm::message::Request_GetQuoteRequest&
Request::_Internal::getquotereq(const Request* msg) {
  return *msg->getquotereq_;
}
const ::aesm::message::Request_GetLaunchTokenRequest&
Request::_Internal::getlictokenreq(const Request* msg) {
  return *msg->getlictokenreq_;
}
const ::aesm::message::Request_ReportAttestationErrorRequest&
Request::_Internal::reporterrreq(const Request* msg) {
  return *msg->reporterrreq_;
}
const ::aesm::message::Request_GetWhiteListSizeRequest&
Request::_Internal::getwhitelistsizereq(const Request* msg) {
  return *msg->getwhitelistsizereq_;
}
const ::aesm::message::Request_GetWhiteListRequest&
Request::_Internal::getwhitelistreq(const Request* msg) {
  return *msg->getwhitelistreq_;
}
const ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest&
Request::_Internal::sgxgetextendedepidgroupidreq(const Request* msg) {
  return *msg->sgxgetextendedepidgroupidreq_;
}
const ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest&
Request::_Internal::sgxswitchextendedepidgroupreq(const Request* msg) {
  return *msg->sgxswitchextendedepidgroupreq_;
}
const ::aesm::message::Request_SGXRegisterRequest&
Request::_Internal::sgxregisterreq(const Request* msg) {
  return *msg->sgxregisterreq_;
}
const ::aesm::message::Request_InitQuoteExRequest&
Request::_Internal::initquoteexreq(const Request* msg) {
  return *msg->initquoteexreq_;
}
const ::aesm::message::Request_GetQuoteSizeExRequest&
Request::_Internal::getquotesizeexreq(const Request* msg) {
  return *msg->getquotesizeexreq_;
}
const ::aesm::message::Request_GetQuoteExRequest&
Request::_Internal::getquoteexreq(const Request* msg) {
  return *msg->getquoteexreq_;
}
const ::aesm::message::Request_CheckUpdateStatusRequest&
Request::_Internal::checkupdatestatusreq(const Request* msg) {
  return *msg->checkupdatestatusreq_;
}
const ::aesm::message::Request_SelectAttKeyIDRequest&
Request::_Internal::selectattkeyidreq(const Request* msg) {
  return *msg->selectattkeyidreq_;
}
const ::aesm::message::Request_GetSupportedAttKeyIDNumRequest&
Request::_Internal::getsupportedattkeyidnumreq(const Request* msg) {
  return *msg->getsupportedattkeyidnumreq_;
}
const ::aesm::message::Request_GetSupportedAttKeyIDsRequest&
Request::_Internal::getsupportedattkeyidsreq(const Request* msg) {
  return *msg->getsupportedattkeyidsreq_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_initquotereq()) {
    initquotereq_ = new ::aesm::message::Request_InitQuoteRequest(*from.initquotereq_);
  } else {
    initquotereq_ = nullptr;
  }
  if (from._internal_has_getquotereq()) {
    getquotereq_ = new ::aesm::message::Request_GetQuoteRequest(*from.getquotereq_);
  } else {
    getquotereq_ = nullptr;
  }
  if (from._internal_has_getlictokenreq()) {
    getlictokenreq_ = new ::aesm::message::Request_GetLaunchTokenRequest(*from.getlictokenreq_);
  } else {
    getlictokenreq_ = nullptr;
  }
  if (from._internal_has_reporterrreq()) {
    reporterrreq_ = new ::aesm::message::Request_ReportAttestationErrorRequest(*from.reporterrreq_);
  } else {
    reporterrreq_ = nullptr;
  }
  if (from._internal_has_getwhitelistsizereq()) {
    getwhitelistsizereq_ = new ::aesm::message::Request_GetWhiteListSizeRequest(*from.getwhitelistsizereq_);
  } else {
    getwhitelistsizereq_ = nullptr;
  }
  if (from._internal_has_getwhitelistreq()) {
    getwhitelistreq_ = new ::aesm::message::Request_GetWhiteListRequest(*from.getwhitelistreq_);
  } else {
    getwhitelistreq_ = nullptr;
  }
  if (from._internal_has_sgxgetextendedepidgroupidreq()) {
    sgxgetextendedepidgroupidreq_ = new ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest(*from.sgxgetextendedepidgroupidreq_);
  } else {
    sgxgetextendedepidgroupidreq_ = nullptr;
  }
  if (from._internal_has_sgxswitchextendedepidgroupreq()) {
    sgxswitchextendedepidgroupreq_ = new ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest(*from.sgxswitchextendedepidgroupreq_);
  } else {
    sgxswitchextendedepidgroupreq_ = nullptr;
  }
  if (from._internal_has_sgxregisterreq()) {
    sgxregisterreq_ = new ::aesm::message::Request_SGXRegisterRequest(*from.sgxregisterreq_);
  } else {
    sgxregisterreq_ = nullptr;
  }
  if (from._internal_has_initquoteexreq()) {
    initquoteexreq_ = new ::aesm::message::Request_InitQuoteExRequest(*from.initquoteexreq_);
  } else {
    initquoteexreq_ = nullptr;
  }
  if (from._internal_has_getquotesizeexreq()) {
    getquotesizeexreq_ = new ::aesm::message::Request_GetQuoteSizeExRequest(*from.getquotesizeexreq_);
  } else {
    getquotesizeexreq_ = nullptr;
  }
  if (from._internal_has_getquoteexreq()) {
    getquoteexreq_ = new ::aesm::message::Request_GetQuoteExRequest(*from.getquoteexreq_);
  } else {
    getquoteexreq_ = nullptr;
  }
  if (from._internal_has_checkupdatestatusreq()) {
    checkupdatestatusreq_ = new ::aesm::message::Request_CheckUpdateStatusRequest(*from.checkupdatestatusreq_);
  } else {
    checkupdatestatusreq_ = nullptr;
  }
  if (from._internal_has_selectattkeyidreq()) {
    selectattkeyidreq_ = new ::aesm::message::Request_SelectAttKeyIDRequest(*from.selectattkeyidreq_);
  } else {
    selectattkeyidreq_ = nullptr;
  }
  if (from._internal_has_getsupportedattkeyidnumreq()) {
    getsupportedattkeyidnumreq_ = new ::aesm::message::Request_GetSupportedAttKeyIDNumRequest(*from.getsupportedattkeyidnumreq_);
  } else {
    getsupportedattkeyidnumreq_ = nullptr;
  }
  if (from._internal_has_getsupportedattkeyidsreq()) {
    getsupportedattkeyidsreq_ = new ::aesm::message::Request_GetSupportedAttKeyIDsRequest(*from.getsupportedattkeyidsreq_);
  } else {
    getsupportedattkeyidsreq_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_messages_2eproto.base);
  ::memset(&initquotereq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getsupportedattkeyidsreq_) -
      reinterpret_cast<char*>(&initquotereq_)) + sizeof(getsupportedattkeyidsreq_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:aesm.message.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete initquotereq_;
  if (this != internal_default_instance()) delete getquotereq_;
  if (this != internal_default_instance()) delete getlictokenreq_;
  if (this != internal_default_instance()) delete reporterrreq_;
  if (this != internal_default_instance()) delete getwhitelistsizereq_;
  if (this != internal_default_instance()) delete getwhitelistreq_;
  if (this != internal_default_instance()) delete sgxgetextendedepidgroupidreq_;
  if (this != internal_default_instance()) delete sgxswitchextendedepidgroupreq_;
  if (this != internal_default_instance()) delete sgxregisterreq_;
  if (this != internal_default_instance()) delete initquoteexreq_;
  if (this != internal_default_instance()) delete getquotesizeexreq_;
  if (this != internal_default_instance()) delete getquoteexreq_;
  if (this != internal_default_instance()) delete checkupdatestatusreq_;
  if (this != internal_default_instance()) delete selectattkeyidreq_;
  if (this != internal_default_instance()) delete getsupportedattkeyidnumreq_;
  if (this != internal_default_instance()) delete getsupportedattkeyidsreq_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_messages_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(initquotereq_ != nullptr);
      initquotereq_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(getquotereq_ != nullptr);
      getquotereq_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(getlictokenreq_ != nullptr);
      getlictokenreq_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reporterrreq_ != nullptr);
      reporterrreq_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(getwhitelistsizereq_ != nullptr);
      getwhitelistsizereq_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(getwhitelistreq_ != nullptr);
      getwhitelistreq_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(sgxgetextendedepidgroupidreq_ != nullptr);
      sgxgetextendedepidgroupidreq_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(sgxswitchextendedepidgroupreq_ != nullptr);
      sgxswitchextendedepidgroupreq_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(sgxregisterreq_ != nullptr);
      sgxregisterreq_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(initquoteexreq_ != nullptr);
      initquoteexreq_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(getquotesizeexreq_ != nullptr);
      getquotesizeexreq_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(getquoteexreq_ != nullptr);
      getquoteexreq_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(checkupdatestatusreq_ != nullptr);
      checkupdatestatusreq_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(selectattkeyidreq_ != nullptr);
      selectattkeyidreq_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(getsupportedattkeyidnumreq_ != nullptr);
      getsupportedattkeyidnumreq_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(getsupportedattkeyidsreq_ != nullptr);
      getsupportedattkeyidsreq_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initquotereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_getquotereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getlictokenreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reporterrreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_getwhitelistsizereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_getwhitelistreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sgxgetextendedepidgroupidreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sgxswitchextendedepidgroupreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_sgxregisterreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_initquoteexreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_getquotesizeexreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_getquoteexreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkupdatestatusreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectattkeyidreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.GetSupportedAttKeyIDNumRequest getSupportedAttKeyIDNumReq = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_getsupportedattkeyidnumreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Request.GetSupportedAttKeyIDsRequest getSupportedAttKeyIDsReq = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_getsupportedattkeyidsreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::initquotereq(this), target, stream);
  }

  // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::getquotereq(this), target, stream);
  }

  // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::getlictokenreq(this), target, stream);
  }

  // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reporterrreq(this), target, stream);
  }

  // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::getwhitelistsizereq(this), target, stream);
  }

  // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::getwhitelistreq(this), target, stream);
  }

  // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::sgxgetextendedepidgroupidreq(this), target, stream);
  }

  // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sgxswitchextendedepidgroupreq(this), target, stream);
  }

  // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::sgxregisterreq(this), target, stream);
  }

  // optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::initquoteexreq(this), target, stream);
  }

  // optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::getquotesizeexreq(this), target, stream);
  }

  // optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::getquoteexreq(this), target, stream);
  }

  // optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::checkupdatestatusreq(this), target, stream);
  }

  // optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::selectattkeyidreq(this), target, stream);
  }

  // optional .aesm.message.Request.GetSupportedAttKeyIDNumRequest getSupportedAttKeyIDNumReq = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::getsupportedattkeyidnumreq(this), target, stream);
  }

  // optional .aesm.message.Request.GetSupportedAttKeyIDsRequest getSupportedAttKeyIDsReq = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::getsupportedattkeyidsreq(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *initquotereq_);
    }

    // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getquotereq_);
    }

    // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getlictokenreq_);
    }

    // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reporterrreq_);
    }

    // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getwhitelistsizereq_);
    }

    // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getwhitelistreq_);
    }

    // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sgxgetextendedepidgroupidreq_);
    }

    // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sgxswitchextendedepidgroupreq_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sgxregisterreq_);
    }

    // optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *initquoteexreq_);
    }

    // optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getquotesizeexreq_);
    }

    // optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getquoteexreq_);
    }

    // optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *checkupdatestatusreq_);
    }

    // optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selectattkeyidreq_);
    }

    // optional .aesm.message.Request.GetSupportedAttKeyIDNumRequest getSupportedAttKeyIDNumReq = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getsupportedattkeyidnumreq_);
    }

    // optional .aesm.message.Request.GetSupportedAttKeyIDsRequest getSupportedAttKeyIDsReq = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getsupportedattkeyidsreq_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request*>(
      &from));
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_initquotereq()->::aesm::message::Request_InitQuoteRequest::MergeFrom(from._internal_initquotereq());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_getquotereq()->::aesm::message::Request_GetQuoteRequest::MergeFrom(from._internal_getquotereq());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_getlictokenreq()->::aesm::message::Request_GetLaunchTokenRequest::MergeFrom(from._internal_getlictokenreq());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reporterrreq()->::aesm::message::Request_ReportAttestationErrorRequest::MergeFrom(from._internal_reporterrreq());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_getwhitelistsizereq()->::aesm::message::Request_GetWhiteListSizeRequest::MergeFrom(from._internal_getwhitelistsizereq());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_getwhitelistreq()->::aesm::message::Request_GetWhiteListRequest::MergeFrom(from._internal_getwhitelistreq());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_sgxgetextendedepidgroupidreq()->::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::MergeFrom(from._internal_sgxgetextendedepidgroupidreq());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_sgxswitchextendedepidgroupreq()->::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::MergeFrom(from._internal_sgxswitchextendedepidgroupreq());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_sgxregisterreq()->::aesm::message::Request_SGXRegisterRequest::MergeFrom(from._internal_sgxregisterreq());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_initquoteexreq()->::aesm::message::Request_InitQuoteExRequest::MergeFrom(from._internal_initquoteexreq());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_getquotesizeexreq()->::aesm::message::Request_GetQuoteSizeExRequest::MergeFrom(from._internal_getquotesizeexreq());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_getquoteexreq()->::aesm::message::Request_GetQuoteExRequest::MergeFrom(from._internal_getquoteexreq());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_checkupdatestatusreq()->::aesm::message::Request_CheckUpdateStatusRequest::MergeFrom(from._internal_checkupdatestatusreq());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_selectattkeyidreq()->::aesm::message::Request_SelectAttKeyIDRequest::MergeFrom(from._internal_selectattkeyidreq());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_getsupportedattkeyidnumreq()->::aesm::message::Request_GetSupportedAttKeyIDNumRequest::MergeFrom(from._internal_getsupportedattkeyidnumreq());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_getsupportedattkeyidsreq()->::aesm::message::Request_GetSupportedAttKeyIDsRequest::MergeFrom(from._internal_getsupportedattkeyidsreq());
    }
  }
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if (_internal_has_getquotereq()) {
    if (!getquotereq_->IsInitialized()) return false;
  }
  if (_internal_has_getlictokenreq()) {
    if (!getlictokenreq_->IsInitialized()) return false;
  }
  if (_internal_has_reporterrreq()) {
    if (!reporterrreq_->IsInitialized()) return false;
  }
  if (_internal_has_sgxregisterreq()) {
    if (!sgxregisterreq_->IsInitialized()) return false;
  }
  if (_internal_has_initquoteexreq()) {
    if (!initquoteexreq_->IsInitialized()) return false;
  }
  if (_internal_has_getquoteexreq()) {
    if (!getquoteexreq_->IsInitialized()) return false;
  }
  if (_internal_has_checkupdatestatusreq()) {
    if (!checkupdatestatusreq_->IsInitialized()) return false;
  }
  if (_internal_has_getsupportedattkeyidsreq()) {
    if (!getsupportedattkeyidsreq_->IsInitialized()) return false;
  }
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, getsupportedattkeyidsreq_)
      + sizeof(Request::getsupportedattkeyidsreq_)
      - PROTOBUF_FIELD_OFFSET(Request, initquotereq_)>(
          reinterpret_cast<char*>(&initquotereq_),
          reinterpret_cast<char*>(&other->initquotereq_));
}

std::string Request::GetTypeName() const {
  return "aesm.message.Request";
}


// ===================================================================

void Response_InitQuoteResponse::InitAsDefaultInstance() {
}
class Response_InitQuoteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_InitQuoteResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_targetinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

Response_InitQuoteResponse::Response_InitQuoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.InitQuoteResponse)
}
Response_InitQuoteResponse::Response_InitQuoteResponse(const Response_InitQuoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  targetinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_targetinfo()) {
    targetinfo_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_targetinfo(),
      GetArena());
  }
  gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gid()) {
    gid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gid(),
      GetArena());
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.InitQuoteResponse)
}

void Response_InitQuoteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_InitQuoteResponse_messages_2eproto.base);
  targetinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_InitQuoteResponse::~Response_InitQuoteResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.InitQuoteResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_InitQuoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  targetinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response_InitQuoteResponse::ArenaDtor(void* object) {
  Response_InitQuoteResponse* _this = reinterpret_cast< Response_InitQuoteResponse* >(object);
  (void)_this;
}
void Response_InitQuoteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_InitQuoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_InitQuoteResponse& Response_InitQuoteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_InitQuoteResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_InitQuoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.InitQuoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      targetinfo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gid_.ClearNonDefaultToEmpty();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_InitQuoteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes targetInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_targetinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_InitQuoteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.InitQuoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional bytes targetInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_targetinfo(), target);
  }

  // optional bytes gid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.InitQuoteResponse)
  return target;
}

size_t Response_InitQuoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.InitQuoteResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes targetInfo = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_targetinfo());
    }

    // optional bytes gid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_InitQuoteResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_InitQuoteResponse*>(
      &from));
}

void Response_InitQuoteResponse::MergeFrom(const Response_InitQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.InitQuoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_targetinfo(from._internal_targetinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gid(from._internal_gid());
    }
    if (cached_has_bits & 0x00000004u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_InitQuoteResponse::CopyFrom(const Response_InitQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.InitQuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_InitQuoteResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_InitQuoteResponse::InternalSwap(Response_InitQuoteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  targetinfo_.Swap(&other->targetinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gid_.Swap(&other->gid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errorcode_, other->errorcode_);
}

std::string Response_InitQuoteResponse::GetTypeName() const {
  return "aesm.message.Response.InitQuoteResponse";
}


// ===================================================================

void Response_GetQuoteResponse::InitAsDefaultInstance() {
}
class Response_GetQuoteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_GetQuoteResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qe_report(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

Response_GetQuoteResponse::Response_GetQuoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.GetQuoteResponse)
}
Response_GetQuoteResponse::Response_GetQuoteResponse(const Response_GetQuoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  quote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_quote()) {
    quote_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_quote(),
      GetArena());
  }
  qe_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_qe_report()) {
    qe_report_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_qe_report(),
      GetArena());
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetQuoteResponse)
}

void Response_GetQuoteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_GetQuoteResponse_messages_2eproto.base);
  quote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qe_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_GetQuoteResponse::~Response_GetQuoteResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetQuoteResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_GetQuoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  quote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qe_report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response_GetQuoteResponse::ArenaDtor(void* object) {
  Response_GetQuoteResponse* _this = reinterpret_cast< Response_GetQuoteResponse* >(object);
  (void)_this;
}
void Response_GetQuoteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_GetQuoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetQuoteResponse& Response_GetQuoteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_GetQuoteResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_GetQuoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetQuoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      quote_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      qe_report_.ClearNonDefaultToEmpty();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_GetQuoteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes quote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_quote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes qe_report = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_qe_report();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_GetQuoteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetQuoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional bytes quote = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_quote(), target);
  }

  // optional bytes qe_report = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_qe_report(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetQuoteResponse)
  return target;
}

size_t Response_GetQuoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetQuoteResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes quote = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_quote());
    }

    // optional bytes qe_report = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_qe_report());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetQuoteResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_GetQuoteResponse*>(
      &from));
}

void Response_GetQuoteResponse::MergeFrom(const Response_GetQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetQuoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_quote(from._internal_quote());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_qe_report(from._internal_qe_report());
    }
    if (cached_has_bits & 0x00000004u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetQuoteResponse::CopyFrom(const Response_GetQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetQuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetQuoteResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_GetQuoteResponse::InternalSwap(Response_GetQuoteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  quote_.Swap(&other->quote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  qe_report_.Swap(&other->qe_report_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errorcode_, other->errorcode_);
}

std::string Response_GetQuoteResponse::GetTypeName() const {
  return "aesm.message.Response.GetQuoteResponse";
}


// ===================================================================

void Response_GetLaunchTokenResponse::InitAsDefaultInstance() {
}
class Response_GetLaunchTokenResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_GetLaunchTokenResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Response_GetLaunchTokenResponse::Response_GetLaunchTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.GetLaunchTokenResponse)
}
Response_GetLaunchTokenResponse::Response_GetLaunchTokenResponse(const Response_GetLaunchTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetLaunchTokenResponse)
}

void Response_GetLaunchTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_GetLaunchTokenResponse_messages_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_GetLaunchTokenResponse::~Response_GetLaunchTokenResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetLaunchTokenResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_GetLaunchTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response_GetLaunchTokenResponse::ArenaDtor(void* object) {
  Response_GetLaunchTokenResponse* _this = reinterpret_cast< Response_GetLaunchTokenResponse* >(object);
  (void)_this;
}
void Response_GetLaunchTokenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_GetLaunchTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetLaunchTokenResponse& Response_GetLaunchTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_GetLaunchTokenResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_GetLaunchTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetLaunchTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmpty();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_GetLaunchTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_GetLaunchTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetLaunchTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional bytes token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetLaunchTokenResponse)
  return target;
}

size_t Response_GetLaunchTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetLaunchTokenResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes token = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetLaunchTokenResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_GetLaunchTokenResponse*>(
      &from));
}

void Response_GetLaunchTokenResponse::MergeFrom(const Response_GetLaunchTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetLaunchTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetLaunchTokenResponse::CopyFrom(const Response_GetLaunchTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetLaunchTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetLaunchTokenResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_GetLaunchTokenResponse::InternalSwap(Response_GetLaunchTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errorcode_, other->errorcode_);
}

std::string Response_GetLaunchTokenResponse::GetTypeName() const {
  return "aesm.message.Response.GetLaunchTokenResponse";
}


// ===================================================================

void Response_ReportAttestationErrorResponse::InitAsDefaultInstance() {
}
class Response_ReportAttestationErrorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_ReportAttestationErrorResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platform_update_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Response_ReportAttestationErrorResponse::Response_ReportAttestationErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.ReportAttestationErrorResponse)
}
Response_ReportAttestationErrorResponse::Response_ReportAttestationErrorResponse(const Response_ReportAttestationErrorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  platform_update_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform_update_info()) {
    platform_update_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform_update_info(),
      GetArena());
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.ReportAttestationErrorResponse)
}

void Response_ReportAttestationErrorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_ReportAttestationErrorResponse_messages_2eproto.base);
  platform_update_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_ReportAttestationErrorResponse::~Response_ReportAttestationErrorResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.ReportAttestationErrorResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_ReportAttestationErrorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  platform_update_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response_ReportAttestationErrorResponse::ArenaDtor(void* object) {
  Response_ReportAttestationErrorResponse* _this = reinterpret_cast< Response_ReportAttestationErrorResponse* >(object);
  (void)_this;
}
void Response_ReportAttestationErrorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_ReportAttestationErrorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_ReportAttestationErrorResponse& Response_ReportAttestationErrorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_ReportAttestationErrorResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_ReportAttestationErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.ReportAttestationErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      platform_update_info_.ClearNonDefaultToEmpty();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_ReportAttestationErrorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes platform_update_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_platform_update_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_ReportAttestationErrorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.ReportAttestationErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional bytes platform_update_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_platform_update_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.ReportAttestationErrorResponse)
  return target;
}

size_t Response_ReportAttestationErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.ReportAttestationErrorResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes platform_update_info = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_platform_update_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_ReportAttestationErrorResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_ReportAttestationErrorResponse*>(
      &from));
}

void Response_ReportAttestationErrorResponse::MergeFrom(const Response_ReportAttestationErrorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.ReportAttestationErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_platform_update_info(from._internal_platform_update_info());
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_ReportAttestationErrorResponse::CopyFrom(const Response_ReportAttestationErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.ReportAttestationErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_ReportAttestationErrorResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_ReportAttestationErrorResponse::InternalSwap(Response_ReportAttestationErrorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  platform_update_info_.Swap(&other->platform_update_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errorcode_, other->errorcode_);
}

std::string Response_ReportAttestationErrorResponse::GetTypeName() const {
  return "aesm.message.Response.ReportAttestationErrorResponse";
}


// ===================================================================

void Response_CheckUpdateStatusResponse::InitAsDefaultInstance() {
}
class Response_CheckUpdateStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_CheckUpdateStatusResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_platform_update_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

Response_CheckUpdateStatusResponse::Response_CheckUpdateStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.CheckUpdateStatusResponse)
}
Response_CheckUpdateStatusResponse::Response_CheckUpdateStatusResponse(const Response_CheckUpdateStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  platform_update_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform_update_info()) {
    platform_update_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform_update_info(),
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&status_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.CheckUpdateStatusResponse)
}

void Response_CheckUpdateStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_CheckUpdateStatusResponse_messages_2eproto.base);
  platform_update_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  errorcode_ = 1u;
}

Response_CheckUpdateStatusResponse::~Response_CheckUpdateStatusResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.CheckUpdateStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_CheckUpdateStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  platform_update_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response_CheckUpdateStatusResponse::ArenaDtor(void* object) {
  Response_CheckUpdateStatusResponse* _this = reinterpret_cast< Response_CheckUpdateStatusResponse* >(object);
  (void)_this;
}
void Response_CheckUpdateStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_CheckUpdateStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_CheckUpdateStatusResponse& Response_CheckUpdateStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_CheckUpdateStatusResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_CheckUpdateStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.CheckUpdateStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    platform_update_info_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    status_ = 0u;
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_CheckUpdateStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes platform_update_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_platform_update_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_CheckUpdateStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.CheckUpdateStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional bytes platform_update_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_platform_update_info(), target);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.CheckUpdateStatusResponse)
  return target;
}

size_t Response_CheckUpdateStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.CheckUpdateStatusResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes platform_update_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_platform_update_info());
    }

    // optional uint32 status = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_CheckUpdateStatusResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_CheckUpdateStatusResponse*>(
      &from));
}

void Response_CheckUpdateStatusResponse::MergeFrom(const Response_CheckUpdateStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.CheckUpdateStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_platform_update_info(from._internal_platform_update_info());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_CheckUpdateStatusResponse::CopyFrom(const Response_CheckUpdateStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.CheckUpdateStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_CheckUpdateStatusResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_CheckUpdateStatusResponse::InternalSwap(Response_CheckUpdateStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  platform_update_info_.Swap(&other->platform_update_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
  swap(errorcode_, other->errorcode_);
}

std::string Response_CheckUpdateStatusResponse::GetTypeName() const {
  return "aesm.message.Response.CheckUpdateStatusResponse";
}


// ===================================================================

void Response_GetWhiteListSizeResponse::InitAsDefaultInstance() {
}
class Response_GetWhiteListSizeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_GetWhiteListSizeResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_white_list_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Response_GetWhiteListSizeResponse::Response_GetWhiteListSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.GetWhiteListSizeResponse)
}
Response_GetWhiteListSizeResponse::Response_GetWhiteListSizeResponse(const Response_GetWhiteListSizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&white_list_size_, &from.white_list_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&white_list_size_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetWhiteListSizeResponse)
}

void Response_GetWhiteListSizeResponse::SharedCtor() {
  white_list_size_ = 0u;
  errorcode_ = 1u;
}

Response_GetWhiteListSizeResponse::~Response_GetWhiteListSizeResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetWhiteListSizeResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_GetWhiteListSizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Response_GetWhiteListSizeResponse::ArenaDtor(void* object) {
  Response_GetWhiteListSizeResponse* _this = reinterpret_cast< Response_GetWhiteListSizeResponse* >(object);
  (void)_this;
}
void Response_GetWhiteListSizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_GetWhiteListSizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetWhiteListSizeResponse& Response_GetWhiteListSizeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_GetWhiteListSizeResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_GetWhiteListSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetWhiteListSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    white_list_size_ = 0u;
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_GetWhiteListSizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 white_list_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_white_list_size(&has_bits);
          white_list_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_GetWhiteListSizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetWhiteListSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional uint32 white_list_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_white_list_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetWhiteListSizeResponse)
  return target;
}

size_t Response_GetWhiteListSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetWhiteListSizeResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 white_list_size = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_white_list_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetWhiteListSizeResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_GetWhiteListSizeResponse*>(
      &from));
}

void Response_GetWhiteListSizeResponse::MergeFrom(const Response_GetWhiteListSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetWhiteListSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      white_list_size_ = from.white_list_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetWhiteListSizeResponse::CopyFrom(const Response_GetWhiteListSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetWhiteListSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetWhiteListSizeResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_GetWhiteListSizeResponse::InternalSwap(Response_GetWhiteListSizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(white_list_size_, other->white_list_size_);
  swap(errorcode_, other->errorcode_);
}

std::string Response_GetWhiteListSizeResponse::GetTypeName() const {
  return "aesm.message.Response.GetWhiteListSizeResponse";
}


// ===================================================================

void Response_GetWhiteListResponse::InitAsDefaultInstance() {
}
class Response_GetWhiteListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_GetWhiteListResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_white_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Response_GetWhiteListResponse::Response_GetWhiteListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.GetWhiteListResponse)
}
Response_GetWhiteListResponse::Response_GetWhiteListResponse(const Response_GetWhiteListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  white_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_white_list()) {
    white_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_white_list(),
      GetArena());
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetWhiteListResponse)
}

void Response_GetWhiteListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_GetWhiteListResponse_messages_2eproto.base);
  white_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_GetWhiteListResponse::~Response_GetWhiteListResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetWhiteListResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_GetWhiteListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  white_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response_GetWhiteListResponse::ArenaDtor(void* object) {
  Response_GetWhiteListResponse* _this = reinterpret_cast< Response_GetWhiteListResponse* >(object);
  (void)_this;
}
void Response_GetWhiteListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_GetWhiteListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetWhiteListResponse& Response_GetWhiteListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_GetWhiteListResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_GetWhiteListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetWhiteListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      white_list_.ClearNonDefaultToEmpty();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_GetWhiteListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes white_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_white_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_GetWhiteListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetWhiteListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional bytes white_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_white_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetWhiteListResponse)
  return target;
}

size_t Response_GetWhiteListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetWhiteListResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes white_list = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_white_list());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetWhiteListResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_GetWhiteListResponse*>(
      &from));
}

void Response_GetWhiteListResponse::MergeFrom(const Response_GetWhiteListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetWhiteListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_white_list(from._internal_white_list());
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetWhiteListResponse::CopyFrom(const Response_GetWhiteListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetWhiteListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetWhiteListResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_GetWhiteListResponse::InternalSwap(Response_GetWhiteListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  white_list_.Swap(&other->white_list_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errorcode_, other->errorcode_);
}

std::string Response_GetWhiteListResponse::GetTypeName() const {
  return "aesm.message.Response.GetWhiteListResponse";
}


// ===================================================================

void Response_SGXGetExtendedEpidGroupIdResponse::InitAsDefaultInstance() {
}
class Response_SGXGetExtendedEpidGroupIdResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_SGXGetExtendedEpidGroupIdResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Response_SGXGetExtendedEpidGroupIdResponse::Response_SGXGetExtendedEpidGroupIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
}
Response_SGXGetExtendedEpidGroupIdResponse::Response_SGXGetExtendedEpidGroupIdResponse(const Response_SGXGetExtendedEpidGroupIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&x_group_id_, &from.x_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&x_group_id_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
}

void Response_SGXGetExtendedEpidGroupIdResponse::SharedCtor() {
  x_group_id_ = 0u;
  errorcode_ = 1u;
}

Response_SGXGetExtendedEpidGroupIdResponse::~Response_SGXGetExtendedEpidGroupIdResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_SGXGetExtendedEpidGroupIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Response_SGXGetExtendedEpidGroupIdResponse::ArenaDtor(void* object) {
  Response_SGXGetExtendedEpidGroupIdResponse* _this = reinterpret_cast< Response_SGXGetExtendedEpidGroupIdResponse* >(object);
  (void)_this;
}
void Response_SGXGetExtendedEpidGroupIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_SGXGetExtendedEpidGroupIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_SGXGetExtendedEpidGroupIdResponse& Response_SGXGetExtendedEpidGroupIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_SGXGetExtendedEpidGroupIdResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_SGXGetExtendedEpidGroupIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    x_group_id_ = 0u;
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_SGXGetExtendedEpidGroupIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 x_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x_group_id(&has_bits);
          x_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_SGXGetExtendedEpidGroupIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional uint32 x_group_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  return target;
}

size_t Response_SGXGetExtendedEpidGroupIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 x_group_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_SGXGetExtendedEpidGroupIdResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_SGXGetExtendedEpidGroupIdResponse*>(
      &from));
}

void Response_SGXGetExtendedEpidGroupIdResponse::MergeFrom(const Response_SGXGetExtendedEpidGroupIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_group_id_ = from.x_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_SGXGetExtendedEpidGroupIdResponse::CopyFrom(const Response_SGXGetExtendedEpidGroupIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXGetExtendedEpidGroupIdResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_SGXGetExtendedEpidGroupIdResponse::InternalSwap(Response_SGXGetExtendedEpidGroupIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_group_id_, other->x_group_id_);
  swap(errorcode_, other->errorcode_);
}

std::string Response_SGXGetExtendedEpidGroupIdResponse::GetTypeName() const {
  return "aesm.message.Response.SGXGetExtendedEpidGroupIdResponse";
}


// ===================================================================

void Response_SGXSwitchExtendedEpidGroupResponse::InitAsDefaultInstance() {
}
class Response_SGXSwitchExtendedEpidGroupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_SGXSwitchExtendedEpidGroupResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Response_SGXSwitchExtendedEpidGroupResponse::Response_SGXSwitchExtendedEpidGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
}
Response_SGXSwitchExtendedEpidGroupResponse::Response_SGXSwitchExtendedEpidGroupResponse(const Response_SGXSwitchExtendedEpidGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
}

void Response_SGXSwitchExtendedEpidGroupResponse::SharedCtor() {
  errorcode_ = 1u;
}

Response_SGXSwitchExtendedEpidGroupResponse::~Response_SGXSwitchExtendedEpidGroupResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_SGXSwitchExtendedEpidGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Response_SGXSwitchExtendedEpidGroupResponse::ArenaDtor(void* object) {
  Response_SGXSwitchExtendedEpidGroupResponse* _this = reinterpret_cast< Response_SGXSwitchExtendedEpidGroupResponse* >(object);
  (void)_this;
}
void Response_SGXSwitchExtendedEpidGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_SGXSwitchExtendedEpidGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_SGXSwitchExtendedEpidGroupResponse& Response_SGXSwitchExtendedEpidGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_SGXSwitchExtendedEpidGroupResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_SGXSwitchExtendedEpidGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_SGXSwitchExtendedEpidGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_SGXSwitchExtendedEpidGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  return target;
}

size_t Response_SGXSwitchExtendedEpidGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_SGXSwitchExtendedEpidGroupResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_SGXSwitchExtendedEpidGroupResponse*>(
      &from));
}

void Response_SGXSwitchExtendedEpidGroupResponse::MergeFrom(const Response_SGXSwitchExtendedEpidGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorcode()) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void Response_SGXSwitchExtendedEpidGroupResponse::CopyFrom(const Response_SGXSwitchExtendedEpidGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXSwitchExtendedEpidGroupResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_SGXSwitchExtendedEpidGroupResponse::InternalSwap(Response_SGXSwitchExtendedEpidGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errorcode_, other->errorcode_);
}

std::string Response_SGXSwitchExtendedEpidGroupResponse::GetTypeName() const {
  return "aesm.message.Response.SGXSwitchExtendedEpidGroupResponse";
}


// ===================================================================

void Response_SGXRegisterResponse::InitAsDefaultInstance() {
}
class Response_SGXRegisterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_SGXRegisterResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Response_SGXRegisterResponse::Response_SGXRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.SGXRegisterResponse)
}
Response_SGXRegisterResponse::Response_SGXRegisterResponse(const Response_SGXRegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXRegisterResponse)
}

void Response_SGXRegisterResponse::SharedCtor() {
  errorcode_ = 1u;
}

Response_SGXRegisterResponse::~Response_SGXRegisterResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXRegisterResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_SGXRegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Response_SGXRegisterResponse::ArenaDtor(void* object) {
  Response_SGXRegisterResponse* _this = reinterpret_cast< Response_SGXRegisterResponse* >(object);
  (void)_this;
}
void Response_SGXRegisterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_SGXRegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_SGXRegisterResponse& Response_SGXRegisterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_SGXRegisterResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_SGXRegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.SGXRegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_SGXRegisterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_SGXRegisterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.SGXRegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.SGXRegisterResponse)
  return target;
}

size_t Response_SGXRegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.SGXRegisterResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_SGXRegisterResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_SGXRegisterResponse*>(
      &from));
}

void Response_SGXRegisterResponse::MergeFrom(const Response_SGXRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.SGXRegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorcode()) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void Response_SGXRegisterResponse::CopyFrom(const Response_SGXRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.SGXRegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXRegisterResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_SGXRegisterResponse::InternalSwap(Response_SGXRegisterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errorcode_, other->errorcode_);
}

std::string Response_SGXRegisterResponse::GetTypeName() const {
  return "aesm.message.Response.SGXRegisterResponse";
}


// ===================================================================

void Response_SelectAttKeyIDResponse::InitAsDefaultInstance() {
}
class Response_SelectAttKeyIDResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_SelectAttKeyIDResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_selected_att_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Response_SelectAttKeyIDResponse::Response_SelectAttKeyIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.SelectAttKeyIDResponse)
}
Response_SelectAttKeyIDResponse::Response_SelectAttKeyIDResponse(const Response_SelectAttKeyIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  selected_att_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_selected_att_key_id()) {
    selected_att_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_selected_att_key_id(),
      GetArena());
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SelectAttKeyIDResponse)
}

void Response_SelectAttKeyIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_SelectAttKeyIDResponse_messages_2eproto.base);
  selected_att_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_SelectAttKeyIDResponse::~Response_SelectAttKeyIDResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SelectAttKeyIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_SelectAttKeyIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  selected_att_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response_SelectAttKeyIDResponse::ArenaDtor(void* object) {
  Response_SelectAttKeyIDResponse* _this = reinterpret_cast< Response_SelectAttKeyIDResponse* >(object);
  (void)_this;
}
void Response_SelectAttKeyIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_SelectAttKeyIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_SelectAttKeyIDResponse& Response_SelectAttKeyIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_SelectAttKeyIDResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_SelectAttKeyIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.SelectAttKeyIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      selected_att_key_id_.ClearNonDefaultToEmpty();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_SelectAttKeyIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes selected_att_key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_selected_att_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_SelectAttKeyIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.SelectAttKeyIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional bytes selected_att_key_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_selected_att_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.SelectAttKeyIDResponse)
  return target;
}

size_t Response_SelectAttKeyIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.SelectAttKeyIDResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes selected_att_key_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_selected_att_key_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_SelectAttKeyIDResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_SelectAttKeyIDResponse*>(
      &from));
}

void Response_SelectAttKeyIDResponse::MergeFrom(const Response_SelectAttKeyIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.SelectAttKeyIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_selected_att_key_id(from._internal_selected_att_key_id());
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_SelectAttKeyIDResponse::CopyFrom(const Response_SelectAttKeyIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.SelectAttKeyIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SelectAttKeyIDResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_SelectAttKeyIDResponse::InternalSwap(Response_SelectAttKeyIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  selected_att_key_id_.Swap(&other->selected_att_key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errorcode_, other->errorcode_);
}

std::string Response_SelectAttKeyIDResponse::GetTypeName() const {
  return "aesm.message.Response.SelectAttKeyIDResponse";
}


// ===================================================================

void Response_InitQuoteExResponse::InitAsDefaultInstance() {
}
class Response_InitQuoteExResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_InitQuoteExResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pub_key_id_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pub_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

Response_InitQuoteExResponse::Response_InitQuoteExResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.InitQuoteExResponse)
}
Response_InitQuoteExResponse::Response_InitQuoteExResponse(const Response_InitQuoteExResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  target_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_info()) {
    target_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_info(),
      GetArena());
  }
  pub_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pub_key_id()) {
    pub_key_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pub_key_id(),
      GetArena());
  }
  ::memcpy(&pub_key_id_size_, &from.pub_key_id_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&pub_key_id_size_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.InitQuoteExResponse)
}

void Response_InitQuoteExResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_InitQuoteExResponse_messages_2eproto.base);
  target_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_key_id_size_ = PROTOBUF_ULONGLONG(0);
  errorcode_ = 1u;
}

Response_InitQuoteExResponse::~Response_InitQuoteExResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.InitQuoteExResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_InitQuoteExResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response_InitQuoteExResponse::ArenaDtor(void* object) {
  Response_InitQuoteExResponse* _this = reinterpret_cast< Response_InitQuoteExResponse* >(object);
  (void)_this;
}
void Response_InitQuoteExResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_InitQuoteExResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_InitQuoteExResponse& Response_InitQuoteExResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_InitQuoteExResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_InitQuoteExResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.InitQuoteExResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pub_key_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    pub_key_id_size_ = PROTOBUF_ULONGLONG(0);
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_InitQuoteExResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes target_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 pub_key_id_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pub_key_id_size(&has_bits);
          pub_key_id_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pub_key_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pub_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_InitQuoteExResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.InitQuoteExResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional bytes target_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_target_info(), target);
  }

  // optional uint64 pub_key_id_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pub_key_id_size(), target);
  }

  // optional bytes pub_key_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pub_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.InitQuoteExResponse)
  return target;
}

size_t Response_InitQuoteExResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.InitQuoteExResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes target_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_target_info());
    }

    // optional bytes pub_key_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pub_key_id());
    }

    // optional uint64 pub_key_id_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_pub_key_id_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_InitQuoteExResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_InitQuoteExResponse*>(
      &from));
}

void Response_InitQuoteExResponse::MergeFrom(const Response_InitQuoteExResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.InitQuoteExResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_target_info(from._internal_target_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pub_key_id(from._internal_pub_key_id());
    }
    if (cached_has_bits & 0x00000004u) {
      pub_key_id_size_ = from.pub_key_id_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_InitQuoteExResponse::CopyFrom(const Response_InitQuoteExResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.InitQuoteExResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_InitQuoteExResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_InitQuoteExResponse::InternalSwap(Response_InitQuoteExResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_info_.Swap(&other->target_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pub_key_id_.Swap(&other->pub_key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pub_key_id_size_, other->pub_key_id_size_);
  swap(errorcode_, other->errorcode_);
}

std::string Response_InitQuoteExResponse::GetTypeName() const {
  return "aesm.message.Response.InitQuoteExResponse";
}


// ===================================================================

void Response_GetQuoteSizeExResponse::InitAsDefaultInstance() {
}
class Response_GetQuoteSizeExResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_GetQuoteSizeExResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quote_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Response_GetQuoteSizeExResponse::Response_GetQuoteSizeExResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.GetQuoteSizeExResponse)
}
Response_GetQuoteSizeExResponse::Response_GetQuoteSizeExResponse(const Response_GetQuoteSizeExResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&quote_size_, &from.quote_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&quote_size_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetQuoteSizeExResponse)
}

void Response_GetQuoteSizeExResponse::SharedCtor() {
  quote_size_ = 0u;
  errorcode_ = 1u;
}

Response_GetQuoteSizeExResponse::~Response_GetQuoteSizeExResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetQuoteSizeExResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_GetQuoteSizeExResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Response_GetQuoteSizeExResponse::ArenaDtor(void* object) {
  Response_GetQuoteSizeExResponse* _this = reinterpret_cast< Response_GetQuoteSizeExResponse* >(object);
  (void)_this;
}
void Response_GetQuoteSizeExResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_GetQuoteSizeExResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetQuoteSizeExResponse& Response_GetQuoteSizeExResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_GetQuoteSizeExResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_GetQuoteSizeExResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetQuoteSizeExResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    quote_size_ = 0u;
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_GetQuoteSizeExResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quote_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quote_size(&has_bits);
          quote_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_GetQuoteSizeExResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetQuoteSizeExResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional uint32 quote_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quote_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetQuoteSizeExResponse)
  return target;
}

size_t Response_GetQuoteSizeExResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetQuoteSizeExResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 quote_size = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_quote_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetQuoteSizeExResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_GetQuoteSizeExResponse*>(
      &from));
}

void Response_GetQuoteSizeExResponse::MergeFrom(const Response_GetQuoteSizeExResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetQuoteSizeExResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      quote_size_ = from.quote_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetQuoteSizeExResponse::CopyFrom(const Response_GetQuoteSizeExResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetQuoteSizeExResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetQuoteSizeExResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_GetQuoteSizeExResponse::InternalSwap(Response_GetQuoteSizeExResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quote_size_, other->quote_size_);
  swap(errorcode_, other->errorcode_);
}

std::string Response_GetQuoteSizeExResponse::GetTypeName() const {
  return "aesm.message.Response.GetQuoteSizeExResponse";
}


// ===================================================================

void Response_GetQuoteExResponse::InitAsDefaultInstance() {
}
class Response_GetQuoteExResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_GetQuoteExResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qe_report_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

Response_GetQuoteExResponse::Response_GetQuoteExResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.GetQuoteExResponse)
}
Response_GetQuoteExResponse::Response_GetQuoteExResponse(const Response_GetQuoteExResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  quote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_quote()) {
    quote_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_quote(),
      GetArena());
  }
  qe_report_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_qe_report_info()) {
    qe_report_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_qe_report_info(),
      GetArena());
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetQuoteExResponse)
}

void Response_GetQuoteExResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_GetQuoteExResponse_messages_2eproto.base);
  quote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qe_report_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_GetQuoteExResponse::~Response_GetQuoteExResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetQuoteExResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_GetQuoteExResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  quote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qe_report_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response_GetQuoteExResponse::ArenaDtor(void* object) {
  Response_GetQuoteExResponse* _this = reinterpret_cast< Response_GetQuoteExResponse* >(object);
  (void)_this;
}
void Response_GetQuoteExResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_GetQuoteExResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetQuoteExResponse& Response_GetQuoteExResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_GetQuoteExResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_GetQuoteExResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetQuoteExResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      quote_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      qe_report_info_.ClearNonDefaultToEmpty();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_GetQuoteExResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes quote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_quote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes qe_report_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_qe_report_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_GetQuoteExResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetQuoteExResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional bytes quote = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_quote(), target);
  }

  // optional bytes qe_report_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_qe_report_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetQuoteExResponse)
  return target;
}

size_t Response_GetQuoteExResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetQuoteExResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes quote = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_quote());
    }

    // optional bytes qe_report_info = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_qe_report_info());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetQuoteExResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_GetQuoteExResponse*>(
      &from));
}

void Response_GetQuoteExResponse::MergeFrom(const Response_GetQuoteExResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetQuoteExResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_quote(from._internal_quote());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_qe_report_info(from._internal_qe_report_info());
    }
    if (cached_has_bits & 0x00000004u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetQuoteExResponse::CopyFrom(const Response_GetQuoteExResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetQuoteExResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetQuoteExResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_GetQuoteExResponse::InternalSwap(Response_GetQuoteExResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  quote_.Swap(&other->quote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  qe_report_info_.Swap(&other->qe_report_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errorcode_, other->errorcode_);
}

std::string Response_GetQuoteExResponse::GetTypeName() const {
  return "aesm.message.Response.GetQuoteExResponse";
}


// ===================================================================

void Response_UnsupportedRequestResponse::InitAsDefaultInstance() {
}
class Response_UnsupportedRequestResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_UnsupportedRequestResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Response_UnsupportedRequestResponse::Response_UnsupportedRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.UnsupportedRequestResponse)
}
Response_UnsupportedRequestResponse::Response_UnsupportedRequestResponse(const Response_UnsupportedRequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.UnsupportedRequestResponse)
}

void Response_UnsupportedRequestResponse::SharedCtor() {
  errorcode_ = 1u;
}

Response_UnsupportedRequestResponse::~Response_UnsupportedRequestResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.UnsupportedRequestResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_UnsupportedRequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Response_UnsupportedRequestResponse::ArenaDtor(void* object) {
  Response_UnsupportedRequestResponse* _this = reinterpret_cast< Response_UnsupportedRequestResponse* >(object);
  (void)_this;
}
void Response_UnsupportedRequestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_UnsupportedRequestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_UnsupportedRequestResponse& Response_UnsupportedRequestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_UnsupportedRequestResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_UnsupportedRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.UnsupportedRequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_UnsupportedRequestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_UnsupportedRequestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.UnsupportedRequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.UnsupportedRequestResponse)
  return target;
}

size_t Response_UnsupportedRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.UnsupportedRequestResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_UnsupportedRequestResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_UnsupportedRequestResponse*>(
      &from));
}

void Response_UnsupportedRequestResponse::MergeFrom(const Response_UnsupportedRequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.UnsupportedRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorcode()) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void Response_UnsupportedRequestResponse::CopyFrom(const Response_UnsupportedRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.UnsupportedRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_UnsupportedRequestResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_UnsupportedRequestResponse::InternalSwap(Response_UnsupportedRequestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errorcode_, other->errorcode_);
}

std::string Response_UnsupportedRequestResponse::GetTypeName() const {
  return "aesm.message.Response.UnsupportedRequestResponse";
}


// ===================================================================

void Response_GetSupportedAttKeyIDNumResponse::InitAsDefaultInstance() {
}
class Response_GetSupportedAttKeyIDNumResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_GetSupportedAttKeyIDNumResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_att_key_id_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Response_GetSupportedAttKeyIDNumResponse::Response_GetSupportedAttKeyIDNumResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
}
Response_GetSupportedAttKeyIDNumResponse::Response_GetSupportedAttKeyIDNumResponse(const Response_GetSupportedAttKeyIDNumResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&att_key_id_num_, &from.att_key_id_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&att_key_id_num_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
}

void Response_GetSupportedAttKeyIDNumResponse::SharedCtor() {
  att_key_id_num_ = 0u;
  errorcode_ = 1u;
}

Response_GetSupportedAttKeyIDNumResponse::~Response_GetSupportedAttKeyIDNumResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_GetSupportedAttKeyIDNumResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Response_GetSupportedAttKeyIDNumResponse::ArenaDtor(void* object) {
  Response_GetSupportedAttKeyIDNumResponse* _this = reinterpret_cast< Response_GetSupportedAttKeyIDNumResponse* >(object);
  (void)_this;
}
void Response_GetSupportedAttKeyIDNumResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_GetSupportedAttKeyIDNumResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetSupportedAttKeyIDNumResponse& Response_GetSupportedAttKeyIDNumResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_GetSupportedAttKeyIDNumResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_GetSupportedAttKeyIDNumResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    att_key_id_num_ = 0u;
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_GetSupportedAttKeyIDNumResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 att_key_id_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_att_key_id_num(&has_bits);
          att_key_id_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_GetSupportedAttKeyIDNumResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional uint32 att_key_id_num = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_att_key_id_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  return target;
}

size_t Response_GetSupportedAttKeyIDNumResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 att_key_id_num = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_att_key_id_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetSupportedAttKeyIDNumResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_GetSupportedAttKeyIDNumResponse*>(
      &from));
}

void Response_GetSupportedAttKeyIDNumResponse::MergeFrom(const Response_GetSupportedAttKeyIDNumResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      att_key_id_num_ = from.att_key_id_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetSupportedAttKeyIDNumResponse::CopyFrom(const Response_GetSupportedAttKeyIDNumResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetSupportedAttKeyIDNumResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_GetSupportedAttKeyIDNumResponse::InternalSwap(Response_GetSupportedAttKeyIDNumResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(att_key_id_num_, other->att_key_id_num_);
  swap(errorcode_, other->errorcode_);
}

std::string Response_GetSupportedAttKeyIDNumResponse::GetTypeName() const {
  return "aesm.message.Response.GetSupportedAttKeyIDNumResponse";
}


// ===================================================================

void Response_GetSupportedAttKeyIDsResponse::InitAsDefaultInstance() {
}
class Response_GetSupportedAttKeyIDsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<Response_GetSupportedAttKeyIDsResponse>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_att_key_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Response_GetSupportedAttKeyIDsResponse::Response_GetSupportedAttKeyIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response.GetSupportedAttKeyIDsResponse)
}
Response_GetSupportedAttKeyIDsResponse::Response_GetSupportedAttKeyIDsResponse(const Response_GetSupportedAttKeyIDsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  att_key_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_att_key_ids()) {
    att_key_ids_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_att_key_ids(),
      GetArena());
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetSupportedAttKeyIDsResponse)
}

void Response_GetSupportedAttKeyIDsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_GetSupportedAttKeyIDsResponse_messages_2eproto.base);
  att_key_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_GetSupportedAttKeyIDsResponse::~Response_GetSupportedAttKeyIDsResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response_GetSupportedAttKeyIDsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  att_key_ids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response_GetSupportedAttKeyIDsResponse::ArenaDtor(void* object) {
  Response_GetSupportedAttKeyIDsResponse* _this = reinterpret_cast< Response_GetSupportedAttKeyIDsResponse* >(object);
  (void)_this;
}
void Response_GetSupportedAttKeyIDsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response_GetSupportedAttKeyIDsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetSupportedAttKeyIDsResponse& Response_GetSupportedAttKeyIDsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_GetSupportedAttKeyIDsResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void Response_GetSupportedAttKeyIDsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      att_key_ids_.ClearNonDefaultToEmpty();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response_GetSupportedAttKeyIDsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errorCode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes att_key_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_att_key_ids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response_GetSupportedAttKeyIDsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional bytes att_key_ids = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_att_key_ids(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  return target;
}

size_t Response_GetSupportedAttKeyIDsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  size_t total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes att_key_ids = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_att_key_ids());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetSupportedAttKeyIDsResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response_GetSupportedAttKeyIDsResponse*>(
      &from));
}

void Response_GetSupportedAttKeyIDsResponse::MergeFrom(const Response_GetSupportedAttKeyIDsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_att_key_ids(from._internal_att_key_ids());
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetSupportedAttKeyIDsResponse::CopyFrom(const Response_GetSupportedAttKeyIDsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetSupportedAttKeyIDsResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Response_GetSupportedAttKeyIDsResponse::InternalSwap(Response_GetSupportedAttKeyIDsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  att_key_ids_.Swap(&other->att_key_ids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errorcode_, other->errorcode_);
}

std::string Response_GetSupportedAttKeyIDsResponse::GetTypeName() const {
  return "aesm.message.Response.GetSupportedAttKeyIDsResponse";
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->initquoteres_ = const_cast< ::aesm::message::Response_InitQuoteResponse*>(
      ::aesm::message::Response_InitQuoteResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getquoteres_ = const_cast< ::aesm::message::Response_GetQuoteResponse*>(
      ::aesm::message::Response_GetQuoteResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getlictokenres_ = const_cast< ::aesm::message::Response_GetLaunchTokenResponse*>(
      ::aesm::message::Response_GetLaunchTokenResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->reporterrres_ = const_cast< ::aesm::message::Response_ReportAttestationErrorResponse*>(
      ::aesm::message::Response_ReportAttestationErrorResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getwhitelistsizeres_ = const_cast< ::aesm::message::Response_GetWhiteListSizeResponse*>(
      ::aesm::message::Response_GetWhiteListSizeResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getwhitelistres_ = const_cast< ::aesm::message::Response_GetWhiteListResponse*>(
      ::aesm::message::Response_GetWhiteListResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->sgxgetextendedepidgroupidres_ = const_cast< ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse*>(
      ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->sgxswitchextendedepidgroupres_ = const_cast< ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse*>(
      ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->sgxregisterres_ = const_cast< ::aesm::message::Response_SGXRegisterResponse*>(
      ::aesm::message::Response_SGXRegisterResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->initquoteexres_ = const_cast< ::aesm::message::Response_InitQuoteExResponse*>(
      ::aesm::message::Response_InitQuoteExResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getquotesizeexres_ = const_cast< ::aesm::message::Response_GetQuoteSizeExResponse*>(
      ::aesm::message::Response_GetQuoteSizeExResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getquoteexres_ = const_cast< ::aesm::message::Response_GetQuoteExResponse*>(
      ::aesm::message::Response_GetQuoteExResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->checkupdatestatusres_ = const_cast< ::aesm::message::Response_CheckUpdateStatusResponse*>(
      ::aesm::message::Response_CheckUpdateStatusResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->selectattkeyidres_ = const_cast< ::aesm::message::Response_SelectAttKeyIDResponse*>(
      ::aesm::message::Response_SelectAttKeyIDResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->unsupportedrequestresponse_ = const_cast< ::aesm::message::Response_UnsupportedRequestResponse*>(
      ::aesm::message::Response_UnsupportedRequestResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getsupportedattkeyidnumres_ = const_cast< ::aesm::message::Response_GetSupportedAttKeyIDNumResponse*>(
      ::aesm::message::Response_GetSupportedAttKeyIDNumResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getsupportedattkeyidsres_ = const_cast< ::aesm::message::Response_GetSupportedAttKeyIDsResponse*>(
      ::aesm::message::Response_GetSupportedAttKeyIDsResponse::internal_default_instance());
}
class Response::_Internal {
 public:
  using HasBits = decltype(std::declval<Response>()._has_bits_);
  static const ::aesm::message::Response_InitQuoteResponse& initquoteres(const Response* msg);
  static void set_has_initquoteres(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aesm::message::Response_GetQuoteResponse& getquoteres(const Response* msg);
  static void set_has_getquoteres(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aesm::message::Response_GetLaunchTokenResponse& getlictokenres(const Response* msg);
  static void set_has_getlictokenres(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aesm::message::Response_ReportAttestationErrorResponse& reporterrres(const Response* msg);
  static void set_has_reporterrres(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aesm::message::Response_GetWhiteListSizeResponse& getwhitelistsizeres(const Response* msg);
  static void set_has_getwhitelistsizeres(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::aesm::message::Response_GetWhiteListResponse& getwhitelistres(const Response* msg);
  static void set_has_getwhitelistres(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse& sgxgetextendedepidgroupidres(const Response* msg);
  static void set_has_sgxgetextendedepidgroupidres(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse& sgxswitchextendedepidgroupres(const Response* msg);
  static void set_has_sgxswitchextendedepidgroupres(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::aesm::message::Response_SGXRegisterResponse& sgxregisterres(const Response* msg);
  static void set_has_sgxregisterres(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::aesm::message::Response_InitQuoteExResponse& initquoteexres(const Response* msg);
  static void set_has_initquoteexres(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::aesm::message::Response_GetQuoteSizeExResponse& getquotesizeexres(const Response* msg);
  static void set_has_getquotesizeexres(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::aesm::message::Response_GetQuoteExResponse& getquoteexres(const Response* msg);
  static void set_has_getquoteexres(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::aesm::message::Response_CheckUpdateStatusResponse& checkupdatestatusres(const Response* msg);
  static void set_has_checkupdatestatusres(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::aesm::message::Response_SelectAttKeyIDResponse& selectattkeyidres(const Response* msg);
  static void set_has_selectattkeyidres(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::aesm::message::Response_UnsupportedRequestResponse& unsupportedrequestresponse(const Response* msg);
  static void set_has_unsupportedrequestresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::aesm::message::Response_GetSupportedAttKeyIDNumResponse& getsupportedattkeyidnumres(const Response* msg);
  static void set_has_getsupportedattkeyidnumres(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::aesm::message::Response_GetSupportedAttKeyIDsResponse& getsupportedattkeyidsres(const Response* msg);
  static void set_has_getsupportedattkeyidsres(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::aesm::message::Response_InitQuoteResponse&
Response::_Internal::initquoteres(const Response* msg) {
  return *msg->initquoteres_;
}
const ::aesm::message::Response_GetQuoteResponse&
Response::_Internal::getquoteres(const Response* msg) {
  return *msg->getquoteres_;
}
const ::aesm::message::Response_GetLaunchTokenResponse&
Response::_Internal::getlictokenres(const Response* msg) {
  return *msg->getlictokenres_;
}
const ::aesm::message::Response_ReportAttestationErrorResponse&
Response::_Internal::reporterrres(const Response* msg) {
  return *msg->reporterrres_;
}
const ::aesm::message::Response_GetWhiteListSizeResponse&
Response::_Internal::getwhitelistsizeres(const Response* msg) {
  return *msg->getwhitelistsizeres_;
}
const ::aesm::message::Response_GetWhiteListResponse&
Response::_Internal::getwhitelistres(const Response* msg) {
  return *msg->getwhitelistres_;
}
const ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse&
Response::_Internal::sgxgetextendedepidgroupidres(const Response* msg) {
  return *msg->sgxgetextendedepidgroupidres_;
}
const ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse&
Response::_Internal::sgxswitchextendedepidgroupres(const Response* msg) {
  return *msg->sgxswitchextendedepidgroupres_;
}
const ::aesm::message::Response_SGXRegisterResponse&
Response::_Internal::sgxregisterres(const Response* msg) {
  return *msg->sgxregisterres_;
}
const ::aesm::message::Response_InitQuoteExResponse&
Response::_Internal::initquoteexres(const Response* msg) {
  return *msg->initquoteexres_;
}
const ::aesm::message::Response_GetQuoteSizeExResponse&
Response::_Internal::getquotesizeexres(const Response* msg) {
  return *msg->getquotesizeexres_;
}
const ::aesm::message::Response_GetQuoteExResponse&
Response::_Internal::getquoteexres(const Response* msg) {
  return *msg->getquoteexres_;
}
const ::aesm::message::Response_CheckUpdateStatusResponse&
Response::_Internal::checkupdatestatusres(const Response* msg) {
  return *msg->checkupdatestatusres_;
}
const ::aesm::message::Response_SelectAttKeyIDResponse&
Response::_Internal::selectattkeyidres(const Response* msg) {
  return *msg->selectattkeyidres_;
}
const ::aesm::message::Response_UnsupportedRequestResponse&
Response::_Internal::unsupportedrequestresponse(const Response* msg) {
  return *msg->unsupportedrequestresponse_;
}
const ::aesm::message::Response_GetSupportedAttKeyIDNumResponse&
Response::_Internal::getsupportedattkeyidnumres(const Response* msg) {
  return *msg->getsupportedattkeyidnumres_;
}
const ::aesm::message::Response_GetSupportedAttKeyIDsResponse&
Response::_Internal::getsupportedattkeyidsres(const Response* msg) {
  return *msg->getsupportedattkeyidsres_;
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aesm.message.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_initquoteres()) {
    initquoteres_ = new ::aesm::message::Response_InitQuoteResponse(*from.initquoteres_);
  } else {
    initquoteres_ = nullptr;
  }
  if (from._internal_has_getquoteres()) {
    getquoteres_ = new ::aesm::message::Response_GetQuoteResponse(*from.getquoteres_);
  } else {
    getquoteres_ = nullptr;
  }
  if (from._internal_has_getlictokenres()) {
    getlictokenres_ = new ::aesm::message::Response_GetLaunchTokenResponse(*from.getlictokenres_);
  } else {
    getlictokenres_ = nullptr;
  }
  if (from._internal_has_reporterrres()) {
    reporterrres_ = new ::aesm::message::Response_ReportAttestationErrorResponse(*from.reporterrres_);
  } else {
    reporterrres_ = nullptr;
  }
  if (from._internal_has_getwhitelistsizeres()) {
    getwhitelistsizeres_ = new ::aesm::message::Response_GetWhiteListSizeResponse(*from.getwhitelistsizeres_);
  } else {
    getwhitelistsizeres_ = nullptr;
  }
  if (from._internal_has_getwhitelistres()) {
    getwhitelistres_ = new ::aesm::message::Response_GetWhiteListResponse(*from.getwhitelistres_);
  } else {
    getwhitelistres_ = nullptr;
  }
  if (from._internal_has_sgxgetextendedepidgroupidres()) {
    sgxgetextendedepidgroupidres_ = new ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse(*from.sgxgetextendedepidgroupidres_);
  } else {
    sgxgetextendedepidgroupidres_ = nullptr;
  }
  if (from._internal_has_sgxswitchextendedepidgroupres()) {
    sgxswitchextendedepidgroupres_ = new ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse(*from.sgxswitchextendedepidgroupres_);
  } else {
    sgxswitchextendedepidgroupres_ = nullptr;
  }
  if (from._internal_has_sgxregisterres()) {
    sgxregisterres_ = new ::aesm::message::Response_SGXRegisterResponse(*from.sgxregisterres_);
  } else {
    sgxregisterres_ = nullptr;
  }
  if (from._internal_has_initquoteexres()) {
    initquoteexres_ = new ::aesm::message::Response_InitQuoteExResponse(*from.initquoteexres_);
  } else {
    initquoteexres_ = nullptr;
  }
  if (from._internal_has_getquotesizeexres()) {
    getquotesizeexres_ = new ::aesm::message::Response_GetQuoteSizeExResponse(*from.getquotesizeexres_);
  } else {
    getquotesizeexres_ = nullptr;
  }
  if (from._internal_has_getquoteexres()) {
    getquoteexres_ = new ::aesm::message::Response_GetQuoteExResponse(*from.getquoteexres_);
  } else {
    getquoteexres_ = nullptr;
  }
  if (from._internal_has_checkupdatestatusres()) {
    checkupdatestatusres_ = new ::aesm::message::Response_CheckUpdateStatusResponse(*from.checkupdatestatusres_);
  } else {
    checkupdatestatusres_ = nullptr;
  }
  if (from._internal_has_selectattkeyidres()) {
    selectattkeyidres_ = new ::aesm::message::Response_SelectAttKeyIDResponse(*from.selectattkeyidres_);
  } else {
    selectattkeyidres_ = nullptr;
  }
  if (from._internal_has_unsupportedrequestresponse()) {
    unsupportedrequestresponse_ = new ::aesm::message::Response_UnsupportedRequestResponse(*from.unsupportedrequestresponse_);
  } else {
    unsupportedrequestresponse_ = nullptr;
  }
  if (from._internal_has_getsupportedattkeyidnumres()) {
    getsupportedattkeyidnumres_ = new ::aesm::message::Response_GetSupportedAttKeyIDNumResponse(*from.getsupportedattkeyidnumres_);
  } else {
    getsupportedattkeyidnumres_ = nullptr;
  }
  if (from._internal_has_getsupportedattkeyidsres()) {
    getsupportedattkeyidsres_ = new ::aesm::message::Response_GetSupportedAttKeyIDsResponse(*from.getsupportedattkeyidsres_);
  } else {
    getsupportedattkeyidsres_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_messages_2eproto.base);
  ::memset(&initquoteres_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getsupportedattkeyidsres_) -
      reinterpret_cast<char*>(&initquoteres_)) + sizeof(getsupportedattkeyidsres_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:aesm.message.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete initquoteres_;
  if (this != internal_default_instance()) delete getquoteres_;
  if (this != internal_default_instance()) delete getlictokenres_;
  if (this != internal_default_instance()) delete reporterrres_;
  if (this != internal_default_instance()) delete getwhitelistsizeres_;
  if (this != internal_default_instance()) delete getwhitelistres_;
  if (this != internal_default_instance()) delete sgxgetextendedepidgroupidres_;
  if (this != internal_default_instance()) delete sgxswitchextendedepidgroupres_;
  if (this != internal_default_instance()) delete sgxregisterres_;
  if (this != internal_default_instance()) delete initquoteexres_;
  if (this != internal_default_instance()) delete getquotesizeexres_;
  if (this != internal_default_instance()) delete getquoteexres_;
  if (this != internal_default_instance()) delete checkupdatestatusres_;
  if (this != internal_default_instance()) delete selectattkeyidres_;
  if (this != internal_default_instance()) delete unsupportedrequestresponse_;
  if (this != internal_default_instance()) delete getsupportedattkeyidnumres_;
  if (this != internal_default_instance()) delete getsupportedattkeyidsres_;
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_messages_2eproto.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(initquoteres_ != nullptr);
      initquoteres_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(getquoteres_ != nullptr);
      getquoteres_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(getlictokenres_ != nullptr);
      getlictokenres_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reporterrres_ != nullptr);
      reporterrres_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(getwhitelistsizeres_ != nullptr);
      getwhitelistsizeres_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(getwhitelistres_ != nullptr);
      getwhitelistres_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(sgxgetextendedepidgroupidres_ != nullptr);
      sgxgetextendedepidgroupidres_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(sgxswitchextendedepidgroupres_ != nullptr);
      sgxswitchextendedepidgroupres_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(sgxregisterres_ != nullptr);
      sgxregisterres_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(initquoteexres_ != nullptr);
      initquoteexres_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(getquotesizeexres_ != nullptr);
      getquotesizeexres_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(getquoteexres_ != nullptr);
      getquoteexres_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(checkupdatestatusres_ != nullptr);
      checkupdatestatusres_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(selectattkeyidres_ != nullptr);
      selectattkeyidres_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(unsupportedrequestresponse_ != nullptr);
      unsupportedrequestresponse_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(getsupportedattkeyidnumres_ != nullptr);
      getsupportedattkeyidnumres_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(getsupportedattkeyidsres_ != nullptr);
    getsupportedattkeyidsres_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initquoteres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_getquoteres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getlictokenres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reporterrres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_getwhitelistsizeres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_getwhitelistres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sgxgetextendedepidgroupidres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sgxswitchextendedepidgroupres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_sgxregisterres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_initquoteexres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_getquotesizeexres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_getquoteexres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkupdatestatusres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectattkeyidres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.UnsupportedRequestResponse unsupportedRequestResponse = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsupportedrequestresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.GetSupportedAttKeyIDNumResponse getSupportedAttKeyIDNumRes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_getsupportedattkeyidnumres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aesm.message.Response.GetSupportedAttKeyIDsResponse getSupportedAttKeyIDsRes = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_getsupportedattkeyidsres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::initquoteres(this), target, stream);
  }

  // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::getquoteres(this), target, stream);
  }

  // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::getlictokenres(this), target, stream);
  }

  // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reporterrres(this), target, stream);
  }

  // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::getwhitelistsizeres(this), target, stream);
  }

  // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::getwhitelistres(this), target, stream);
  }

  // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::sgxgetextendedepidgroupidres(this), target, stream);
  }

  // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sgxswitchextendedepidgroupres(this), target, stream);
  }

  // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::sgxregisterres(this), target, stream);
  }

  // optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::initquoteexres(this), target, stream);
  }

  // optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::getquotesizeexres(this), target, stream);
  }

  // optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::getquoteexres(this), target, stream);
  }

  // optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::checkupdatestatusres(this), target, stream);
  }

  // optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::selectattkeyidres(this), target, stream);
  }

  // optional .aesm.message.Response.UnsupportedRequestResponse unsupportedRequestResponse = 20;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::unsupportedrequestresponse(this), target, stream);
  }

  // optional .aesm.message.Response.GetSupportedAttKeyIDNumResponse getSupportedAttKeyIDNumRes = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::getsupportedattkeyidnumres(this), target, stream);
  }

  // optional .aesm.message.Response.GetSupportedAttKeyIDsResponse getSupportedAttKeyIDsRes = 22;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::getsupportedattkeyidsres(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *initquoteres_);
    }

    // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getquoteres_);
    }

    // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getlictokenres_);
    }

    // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reporterrres_);
    }

    // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getwhitelistsizeres_);
    }

    // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getwhitelistres_);
    }

    // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sgxgetextendedepidgroupidres_);
    }

    // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sgxswitchextendedepidgroupres_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sgxregisterres_);
    }

    // optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *initquoteexres_);
    }

    // optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getquotesizeexres_);
    }

    // optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getquoteexres_);
    }

    // optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *checkupdatestatusres_);
    }

    // optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selectattkeyidres_);
    }

    // optional .aesm.message.Response.UnsupportedRequestResponse unsupportedRequestResponse = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unsupportedrequestresponse_);
    }

    // optional .aesm.message.Response.GetSupportedAttKeyIDNumResponse getSupportedAttKeyIDNumRes = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getsupportedattkeyidnumres_);
    }

  }
  // optional .aesm.message.Response.GetSupportedAttKeyIDsResponse getSupportedAttKeyIDsRes = 22;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *getsupportedattkeyidsres_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response*>(
      &from));
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_initquoteres()->::aesm::message::Response_InitQuoteResponse::MergeFrom(from._internal_initquoteres());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_getquoteres()->::aesm::message::Response_GetQuoteResponse::MergeFrom(from._internal_getquoteres());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_getlictokenres()->::aesm::message::Response_GetLaunchTokenResponse::MergeFrom(from._internal_getlictokenres());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reporterrres()->::aesm::message::Response_ReportAttestationErrorResponse::MergeFrom(from._internal_reporterrres());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_getwhitelistsizeres()->::aesm::message::Response_GetWhiteListSizeResponse::MergeFrom(from._internal_getwhitelistsizeres());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_getwhitelistres()->::aesm::message::Response_GetWhiteListResponse::MergeFrom(from._internal_getwhitelistres());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_sgxgetextendedepidgroupidres()->::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::MergeFrom(from._internal_sgxgetextendedepidgroupidres());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_sgxswitchextendedepidgroupres()->::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::MergeFrom(from._internal_sgxswitchextendedepidgroupres());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_sgxregisterres()->::aesm::message::Response_SGXRegisterResponse::MergeFrom(from._internal_sgxregisterres());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_initquoteexres()->::aesm::message::Response_InitQuoteExResponse::MergeFrom(from._internal_initquoteexres());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_getquotesizeexres()->::aesm::message::Response_GetQuoteSizeExResponse::MergeFrom(from._internal_getquotesizeexres());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_getquoteexres()->::aesm::message::Response_GetQuoteExResponse::MergeFrom(from._internal_getquoteexres());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_checkupdatestatusres()->::aesm::message::Response_CheckUpdateStatusResponse::MergeFrom(from._internal_checkupdatestatusres());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_selectattkeyidres()->::aesm::message::Response_SelectAttKeyIDResponse::MergeFrom(from._internal_selectattkeyidres());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_unsupportedrequestresponse()->::aesm::message::Response_UnsupportedRequestResponse::MergeFrom(from._internal_unsupportedrequestresponse());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_getsupportedattkeyidnumres()->::aesm::message::Response_GetSupportedAttKeyIDNumResponse::MergeFrom(from._internal_getsupportedattkeyidnumres());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_mutable_getsupportedattkeyidsres()->::aesm::message::Response_GetSupportedAttKeyIDsResponse::MergeFrom(from._internal_getsupportedattkeyidsres());
  }
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if (_internal_has_initquoteres()) {
    if (!initquoteres_->IsInitialized()) return false;
  }
  if (_internal_has_getquoteres()) {
    if (!getquoteres_->IsInitialized()) return false;
  }
  if (_internal_has_getlictokenres()) {
    if (!getlictokenres_->IsInitialized()) return false;
  }
  if (_internal_has_reporterrres()) {
    if (!reporterrres_->IsInitialized()) return false;
  }
  if (_internal_has_getwhitelistsizeres()) {
    if (!getwhitelistsizeres_->IsInitialized()) return false;
  }
  if (_internal_has_getwhitelistres()) {
    if (!getwhitelistres_->IsInitialized()) return false;
  }
  if (_internal_has_sgxgetextendedepidgroupidres()) {
    if (!sgxgetextendedepidgroupidres_->IsInitialized()) return false;
  }
  if (_internal_has_sgxswitchextendedepidgroupres()) {
    if (!sgxswitchextendedepidgroupres_->IsInitialized()) return false;
  }
  if (_internal_has_sgxregisterres()) {
    if (!sgxregisterres_->IsInitialized()) return false;
  }
  if (_internal_has_initquoteexres()) {
    if (!initquoteexres_->IsInitialized()) return false;
  }
  if (_internal_has_getquotesizeexres()) {
    if (!getquotesizeexres_->IsInitialized()) return false;
  }
  if (_internal_has_getquoteexres()) {
    if (!getquoteexres_->IsInitialized()) return false;
  }
  if (_internal_has_checkupdatestatusres()) {
    if (!checkupdatestatusres_->IsInitialized()) return false;
  }
  if (_internal_has_selectattkeyidres()) {
    if (!selectattkeyidres_->IsInitialized()) return false;
  }
  if (_internal_has_unsupportedrequestresponse()) {
    if (!unsupportedrequestresponse_->IsInitialized()) return false;
  }
  if (_internal_has_getsupportedattkeyidnumres()) {
    if (!getsupportedattkeyidnumres_->IsInitialized()) return false;
  }
  if (_internal_has_getsupportedattkeyidsres()) {
    if (!getsupportedattkeyidsres_->IsInitialized()) return false;
  }
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, getsupportedattkeyidsres_)
      + sizeof(Response::getsupportedattkeyidsres_)
      - PROTOBUF_FIELD_OFFSET(Response, initquoteres_)>(
          reinterpret_cast<char*>(&initquoteres_),
          reinterpret_cast<char*>(&other->initquoteres_));
}

std::string Response::GetTypeName() const {
  return "aesm.message.Response";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace aesm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aesm::message::Request_InitQuoteRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_InitQuoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_InitQuoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_GetQuoteRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetQuoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_GetQuoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_GetLaunchTokenRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetLaunchTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_GetLaunchTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_ReportAttestationErrorRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_ReportAttestationErrorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_ReportAttestationErrorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_CheckUpdateStatusRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_CheckUpdateStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_CheckUpdateStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_GetWhiteListSizeRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetWhiteListSizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_GetWhiteListSizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_GetWhiteListRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetWhiteListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_GetWhiteListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_SGXRegisterRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_SGXRegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_SGXRegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_InitQuoteExRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_InitQuoteExRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_InitQuoteExRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_SelectAttKeyIDRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_SelectAttKeyIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_SelectAttKeyIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_GetQuoteSizeExRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetQuoteSizeExRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_GetQuoteSizeExRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_GetQuoteExRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetQuoteExRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_GetQuoteExRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetSupportedAttKeyIDNumRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_GetSupportedAttKeyIDNumRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request_GetSupportedAttKeyIDsRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetSupportedAttKeyIDsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request_GetSupportedAttKeyIDsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Request* Arena::CreateMaybeMessage< ::aesm::message::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_InitQuoteResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_InitQuoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_InitQuoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_GetQuoteResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetQuoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_GetQuoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_GetLaunchTokenResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetLaunchTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_GetLaunchTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_ReportAttestationErrorResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_ReportAttestationErrorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_ReportAttestationErrorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_CheckUpdateStatusResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_CheckUpdateStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_CheckUpdateStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_GetWhiteListSizeResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetWhiteListSizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_GetWhiteListSizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_GetWhiteListResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetWhiteListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_GetWhiteListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_SGXRegisterResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_SGXRegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_SGXRegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_SelectAttKeyIDResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_SelectAttKeyIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_SelectAttKeyIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_InitQuoteExResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_InitQuoteExResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_InitQuoteExResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_GetQuoteSizeExResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetQuoteSizeExResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_GetQuoteSizeExResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_GetQuoteExResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetQuoteExResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_GetQuoteExResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_UnsupportedRequestResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_UnsupportedRequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_UnsupportedRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetSupportedAttKeyIDNumResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_GetSupportedAttKeyIDNumResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response_GetSupportedAttKeyIDsResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetSupportedAttKeyIDsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response_GetSupportedAttKeyIDsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aesm::message::Response* Arena::CreateMaybeMessage< ::aesm::message::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aesm::message::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
